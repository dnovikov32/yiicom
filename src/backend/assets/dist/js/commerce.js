/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _vue = __webpack_require__(2);

	var _vue2 = _interopRequireDefault(_vue);

	var _vueRouter = __webpack_require__(3);

	var _vueRouter2 = _interopRequireDefault(_vueRouter);

	var _axios = __webpack_require__(5);

	var _axios2 = _interopRequireDefault(_axios);

	var _vueAxios = __webpack_require__(103);

	var _vueAxios2 = _interopRequireDefault(_vueAxios);

	var _vueAuth = __webpack_require__(104);

	var _vueAuth2 = _interopRequireDefault(_vueAuth);

	var _bootstrapVue = __webpack_require__(109);

	var _bootstrapVue2 = _interopRequireDefault(_bootstrapVue);

	var _vueNotification = __webpack_require__(110);

	var _vueNotification2 = _interopRequireDefault(_vueNotification);

	var _vueCkeditor = __webpack_require__(111);

	var _vueCkeditor2 = _interopRequireDefault(_vueCkeditor);

	var _vueUploadComponent = __webpack_require__(112);

	var _vueUploadComponent2 = _interopRequireDefault(_vueUploadComponent);

	var _vuedraggable = __webpack_require__(113);

	var _vuedraggable2 = _interopRequireDefault(_vuedraggable);

	var _App = __webpack_require__(115);

	var _App2 = _interopRequireDefault(_App);

	var _Loader = __webpack_require__(127);

	var _Loader2 = _interopRequireDefault(_Loader);

	var _AdminButtons = __webpack_require__(130);

	var _AdminButtons2 = _interopRequireDefault(_AdminButtons);

	var _commerce = __webpack_require__(137);

	var _commerce2 = _interopRequireDefault(_commerce);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// TODO: how to organize vue components from different modules

	window._ = __webpack_require__(143); // TODO: try to create global script


	_vue2.default.use(_vueRouter2.default);
	_vue2.default.use(_vueAxios2.default, _axios2.default);
	_vue2.default.use(_bootstrapVue2.default);
	_vue2.default.use(_vueNotification2.default);

	_vue2.default.component('file-upload', _vueUploadComponent2.default);
	_vue2.default.component('draggable', _vuedraggable2.default);
	_vue2.default.component('vue-ckeditor', _vueCkeditor2.default);
	_vue2.default.component('yc-loader', _Loader2.default);
	_vue2.default.component('yc-admin-buttons', _AdminButtons2.default);

	var router = new _vueRouter2.default({
	    mode: 'hash',
	    linkActiveClass: 'active',
	    routes: [{
	        path: '/',
	        name: 'dashboard',
	        component: __webpack_require__(145),
	        meta: {
	            auth: true,
	            breadcrumbs: [{ text: 'Главная' }]
	        }
	    }, {
	        path: '/login',
	        name: 'login',
	        component: __webpack_require__(148),
	        meta: { auth: false }
	    }]
	});

	_vue2.default.router = router;

	_vue2.default.use(_vueAuth2.default, {
	    auth: __webpack_require__(151),
	    http: __webpack_require__(152),
	    router: __webpack_require__(153),
	    loginData: {
	        url: 'admin/api/v1/auth/login',
	        redirect: '/',
	        fetchUser: false
	    },
	    logoutData: {
	        url: 'admin/api/v1/auth/logout',
	        redirect: '/',
	        makeRequest: true
	    },
	    refreshData: {
	        url: 'admin/api/v1/auth/refresh',
	        enabled: false,
	        interval: 30
	    },
	    fetchData: {
	        url: 'admin/api/v1/auth/user',
	        enabled: false
	    }
	});

	window.App = new _vue2.default({
	    store: _commerce2.default,
	    router: router,
	    render: function render(h) {
	        return h(_App2.default);
	    }
	}).$mount('#app');

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = Vue;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*!
	  * vue-router v3.0.2
	  * (c) 2018 Evan You
	  * @license MIT
	  */
	'use strict';

	/*  */

	function assert (condition, message) {
	  if (!condition) {
	    throw new Error(("[vue-router] " + message))
	  }
	}

	function warn (condition, message) {
	  if (process.env.NODE_ENV !== 'production' && !condition) {
	    typeof console !== 'undefined' && console.warn(("[vue-router] " + message));
	  }
	}

	function isError (err) {
	  return Object.prototype.toString.call(err).indexOf('Error') > -1
	}

	function extend (a, b) {
	  for (var key in b) {
	    a[key] = b[key];
	  }
	  return a
	}

	var View = {
	  name: 'RouterView',
	  functional: true,
	  props: {
	    name: {
	      type: String,
	      default: 'default'
	    }
	  },
	  render: function render (_, ref) {
	    var props = ref.props;
	    var children = ref.children;
	    var parent = ref.parent;
	    var data = ref.data;

	    // used by devtools to display a router-view badge
	    data.routerView = true;

	    // directly use parent context's createElement() function
	    // so that components rendered by router-view can resolve named slots
	    var h = parent.$createElement;
	    var name = props.name;
	    var route = parent.$route;
	    var cache = parent._routerViewCache || (parent._routerViewCache = {});

	    // determine current view depth, also check to see if the tree
	    // has been toggled inactive but kept-alive.
	    var depth = 0;
	    var inactive = false;
	    while (parent && parent._routerRoot !== parent) {
	      if (parent.$vnode && parent.$vnode.data.routerView) {
	        depth++;
	      }
	      if (parent._inactive) {
	        inactive = true;
	      }
	      parent = parent.$parent;
	    }
	    data.routerViewDepth = depth;

	    // render previous view if the tree is inactive and kept-alive
	    if (inactive) {
	      return h(cache[name], data, children)
	    }

	    var matched = route.matched[depth];
	    // render empty node if no matched route
	    if (!matched) {
	      cache[name] = null;
	      return h()
	    }

	    var component = cache[name] = matched.components[name];

	    // attach instance registration hook
	    // this will be called in the instance's injected lifecycle hooks
	    data.registerRouteInstance = function (vm, val) {
	      // val could be undefined for unregistration
	      var current = matched.instances[name];
	      if (
	        (val && current !== vm) ||
	        (!val && current === vm)
	      ) {
	        matched.instances[name] = val;
	      }
	    }

	    // also register instance in prepatch hook
	    // in case the same component instance is reused across different routes
	    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {
	      matched.instances[name] = vnode.componentInstance;
	    };

	    // resolve props
	    var propsToPass = data.props = resolveProps(route, matched.props && matched.props[name]);
	    if (propsToPass) {
	      // clone to prevent mutation
	      propsToPass = data.props = extend({}, propsToPass);
	      // pass non-declared props as attrs
	      var attrs = data.attrs = data.attrs || {};
	      for (var key in propsToPass) {
	        if (!component.props || !(key in component.props)) {
	          attrs[key] = propsToPass[key];
	          delete propsToPass[key];
	        }
	      }
	    }

	    return h(component, data, children)
	  }
	}

	function resolveProps (route, config) {
	  switch (typeof config) {
	    case 'undefined':
	      return
	    case 'object':
	      return config
	    case 'function':
	      return config(route)
	    case 'boolean':
	      return config ? route.params : undefined
	    default:
	      if (process.env.NODE_ENV !== 'production') {
	        warn(
	          false,
	          "props in \"" + (route.path) + "\" is a " + (typeof config) + ", " +
	          "expecting an object, function or boolean."
	        );
	      }
	  }
	}

	/*  */

	var encodeReserveRE = /[!'()*]/g;
	var encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };
	var commaRE = /%2C/g;

	// fixed encodeURIComponent which is more conformant to RFC3986:
	// - escapes [!'()*]
	// - preserve commas
	var encode = function (str) { return encodeURIComponent(str)
	  .replace(encodeReserveRE, encodeReserveReplacer)
	  .replace(commaRE, ','); };

	var decode = decodeURIComponent;

	function resolveQuery (
	  query,
	  extraQuery,
	  _parseQuery
	) {
	  if ( extraQuery === void 0 ) extraQuery = {};

	  var parse = _parseQuery || parseQuery;
	  var parsedQuery;
	  try {
	    parsedQuery = parse(query || '');
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' && warn(false, e.message);
	    parsedQuery = {};
	  }
	  for (var key in extraQuery) {
	    parsedQuery[key] = extraQuery[key];
	  }
	  return parsedQuery
	}

	function parseQuery (query) {
	  var res = {};

	  query = query.trim().replace(/^(\?|#|&)/, '');

	  if (!query) {
	    return res
	  }

	  query.split('&').forEach(function (param) {
	    var parts = param.replace(/\+/g, ' ').split('=');
	    var key = decode(parts.shift());
	    var val = parts.length > 0
	      ? decode(parts.join('='))
	      : null;

	    if (res[key] === undefined) {
	      res[key] = val;
	    } else if (Array.isArray(res[key])) {
	      res[key].push(val);
	    } else {
	      res[key] = [res[key], val];
	    }
	  });

	  return res
	}

	function stringifyQuery (obj) {
	  var res = obj ? Object.keys(obj).map(function (key) {
	    var val = obj[key];

	    if (val === undefined) {
	      return ''
	    }

	    if (val === null) {
	      return encode(key)
	    }

	    if (Array.isArray(val)) {
	      var result = [];
	      val.forEach(function (val2) {
	        if (val2 === undefined) {
	          return
	        }
	        if (val2 === null) {
	          result.push(encode(key));
	        } else {
	          result.push(encode(key) + '=' + encode(val2));
	        }
	      });
	      return result.join('&')
	    }

	    return encode(key) + '=' + encode(val)
	  }).filter(function (x) { return x.length > 0; }).join('&') : null;
	  return res ? ("?" + res) : ''
	}

	/*  */

	var trailingSlashRE = /\/?$/;

	function createRoute (
	  record,
	  location,
	  redirectedFrom,
	  router
	) {
	  var stringifyQuery$$1 = router && router.options.stringifyQuery;

	  var query = location.query || {};
	  try {
	    query = clone(query);
	  } catch (e) {}

	  var route = {
	    name: location.name || (record && record.name),
	    meta: (record && record.meta) || {},
	    path: location.path || '/',
	    hash: location.hash || '',
	    query: query,
	    params: location.params || {},
	    fullPath: getFullPath(location, stringifyQuery$$1),
	    matched: record ? formatMatch(record) : []
	  };
	  if (redirectedFrom) {
	    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);
	  }
	  return Object.freeze(route)
	}

	function clone (value) {
	  if (Array.isArray(value)) {
	    return value.map(clone)
	  } else if (value && typeof value === 'object') {
	    var res = {};
	    for (var key in value) {
	      res[key] = clone(value[key]);
	    }
	    return res
	  } else {
	    return value
	  }
	}

	// the starting route that represents the initial state
	var START = createRoute(null, {
	  path: '/'
	});

	function formatMatch (record) {
	  var res = [];
	  while (record) {
	    res.unshift(record);
	    record = record.parent;
	  }
	  return res
	}

	function getFullPath (
	  ref,
	  _stringifyQuery
	) {
	  var path = ref.path;
	  var query = ref.query; if ( query === void 0 ) query = {};
	  var hash = ref.hash; if ( hash === void 0 ) hash = '';

	  var stringify = _stringifyQuery || stringifyQuery;
	  return (path || '/') + stringify(query) + hash
	}

	function isSameRoute (a, b) {
	  if (b === START) {
	    return a === b
	  } else if (!b) {
	    return false
	  } else if (a.path && b.path) {
	    return (
	      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&
	      a.hash === b.hash &&
	      isObjectEqual(a.query, b.query)
	    )
	  } else if (a.name && b.name) {
	    return (
	      a.name === b.name &&
	      a.hash === b.hash &&
	      isObjectEqual(a.query, b.query) &&
	      isObjectEqual(a.params, b.params)
	    )
	  } else {
	    return false
	  }
	}

	function isObjectEqual (a, b) {
	  if ( a === void 0 ) a = {};
	  if ( b === void 0 ) b = {};

	  // handle null value #1566
	  if (!a || !b) { return a === b }
	  var aKeys = Object.keys(a);
	  var bKeys = Object.keys(b);
	  if (aKeys.length !== bKeys.length) {
	    return false
	  }
	  return aKeys.every(function (key) {
	    var aVal = a[key];
	    var bVal = b[key];
	    // check nested equality
	    if (typeof aVal === 'object' && typeof bVal === 'object') {
	      return isObjectEqual(aVal, bVal)
	    }
	    return String(aVal) === String(bVal)
	  })
	}

	function isIncludedRoute (current, target) {
	  return (
	    current.path.replace(trailingSlashRE, '/').indexOf(
	      target.path.replace(trailingSlashRE, '/')
	    ) === 0 &&
	    (!target.hash || current.hash === target.hash) &&
	    queryIncludes(current.query, target.query)
	  )
	}

	function queryIncludes (current, target) {
	  for (var key in target) {
	    if (!(key in current)) {
	      return false
	    }
	  }
	  return true
	}

	/*  */

	// work around weird flow bug
	var toTypes = [String, Object];
	var eventTypes = [String, Array];

	var Link = {
	  name: 'RouterLink',
	  props: {
	    to: {
	      type: toTypes,
	      required: true
	    },
	    tag: {
	      type: String,
	      default: 'a'
	    },
	    exact: Boolean,
	    append: Boolean,
	    replace: Boolean,
	    activeClass: String,
	    exactActiveClass: String,
	    event: {
	      type: eventTypes,
	      default: 'click'
	    }
	  },
	  render: function render (h) {
	    var this$1 = this;

	    var router = this.$router;
	    var current = this.$route;
	    var ref = router.resolve(this.to, current, this.append);
	    var location = ref.location;
	    var route = ref.route;
	    var href = ref.href;

	    var classes = {};
	    var globalActiveClass = router.options.linkActiveClass;
	    var globalExactActiveClass = router.options.linkExactActiveClass;
	    // Support global empty active class
	    var activeClassFallback = globalActiveClass == null
	      ? 'router-link-active'
	      : globalActiveClass;
	    var exactActiveClassFallback = globalExactActiveClass == null
	      ? 'router-link-exact-active'
	      : globalExactActiveClass;
	    var activeClass = this.activeClass == null
	      ? activeClassFallback
	      : this.activeClass;
	    var exactActiveClass = this.exactActiveClass == null
	      ? exactActiveClassFallback
	      : this.exactActiveClass;
	    var compareTarget = location.path
	      ? createRoute(null, location, null, router)
	      : route;

	    classes[exactActiveClass] = isSameRoute(current, compareTarget);
	    classes[activeClass] = this.exact
	      ? classes[exactActiveClass]
	      : isIncludedRoute(current, compareTarget);

	    var handler = function (e) {
	      if (guardEvent(e)) {
	        if (this$1.replace) {
	          router.replace(location);
	        } else {
	          router.push(location);
	        }
	      }
	    };

	    var on = { click: guardEvent };
	    if (Array.isArray(this.event)) {
	      this.event.forEach(function (e) { on[e] = handler; });
	    } else {
	      on[this.event] = handler;
	    }

	    var data = {
	      class: classes
	    };

	    if (this.tag === 'a') {
	      data.on = on;
	      data.attrs = { href: href };
	    } else {
	      // find the first <a> child and apply listener and href
	      var a = findAnchor(this.$slots.default);
	      if (a) {
	        // in case the <a> is a static node
	        a.isStatic = false;
	        var aData = a.data = extend({}, a.data);
	        aData.on = on;
	        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
	        aAttrs.href = href;
	      } else {
	        // doesn't have <a> child, apply listener to self
	        data.on = on;
	      }
	    }

	    return h(this.tag, data, this.$slots.default)
	  }
	}

	function guardEvent (e) {
	  // don't redirect with control keys
	  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }
	  // don't redirect when preventDefault called
	  if (e.defaultPrevented) { return }
	  // don't redirect on right click
	  if (e.button !== undefined && e.button !== 0) { return }
	  // don't redirect if `target="_blank"`
	  if (e.currentTarget && e.currentTarget.getAttribute) {
	    var target = e.currentTarget.getAttribute('target');
	    if (/\b_blank\b/i.test(target)) { return }
	  }
	  // this may be a Weex event which doesn't have this method
	  if (e.preventDefault) {
	    e.preventDefault();
	  }
	  return true
	}

	function findAnchor (children) {
	  if (children) {
	    var child;
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      if (child.tag === 'a') {
	        return child
	      }
	      if (child.children && (child = findAnchor(child.children))) {
	        return child
	      }
	    }
	  }
	}

	var _Vue;

	function install (Vue) {
	  if (install.installed && _Vue === Vue) { return }
	  install.installed = true;

	  _Vue = Vue;

	  var isDef = function (v) { return v !== undefined; };

	  var registerInstance = function (vm, callVal) {
	    var i = vm.$options._parentVnode;
	    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
	      i(vm, callVal);
	    }
	  };

	  Vue.mixin({
	    beforeCreate: function beforeCreate () {
	      if (isDef(this.$options.router)) {
	        this._routerRoot = this;
	        this._router = this.$options.router;
	        this._router.init(this);
	        Vue.util.defineReactive(this, '_route', this._router.history.current);
	      } else {
	        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;
	      }
	      registerInstance(this, this);
	    },
	    destroyed: function destroyed () {
	      registerInstance(this);
	    }
	  });

	  Object.defineProperty(Vue.prototype, '$router', {
	    get: function get () { return this._routerRoot._router }
	  });

	  Object.defineProperty(Vue.prototype, '$route', {
	    get: function get () { return this._routerRoot._route }
	  });

	  Vue.component('RouterView', View);
	  Vue.component('RouterLink', Link);

	  var strats = Vue.config.optionMergeStrategies;
	  // use the same hook merging strategy for route hooks
	  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
	}

	/*  */

	var inBrowser = typeof window !== 'undefined';

	/*  */

	function resolvePath (
	  relative,
	  base,
	  append
	) {
	  var firstChar = relative.charAt(0);
	  if (firstChar === '/') {
	    return relative
	  }

	  if (firstChar === '?' || firstChar === '#') {
	    return base + relative
	  }

	  var stack = base.split('/');

	  // remove trailing segment if:
	  // - not appending
	  // - appending to trailing slash (last segment is empty)
	  if (!append || !stack[stack.length - 1]) {
	    stack.pop();
	  }

	  // resolve relative path
	  var segments = relative.replace(/^\//, '').split('/');
	  for (var i = 0; i < segments.length; i++) {
	    var segment = segments[i];
	    if (segment === '..') {
	      stack.pop();
	    } else if (segment !== '.') {
	      stack.push(segment);
	    }
	  }

	  // ensure leading slash
	  if (stack[0] !== '') {
	    stack.unshift('');
	  }

	  return stack.join('/')
	}

	function parsePath (path) {
	  var hash = '';
	  var query = '';

	  var hashIndex = path.indexOf('#');
	  if (hashIndex >= 0) {
	    hash = path.slice(hashIndex);
	    path = path.slice(0, hashIndex);
	  }

	  var queryIndex = path.indexOf('?');
	  if (queryIndex >= 0) {
	    query = path.slice(queryIndex + 1);
	    path = path.slice(0, queryIndex);
	  }

	  return {
	    path: path,
	    query: query,
	    hash: hash
	  }
	}

	function cleanPath (path) {
	  return path.replace(/\/\//g, '/')
	}

	var isarray = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

	/**
	 * Expose `pathToRegexp`.
	 */
	var pathToRegexp_1 = pathToRegexp;
	var parse_1 = parse;
	var compile_1 = compile;
	var tokensToFunction_1 = tokensToFunction;
	var tokensToRegExp_1 = tokensToRegExp;

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g');

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse (str, options) {
	  var tokens = [];
	  var key = 0;
	  var index = 0;
	  var path = '';
	  var defaultDelimiter = options && options.delimiter || '/';
	  var res;

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0];
	    var escaped = res[1];
	    var offset = res.index;
	    path += str.slice(index, offset);
	    index = offset + m.length;

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1];
	      continue
	    }

	    var next = str[index];
	    var prefix = res[2];
	    var name = res[3];
	    var capture = res[4];
	    var group = res[5];
	    var modifier = res[6];
	    var asterisk = res[7];

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path);
	      path = '';
	    }

	    var partial = prefix != null && next != null && next !== prefix;
	    var repeat = modifier === '+' || modifier === '*';
	    var optional = modifier === '?' || modifier === '*';
	    var delimiter = res[2] || defaultDelimiter;
	    var pattern = capture || group;

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
	    });
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index);
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path);
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str, options) {
	  return tokensToFunction(parse(str, options))
	}

	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length);

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
	    }
	  }

	  return function (obj, opts) {
	    var path = '';
	    var data = obj || {};
	    var options = opts || {};
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];

	      if (typeof token === 'string') {
	        path += token;

	        continue
	      }

	      var value = data[token.name];
	      var segment;

	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix;
	          }

	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j]);

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment;
	        }

	        continue
	      }

	      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment;
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys;
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g);

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      });
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = [];

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source);
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  return tokensToRegExp(parse(path, options), keys, options)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options);
	    keys = [];
	  }

	  options = options || {};

	  var strict = options.strict;
	  var end = options.end !== false;
	  var route = '';

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i];

	    if (typeof token === 'string') {
	      route += escapeString(token);
	    } else {
	      var prefix = escapeString(token.prefix);
	      var capture = '(?:' + token.pattern + ')';

	      keys.push(token);

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*';
	      }

	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?';
	        } else {
	          capture = prefix + '(' + capture + ')?';
	        }
	      } else {
	        capture = prefix + '(' + capture + ')';
	      }

	      route += capture;
	    }
	  }

	  var delimiter = escapeString(options.delimiter || '/');
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
	  }

	  if (end) {
	    route += '$';
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
	  }

	  return attachKeys(new RegExp('^' + route, flags(options)), keys)
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options);
	    keys = [];
	  }

	  options = options || {};

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }

	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}
	pathToRegexp_1.parse = parse_1;
	pathToRegexp_1.compile = compile_1;
	pathToRegexp_1.tokensToFunction = tokensToFunction_1;
	pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

	/*  */

	// $flow-disable-line
	var regexpCompileCache = Object.create(null);

	function fillParams (
	  path,
	  params,
	  routeMsg
	) {
	  try {
	    var filler =
	      regexpCompileCache[path] ||
	      (regexpCompileCache[path] = pathToRegexp_1.compile(path));
	    return filler(params || {}, { pretty: true })
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production') {
	      warn(false, ("missing param for " + routeMsg + ": " + (e.message)));
	    }
	    return ''
	  }
	}

	/*  */

	function createRouteMap (
	  routes,
	  oldPathList,
	  oldPathMap,
	  oldNameMap
	) {
	  // the path list is used to control path matching priority
	  var pathList = oldPathList || [];
	  // $flow-disable-line
	  var pathMap = oldPathMap || Object.create(null);
	  // $flow-disable-line
	  var nameMap = oldNameMap || Object.create(null);

	  routes.forEach(function (route) {
	    addRouteRecord(pathList, pathMap, nameMap, route);
	  });

	  // ensure wildcard routes are always at the end
	  for (var i = 0, l = pathList.length; i < l; i++) {
	    if (pathList[i] === '*') {
	      pathList.push(pathList.splice(i, 1)[0]);
	      l--;
	      i--;
	    }
	  }

	  return {
	    pathList: pathList,
	    pathMap: pathMap,
	    nameMap: nameMap
	  }
	}

	function addRouteRecord (
	  pathList,
	  pathMap,
	  nameMap,
	  route,
	  parent,
	  matchAs
	) {
	  var path = route.path;
	  var name = route.name;
	  if (process.env.NODE_ENV !== 'production') {
	    assert(path != null, "\"path\" is required in a route configuration.");
	    assert(
	      typeof route.component !== 'string',
	      "route config \"component\" for path: " + (String(path || name)) + " cannot be a " +
	      "string id. Use an actual component instead."
	    );
	  }

	  var pathToRegexpOptions = route.pathToRegexpOptions || {};
	  var normalizedPath = normalizePath(
	    path,
	    parent,
	    pathToRegexpOptions.strict
	  );

	  if (typeof route.caseSensitive === 'boolean') {
	    pathToRegexpOptions.sensitive = route.caseSensitive;
	  }

	  var record = {
	    path: normalizedPath,
	    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
	    components: route.components || { default: route.component },
	    instances: {},
	    name: name,
	    parent: parent,
	    matchAs: matchAs,
	    redirect: route.redirect,
	    beforeEnter: route.beforeEnter,
	    meta: route.meta || {},
	    props: route.props == null
	      ? {}
	      : route.components
	        ? route.props
	        : { default: route.props }
	  };

	  if (route.children) {
	    // Warn if route is named, does not redirect and has a default child route.
	    // If users navigate to this route by name, the default child will
	    // not be rendered (GH Issue #629)
	    if (process.env.NODE_ENV !== 'production') {
	      if (route.name && !route.redirect && route.children.some(function (child) { return /^\/?$/.test(child.path); })) {
	        warn(
	          false,
	          "Named Route '" + (route.name) + "' has a default child route. " +
	          "When navigating to this named route (:to=\"{name: '" + (route.name) + "'\"), " +
	          "the default child route will not be rendered. Remove the name from " +
	          "this route and use the name of the default child route for named " +
	          "links instead."
	        );
	      }
	    }
	    route.children.forEach(function (child) {
	      var childMatchAs = matchAs
	        ? cleanPath((matchAs + "/" + (child.path)))
	        : undefined;
	      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
	    });
	  }

	  if (route.alias !== undefined) {
	    var aliases = Array.isArray(route.alias)
	      ? route.alias
	      : [route.alias];

	    aliases.forEach(function (alias) {
	      var aliasRoute = {
	        path: alias,
	        children: route.children
	      };
	      addRouteRecord(
	        pathList,
	        pathMap,
	        nameMap,
	        aliasRoute,
	        parent,
	        record.path || '/' // matchAs
	      );
	    });
	  }

	  if (!pathMap[record.path]) {
	    pathList.push(record.path);
	    pathMap[record.path] = record;
	  }

	  if (name) {
	    if (!nameMap[name]) {
	      nameMap[name] = record;
	    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {
	      warn(
	        false,
	        "Duplicate named routes definition: " +
	        "{ name: \"" + name + "\", path: \"" + (record.path) + "\" }"
	      );
	    }
	  }
	}

	function compileRouteRegex (path, pathToRegexpOptions) {
	  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);
	  if (process.env.NODE_ENV !== 'production') {
	    var keys = Object.create(null);
	    regex.keys.forEach(function (key) {
	      warn(!keys[key.name], ("Duplicate param keys in route with path: \"" + path + "\""));
	      keys[key.name] = true;
	    });
	  }
	  return regex
	}

	function normalizePath (path, parent, strict) {
	  if (!strict) { path = path.replace(/\/$/, ''); }
	  if (path[0] === '/') { return path }
	  if (parent == null) { return path }
	  return cleanPath(((parent.path) + "/" + path))
	}

	/*  */

	function normalizeLocation (
	  raw,
	  current,
	  append,
	  router
	) {
	  var next = typeof raw === 'string' ? { path: raw } : raw;
	  // named target
	  if (next.name || next._normalized) {
	    return next
	  }

	  // relative params
	  if (!next.path && next.params && current) {
	    next = extend({}, next);
	    next._normalized = true;
	    var params = extend(extend({}, current.params), next.params);
	    if (current.name) {
	      next.name = current.name;
	      next.params = params;
	    } else if (current.matched.length) {
	      var rawPath = current.matched[current.matched.length - 1].path;
	      next.path = fillParams(rawPath, params, ("path " + (current.path)));
	    } else if (process.env.NODE_ENV !== 'production') {
	      warn(false, "relative params navigation requires a current route.");
	    }
	    return next
	  }

	  var parsedPath = parsePath(next.path || '');
	  var basePath = (current && current.path) || '/';
	  var path = parsedPath.path
	    ? resolvePath(parsedPath.path, basePath, append || next.append)
	    : basePath;

	  var query = resolveQuery(
	    parsedPath.query,
	    next.query,
	    router && router.options.parseQuery
	  );

	  var hash = next.hash || parsedPath.hash;
	  if (hash && hash.charAt(0) !== '#') {
	    hash = "#" + hash;
	  }

	  return {
	    _normalized: true,
	    path: path,
	    query: query,
	    hash: hash
	  }
	}

	/*  */



	function createMatcher (
	  routes,
	  router
	) {
	  var ref = createRouteMap(routes);
	  var pathList = ref.pathList;
	  var pathMap = ref.pathMap;
	  var nameMap = ref.nameMap;

	  function addRoutes (routes) {
	    createRouteMap(routes, pathList, pathMap, nameMap);
	  }

	  function match (
	    raw,
	    currentRoute,
	    redirectedFrom
	  ) {
	    var location = normalizeLocation(raw, currentRoute, false, router);
	    var name = location.name;

	    if (name) {
	      var record = nameMap[name];
	      if (process.env.NODE_ENV !== 'production') {
	        warn(record, ("Route with name '" + name + "' does not exist"));
	      }
	      if (!record) { return _createRoute(null, location) }
	      var paramNames = record.regex.keys
	        .filter(function (key) { return !key.optional; })
	        .map(function (key) { return key.name; });

	      if (typeof location.params !== 'object') {
	        location.params = {};
	      }

	      if (currentRoute && typeof currentRoute.params === 'object') {
	        for (var key in currentRoute.params) {
	          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
	            location.params[key] = currentRoute.params[key];
	          }
	        }
	      }

	      if (record) {
	        location.path = fillParams(record.path, location.params, ("named route \"" + name + "\""));
	        return _createRoute(record, location, redirectedFrom)
	      }
	    } else if (location.path) {
	      location.params = {};
	      for (var i = 0; i < pathList.length; i++) {
	        var path = pathList[i];
	        var record$1 = pathMap[path];
	        if (matchRoute(record$1.regex, location.path, location.params)) {
	          return _createRoute(record$1, location, redirectedFrom)
	        }
	      }
	    }
	    // no match
	    return _createRoute(null, location)
	  }

	  function redirect (
	    record,
	    location
	  ) {
	    var originalRedirect = record.redirect;
	    var redirect = typeof originalRedirect === 'function'
	      ? originalRedirect(createRoute(record, location, null, router))
	      : originalRedirect;

	    if (typeof redirect === 'string') {
	      redirect = { path: redirect };
	    }

	    if (!redirect || typeof redirect !== 'object') {
	      if (process.env.NODE_ENV !== 'production') {
	        warn(
	          false, ("invalid redirect option: " + (JSON.stringify(redirect)))
	        );
	      }
	      return _createRoute(null, location)
	    }

	    var re = redirect;
	    var name = re.name;
	    var path = re.path;
	    var query = location.query;
	    var hash = location.hash;
	    var params = location.params;
	    query = re.hasOwnProperty('query') ? re.query : query;
	    hash = re.hasOwnProperty('hash') ? re.hash : hash;
	    params = re.hasOwnProperty('params') ? re.params : params;

	    if (name) {
	      // resolved named direct
	      var targetRecord = nameMap[name];
	      if (process.env.NODE_ENV !== 'production') {
	        assert(targetRecord, ("redirect failed: named route \"" + name + "\" not found."));
	      }
	      return match({
	        _normalized: true,
	        name: name,
	        query: query,
	        hash: hash,
	        params: params
	      }, undefined, location)
	    } else if (path) {
	      // 1. resolve relative redirect
	      var rawPath = resolveRecordPath(path, record);
	      // 2. resolve params
	      var resolvedPath = fillParams(rawPath, params, ("redirect route with path \"" + rawPath + "\""));
	      // 3. rematch with existing query and hash
	      return match({
	        _normalized: true,
	        path: resolvedPath,
	        query: query,
	        hash: hash
	      }, undefined, location)
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        warn(false, ("invalid redirect option: " + (JSON.stringify(redirect))));
	      }
	      return _createRoute(null, location)
	    }
	  }

	  function alias (
	    record,
	    location,
	    matchAs
	  ) {
	    var aliasedPath = fillParams(matchAs, location.params, ("aliased route with path \"" + matchAs + "\""));
	    var aliasedMatch = match({
	      _normalized: true,
	      path: aliasedPath
	    });
	    if (aliasedMatch) {
	      var matched = aliasedMatch.matched;
	      var aliasedRecord = matched[matched.length - 1];
	      location.params = aliasedMatch.params;
	      return _createRoute(aliasedRecord, location)
	    }
	    return _createRoute(null, location)
	  }

	  function _createRoute (
	    record,
	    location,
	    redirectedFrom
	  ) {
	    if (record && record.redirect) {
	      return redirect(record, redirectedFrom || location)
	    }
	    if (record && record.matchAs) {
	      return alias(record, location, record.matchAs)
	    }
	    return createRoute(record, location, redirectedFrom, router)
	  }

	  return {
	    match: match,
	    addRoutes: addRoutes
	  }
	}

	function matchRoute (
	  regex,
	  path,
	  params
	) {
	  var m = path.match(regex);

	  if (!m) {
	    return false
	  } else if (!params) {
	    return true
	  }

	  for (var i = 1, len = m.length; i < len; ++i) {
	    var key = regex.keys[i - 1];
	    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];
	    if (key) {
	      // Fix #1994: using * with props: true generates a param named 0
	      params[key.name || 'pathMatch'] = val;
	    }
	  }

	  return true
	}

	function resolveRecordPath (path, record) {
	  return resolvePath(path, record.parent ? record.parent.path : '/', true)
	}

	/*  */

	var positionStore = Object.create(null);

	function setupScroll () {
	  // Fix for #1585 for Firefox
	  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678
	  window.history.replaceState({ key: getStateKey() }, '', window.location.href.replace(window.location.origin, ''));
	  window.addEventListener('popstate', function (e) {
	    saveScrollPosition();
	    if (e.state && e.state.key) {
	      setStateKey(e.state.key);
	    }
	  });
	}

	function handleScroll (
	  router,
	  to,
	  from,
	  isPop
	) {
	  if (!router.app) {
	    return
	  }

	  var behavior = router.options.scrollBehavior;
	  if (!behavior) {
	    return
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    assert(typeof behavior === 'function', "scrollBehavior must be a function");
	  }

	  // wait until re-render finishes before scrolling
	  router.app.$nextTick(function () {
	    var position = getScrollPosition();
	    var shouldScroll = behavior.call(router, to, from, isPop ? position : null);

	    if (!shouldScroll) {
	      return
	    }

	    if (typeof shouldScroll.then === 'function') {
	      shouldScroll.then(function (shouldScroll) {
	        scrollToPosition((shouldScroll), position);
	      }).catch(function (err) {
	        if (process.env.NODE_ENV !== 'production') {
	          assert(false, err.toString());
	        }
	      });
	    } else {
	      scrollToPosition(shouldScroll, position);
	    }
	  });
	}

	function saveScrollPosition () {
	  var key = getStateKey();
	  if (key) {
	    positionStore[key] = {
	      x: window.pageXOffset,
	      y: window.pageYOffset
	    };
	  }
	}

	function getScrollPosition () {
	  var key = getStateKey();
	  if (key) {
	    return positionStore[key]
	  }
	}

	function getElementPosition (el, offset) {
	  var docEl = document.documentElement;
	  var docRect = docEl.getBoundingClientRect();
	  var elRect = el.getBoundingClientRect();
	  return {
	    x: elRect.left - docRect.left - offset.x,
	    y: elRect.top - docRect.top - offset.y
	  }
	}

	function isValidPosition (obj) {
	  return isNumber(obj.x) || isNumber(obj.y)
	}

	function normalizePosition (obj) {
	  return {
	    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
	    y: isNumber(obj.y) ? obj.y : window.pageYOffset
	  }
	}

	function normalizeOffset (obj) {
	  return {
	    x: isNumber(obj.x) ? obj.x : 0,
	    y: isNumber(obj.y) ? obj.y : 0
	  }
	}

	function isNumber (v) {
	  return typeof v === 'number'
	}

	function scrollToPosition (shouldScroll, position) {
	  var isObject = typeof shouldScroll === 'object';
	  if (isObject && typeof shouldScroll.selector === 'string') {
	    var el = document.querySelector(shouldScroll.selector);
	    if (el) {
	      var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};
	      offset = normalizeOffset(offset);
	      position = getElementPosition(el, offset);
	    } else if (isValidPosition(shouldScroll)) {
	      position = normalizePosition(shouldScroll);
	    }
	  } else if (isObject && isValidPosition(shouldScroll)) {
	    position = normalizePosition(shouldScroll);
	  }

	  if (position) {
	    window.scrollTo(position.x, position.y);
	  }
	}

	/*  */

	var supportsPushState = inBrowser && (function () {
	  var ua = window.navigator.userAgent;

	  if (
	    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&
	    ua.indexOf('Mobile Safari') !== -1 &&
	    ua.indexOf('Chrome') === -1 &&
	    ua.indexOf('Windows Phone') === -1
	  ) {
	    return false
	  }

	  return window.history && 'pushState' in window.history
	})();

	// use User Timing api (if present) for more accurate key precision
	var Time = inBrowser && window.performance && window.performance.now
	  ? window.performance
	  : Date;

	var _key = genKey();

	function genKey () {
	  return Time.now().toFixed(3)
	}

	function getStateKey () {
	  return _key
	}

	function setStateKey (key) {
	  _key = key;
	}

	function pushState (url, replace) {
	  saveScrollPosition();
	  // try...catch the pushState call to get around Safari
	  // DOM Exception 18 where it limits to 100 pushState calls
	  var history = window.history;
	  try {
	    if (replace) {
	      history.replaceState({ key: _key }, '', url);
	    } else {
	      _key = genKey();
	      history.pushState({ key: _key }, '', url);
	    }
	  } catch (e) {
	    window.location[replace ? 'replace' : 'assign'](url);
	  }
	}

	function replaceState (url) {
	  pushState(url, true);
	}

	/*  */

	function runQueue (queue, fn, cb) {
	  var step = function (index) {
	    if (index >= queue.length) {
	      cb();
	    } else {
	      if (queue[index]) {
	        fn(queue[index], function () {
	          step(index + 1);
	        });
	      } else {
	        step(index + 1);
	      }
	    }
	  };
	  step(0);
	}

	/*  */

	function resolveAsyncComponents (matched) {
	  return function (to, from, next) {
	    var hasAsync = false;
	    var pending = 0;
	    var error = null;

	    flatMapComponents(matched, function (def, _, match, key) {
	      // if it's a function and doesn't have cid attached,
	      // assume it's an async component resolve function.
	      // we are not using Vue's default async resolving mechanism because
	      // we want to halt the navigation until the incoming component has been
	      // resolved.
	      if (typeof def === 'function' && def.cid === undefined) {
	        hasAsync = true;
	        pending++;

	        var resolve = once(function (resolvedDef) {
	          if (isESModule(resolvedDef)) {
	            resolvedDef = resolvedDef.default;
	          }
	          // save resolved on async factory in case it's used elsewhere
	          def.resolved = typeof resolvedDef === 'function'
	            ? resolvedDef
	            : _Vue.extend(resolvedDef);
	          match.components[key] = resolvedDef;
	          pending--;
	          if (pending <= 0) {
	            next();
	          }
	        });

	        var reject = once(function (reason) {
	          var msg = "Failed to resolve async component " + key + ": " + reason;
	          process.env.NODE_ENV !== 'production' && warn(false, msg);
	          if (!error) {
	            error = isError(reason)
	              ? reason
	              : new Error(msg);
	            next(error);
	          }
	        });

	        var res;
	        try {
	          res = def(resolve, reject);
	        } catch (e) {
	          reject(e);
	        }
	        if (res) {
	          if (typeof res.then === 'function') {
	            res.then(resolve, reject);
	          } else {
	            // new syntax in Vue 2.3
	            var comp = res.component;
	            if (comp && typeof comp.then === 'function') {
	              comp.then(resolve, reject);
	            }
	          }
	        }
	      }
	    });

	    if (!hasAsync) { next(); }
	  }
	}

	function flatMapComponents (
	  matched,
	  fn
	) {
	  return flatten(matched.map(function (m) {
	    return Object.keys(m.components).map(function (key) { return fn(
	      m.components[key],
	      m.instances[key],
	      m, key
	    ); })
	  }))
	}

	function flatten (arr) {
	  return Array.prototype.concat.apply([], arr)
	}

	var hasSymbol =
	  typeof Symbol === 'function' &&
	  typeof Symbol.toStringTag === 'symbol';

	function isESModule (obj) {
	  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')
	}

	// in Webpack 2, require.ensure now also returns a Promise
	// so the resolve/reject functions may get called an extra time
	// if the user uses an arrow function shorthand that happens to
	// return that Promise.
	function once (fn) {
	  var called = false;
	  return function () {
	    var args = [], len = arguments.length;
	    while ( len-- ) args[ len ] = arguments[ len ];

	    if (called) { return }
	    called = true;
	    return fn.apply(this, args)
	  }
	}

	/*  */

	var History = function History (router, base) {
	  this.router = router;
	  this.base = normalizeBase(base);
	  // start with a route object that stands for "nowhere"
	  this.current = START;
	  this.pending = null;
	  this.ready = false;
	  this.readyCbs = [];
	  this.readyErrorCbs = [];
	  this.errorCbs = [];
	};

	History.prototype.listen = function listen (cb) {
	  this.cb = cb;
	};

	History.prototype.onReady = function onReady (cb, errorCb) {
	  if (this.ready) {
	    cb();
	  } else {
	    this.readyCbs.push(cb);
	    if (errorCb) {
	      this.readyErrorCbs.push(errorCb);
	    }
	  }
	};

	History.prototype.onError = function onError (errorCb) {
	  this.errorCbs.push(errorCb);
	};

	History.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {
	    var this$1 = this;

	  var route = this.router.match(location, this.current);
	  this.confirmTransition(route, function () {
	    this$1.updateRoute(route);
	    onComplete && onComplete(route);
	    this$1.ensureURL();

	    // fire ready cbs once
	    if (!this$1.ready) {
	      this$1.ready = true;
	      this$1.readyCbs.forEach(function (cb) { cb(route); });
	    }
	  }, function (err) {
	    if (onAbort) {
	      onAbort(err);
	    }
	    if (err && !this$1.ready) {
	      this$1.ready = true;
	      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });
	    }
	  });
	};

	History.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {
	    var this$1 = this;

	  var current = this.current;
	  var abort = function (err) {
	    if (isError(err)) {
	      if (this$1.errorCbs.length) {
	        this$1.errorCbs.forEach(function (cb) { cb(err); });
	      } else {
	        warn(false, 'uncaught error during route navigation:');
	        console.error(err);
	      }
	    }
	    onAbort && onAbort(err);
	  };
	  if (
	    isSameRoute(route, current) &&
	    // in the case the route map has been dynamically appended to
	    route.matched.length === current.matched.length
	  ) {
	    this.ensureURL();
	    return abort()
	  }

	  var ref = resolveQueue(this.current.matched, route.matched);
	    var updated = ref.updated;
	    var deactivated = ref.deactivated;
	    var activated = ref.activated;

	  var queue = [].concat(
	    // in-component leave guards
	    extractLeaveGuards(deactivated),
	    // global before hooks
	    this.router.beforeHooks,
	    // in-component update hooks
	    extractUpdateHooks(updated),
	    // in-config enter guards
	    activated.map(function (m) { return m.beforeEnter; }),
	    // async components
	    resolveAsyncComponents(activated)
	  );

	  this.pending = route;
	  var iterator = function (hook, next) {
	    if (this$1.pending !== route) {
	      return abort()
	    }
	    try {
	      hook(route, current, function (to) {
	        if (to === false || isError(to)) {
	          // next(false) -> abort navigation, ensure current URL
	          this$1.ensureURL(true);
	          abort(to);
	        } else if (
	          typeof to === 'string' ||
	          (typeof to === 'object' && (
	            typeof to.path === 'string' ||
	            typeof to.name === 'string'
	          ))
	        ) {
	          // next('/') or next({ path: '/' }) -> redirect
	          abort();
	          if (typeof to === 'object' && to.replace) {
	            this$1.replace(to);
	          } else {
	            this$1.push(to);
	          }
	        } else {
	          // confirm transition and pass on the value
	          next(to);
	        }
	      });
	    } catch (e) {
	      abort(e);
	    }
	  };

	  runQueue(queue, iterator, function () {
	    var postEnterCbs = [];
	    var isValid = function () { return this$1.current === route; };
	    // wait until async components are resolved before
	    // extracting in-component enter guards
	    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
	    var queue = enterGuards.concat(this$1.router.resolveHooks);
	    runQueue(queue, iterator, function () {
	      if (this$1.pending !== route) {
	        return abort()
	      }
	      this$1.pending = null;
	      onComplete(route);
	      if (this$1.router.app) {
	        this$1.router.app.$nextTick(function () {
	          postEnterCbs.forEach(function (cb) { cb(); });
	        });
	      }
	    });
	  });
	};

	History.prototype.updateRoute = function updateRoute (route) {
	  var prev = this.current;
	  this.current = route;
	  this.cb && this.cb(route);
	  this.router.afterHooks.forEach(function (hook) {
	    hook && hook(route, prev);
	  });
	};

	function normalizeBase (base) {
	  if (!base) {
	    if (inBrowser) {
	      // respect <base> tag
	      var baseEl = document.querySelector('base');
	      base = (baseEl && baseEl.getAttribute('href')) || '/';
	      // strip full URL origin
	      base = base.replace(/^https?:\/\/[^\/]+/, '');
	    } else {
	      base = '/';
	    }
	  }
	  // make sure there's the starting slash
	  if (base.charAt(0) !== '/') {
	    base = '/' + base;
	  }
	  // remove trailing slash
	  return base.replace(/\/$/, '')
	}

	function resolveQueue (
	  current,
	  next
	) {
	  var i;
	  var max = Math.max(current.length, next.length);
	  for (i = 0; i < max; i++) {
	    if (current[i] !== next[i]) {
	      break
	    }
	  }
	  return {
	    updated: next.slice(0, i),
	    activated: next.slice(i),
	    deactivated: current.slice(i)
	  }
	}

	function extractGuards (
	  records,
	  name,
	  bind,
	  reverse
	) {
	  var guards = flatMapComponents(records, function (def, instance, match, key) {
	    var guard = extractGuard(def, name);
	    if (guard) {
	      return Array.isArray(guard)
	        ? guard.map(function (guard) { return bind(guard, instance, match, key); })
	        : bind(guard, instance, match, key)
	    }
	  });
	  return flatten(reverse ? guards.reverse() : guards)
	}

	function extractGuard (
	  def,
	  key
	) {
	  if (typeof def !== 'function') {
	    // extend now so that global mixins are applied.
	    def = _Vue.extend(def);
	  }
	  return def.options[key]
	}

	function extractLeaveGuards (deactivated) {
	  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)
	}

	function extractUpdateHooks (updated) {
	  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)
	}

	function bindGuard (guard, instance) {
	  if (instance) {
	    return function boundRouteGuard () {
	      return guard.apply(instance, arguments)
	    }
	  }
	}

	function extractEnterGuards (
	  activated,
	  cbs,
	  isValid
	) {
	  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
	    return bindEnterGuard(guard, match, key, cbs, isValid)
	  })
	}

	function bindEnterGuard (
	  guard,
	  match,
	  key,
	  cbs,
	  isValid
	) {
	  return function routeEnterGuard (to, from, next) {
	    return guard(to, from, function (cb) {
	      next(cb);
	      if (typeof cb === 'function') {
	        cbs.push(function () {
	          // #750
	          // if a router-view is wrapped with an out-in transition,
	          // the instance may not have been registered at this time.
	          // we will need to poll for registration until current route
	          // is no longer valid.
	          poll(cb, match.instances, key, isValid);
	        });
	      }
	    })
	  }
	}

	function poll (
	  cb, // somehow flow cannot infer this is a function
	  instances,
	  key,
	  isValid
	) {
	  if (
	    instances[key] &&
	    !instances[key]._isBeingDestroyed // do not reuse being destroyed instance
	  ) {
	    cb(instances[key]);
	  } else if (isValid()) {
	    setTimeout(function () {
	      poll(cb, instances, key, isValid);
	    }, 16);
	  }
	}

	/*  */

	var HTML5History = (function (History$$1) {
	  function HTML5History (router, base) {
	    var this$1 = this;

	    History$$1.call(this, router, base);

	    var expectScroll = router.options.scrollBehavior;
	    var supportsScroll = supportsPushState && expectScroll;

	    if (supportsScroll) {
	      setupScroll();
	    }

	    var initLocation = getLocation(this.base);
	    window.addEventListener('popstate', function (e) {
	      var current = this$1.current;

	      // Avoiding first `popstate` event dispatched in some browsers but first
	      // history route not updated since async guard at the same time.
	      var location = getLocation(this$1.base);
	      if (this$1.current === START && location === initLocation) {
	        return
	      }

	      this$1.transitionTo(location, function (route) {
	        if (supportsScroll) {
	          handleScroll(router, route, current, true);
	        }
	      });
	    });
	  }

	  if ( History$$1 ) HTML5History.__proto__ = History$$1;
	  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );
	  HTML5History.prototype.constructor = HTML5History;

	  HTML5History.prototype.go = function go (n) {
	    window.history.go(n);
	  };

	  HTML5History.prototype.push = function push (location, onComplete, onAbort) {
	    var this$1 = this;

	    var ref = this;
	    var fromRoute = ref.current;
	    this.transitionTo(location, function (route) {
	      pushState(cleanPath(this$1.base + route.fullPath));
	      handleScroll(this$1.router, route, fromRoute, false);
	      onComplete && onComplete(route);
	    }, onAbort);
	  };

	  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {
	    var this$1 = this;

	    var ref = this;
	    var fromRoute = ref.current;
	    this.transitionTo(location, function (route) {
	      replaceState(cleanPath(this$1.base + route.fullPath));
	      handleScroll(this$1.router, route, fromRoute, false);
	      onComplete && onComplete(route);
	    }, onAbort);
	  };

	  HTML5History.prototype.ensureURL = function ensureURL (push) {
	    if (getLocation(this.base) !== this.current.fullPath) {
	      var current = cleanPath(this.base + this.current.fullPath);
	      push ? pushState(current) : replaceState(current);
	    }
	  };

	  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {
	    return getLocation(this.base)
	  };

	  return HTML5History;
	}(History));

	function getLocation (base) {
	  var path = decodeURI(window.location.pathname);
	  if (base && path.indexOf(base) === 0) {
	    path = path.slice(base.length);
	  }
	  return (path || '/') + window.location.search + window.location.hash
	}

	/*  */

	var HashHistory = (function (History$$1) {
	  function HashHistory (router, base, fallback) {
	    History$$1.call(this, router, base);
	    // check history fallback deeplinking
	    if (fallback && checkFallback(this.base)) {
	      return
	    }
	    ensureSlash();
	  }

	  if ( History$$1 ) HashHistory.__proto__ = History$$1;
	  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );
	  HashHistory.prototype.constructor = HashHistory;

	  // this is delayed until the app mounts
	  // to avoid the hashchange listener being fired too early
	  HashHistory.prototype.setupListeners = function setupListeners () {
	    var this$1 = this;

	    var router = this.router;
	    var expectScroll = router.options.scrollBehavior;
	    var supportsScroll = supportsPushState && expectScroll;

	    if (supportsScroll) {
	      setupScroll();
	    }

	    window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', function () {
	      var current = this$1.current;
	      if (!ensureSlash()) {
	        return
	      }
	      this$1.transitionTo(getHash(), function (route) {
	        if (supportsScroll) {
	          handleScroll(this$1.router, route, current, true);
	        }
	        if (!supportsPushState) {
	          replaceHash(route.fullPath);
	        }
	      });
	    });
	  };

	  HashHistory.prototype.push = function push (location, onComplete, onAbort) {
	    var this$1 = this;

	    var ref = this;
	    var fromRoute = ref.current;
	    this.transitionTo(location, function (route) {
	      pushHash(route.fullPath);
	      handleScroll(this$1.router, route, fromRoute, false);
	      onComplete && onComplete(route);
	    }, onAbort);
	  };

	  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {
	    var this$1 = this;

	    var ref = this;
	    var fromRoute = ref.current;
	    this.transitionTo(location, function (route) {
	      replaceHash(route.fullPath);
	      handleScroll(this$1.router, route, fromRoute, false);
	      onComplete && onComplete(route);
	    }, onAbort);
	  };

	  HashHistory.prototype.go = function go (n) {
	    window.history.go(n);
	  };

	  HashHistory.prototype.ensureURL = function ensureURL (push) {
	    var current = this.current.fullPath;
	    if (getHash() !== current) {
	      push ? pushHash(current) : replaceHash(current);
	    }
	  };

	  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {
	    return getHash()
	  };

	  return HashHistory;
	}(History));

	function checkFallback (base) {
	  var location = getLocation(base);
	  if (!/^\/#/.test(location)) {
	    window.location.replace(
	      cleanPath(base + '/#' + location)
	    );
	    return true
	  }
	}

	function ensureSlash () {
	  var path = getHash();
	  if (path.charAt(0) === '/') {
	    return true
	  }
	  replaceHash('/' + path);
	  return false
	}

	function getHash () {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var index = href.indexOf('#');
	  return index === -1 ? '' : decodeURI(href.slice(index + 1))
	}

	function getUrl (path) {
	  var href = window.location.href;
	  var i = href.indexOf('#');
	  var base = i >= 0 ? href.slice(0, i) : href;
	  return (base + "#" + path)
	}

	function pushHash (path) {
	  if (supportsPushState) {
	    pushState(getUrl(path));
	  } else {
	    window.location.hash = path;
	  }
	}

	function replaceHash (path) {
	  if (supportsPushState) {
	    replaceState(getUrl(path));
	  } else {
	    window.location.replace(getUrl(path));
	  }
	}

	/*  */

	var AbstractHistory = (function (History$$1) {
	  function AbstractHistory (router, base) {
	    History$$1.call(this, router, base);
	    this.stack = [];
	    this.index = -1;
	  }

	  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;
	  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );
	  AbstractHistory.prototype.constructor = AbstractHistory;

	  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {
	    var this$1 = this;

	    this.transitionTo(location, function (route) {
	      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
	      this$1.index++;
	      onComplete && onComplete(route);
	    }, onAbort);
	  };

	  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {
	    var this$1 = this;

	    this.transitionTo(location, function (route) {
	      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
	      onComplete && onComplete(route);
	    }, onAbort);
	  };

	  AbstractHistory.prototype.go = function go (n) {
	    var this$1 = this;

	    var targetIndex = this.index + n;
	    if (targetIndex < 0 || targetIndex >= this.stack.length) {
	      return
	    }
	    var route = this.stack[targetIndex];
	    this.confirmTransition(route, function () {
	      this$1.index = targetIndex;
	      this$1.updateRoute(route);
	    });
	  };

	  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {
	    var current = this.stack[this.stack.length - 1];
	    return current ? current.fullPath : '/'
	  };

	  AbstractHistory.prototype.ensureURL = function ensureURL () {
	    // noop
	  };

	  return AbstractHistory;
	}(History));

	/*  */



	var VueRouter = function VueRouter (options) {
	  if ( options === void 0 ) options = {};

	  this.app = null;
	  this.apps = [];
	  this.options = options;
	  this.beforeHooks = [];
	  this.resolveHooks = [];
	  this.afterHooks = [];
	  this.matcher = createMatcher(options.routes || [], this);

	  var mode = options.mode || 'hash';
	  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;
	  if (this.fallback) {
	    mode = 'hash';
	  }
	  if (!inBrowser) {
	    mode = 'abstract';
	  }
	  this.mode = mode;

	  switch (mode) {
	    case 'history':
	      this.history = new HTML5History(this, options.base);
	      break
	    case 'hash':
	      this.history = new HashHistory(this, options.base, this.fallback);
	      break
	    case 'abstract':
	      this.history = new AbstractHistory(this, options.base);
	      break
	    default:
	      if (process.env.NODE_ENV !== 'production') {
	        assert(false, ("invalid mode: " + mode));
	      }
	  }
	};

	var prototypeAccessors = { currentRoute: { configurable: true } };

	VueRouter.prototype.match = function match (
	  raw,
	  current,
	  redirectedFrom
	) {
	  return this.matcher.match(raw, current, redirectedFrom)
	};

	prototypeAccessors.currentRoute.get = function () {
	  return this.history && this.history.current
	};

	VueRouter.prototype.init = function init (app /* Vue component instance */) {
	    var this$1 = this;

	  process.env.NODE_ENV !== 'production' && assert(
	    install.installed,
	    "not installed. Make sure to call `Vue.use(VueRouter)` " +
	    "before creating root instance."
	  );

	  this.apps.push(app);

	  // main app already initialized.
	  if (this.app) {
	    return
	  }

	  this.app = app;

	  var history = this.history;

	  if (history instanceof HTML5History) {
	    history.transitionTo(history.getCurrentLocation());
	  } else if (history instanceof HashHistory) {
	    var setupHashListener = function () {
	      history.setupListeners();
	    };
	    history.transitionTo(
	      history.getCurrentLocation(),
	      setupHashListener,
	      setupHashListener
	    );
	  }

	  history.listen(function (route) {
	    this$1.apps.forEach(function (app) {
	      app._route = route;
	    });
	  });
	};

	VueRouter.prototype.beforeEach = function beforeEach (fn) {
	  return registerHook(this.beforeHooks, fn)
	};

	VueRouter.prototype.beforeResolve = function beforeResolve (fn) {
	  return registerHook(this.resolveHooks, fn)
	};

	VueRouter.prototype.afterEach = function afterEach (fn) {
	  return registerHook(this.afterHooks, fn)
	};

	VueRouter.prototype.onReady = function onReady (cb, errorCb) {
	  this.history.onReady(cb, errorCb);
	};

	VueRouter.prototype.onError = function onError (errorCb) {
	  this.history.onError(errorCb);
	};

	VueRouter.prototype.push = function push (location, onComplete, onAbort) {
	  this.history.push(location, onComplete, onAbort);
	};

	VueRouter.prototype.replace = function replace (location, onComplete, onAbort) {
	  this.history.replace(location, onComplete, onAbort);
	};

	VueRouter.prototype.go = function go (n) {
	  this.history.go(n);
	};

	VueRouter.prototype.back = function back () {
	  this.go(-1);
	};

	VueRouter.prototype.forward = function forward () {
	  this.go(1);
	};

	VueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {
	  var route = to
	    ? to.matched
	      ? to
	      : this.resolve(to).route
	    : this.currentRoute;
	  if (!route) {
	    return []
	  }
	  return [].concat.apply([], route.matched.map(function (m) {
	    return Object.keys(m.components).map(function (key) {
	      return m.components[key]
	    })
	  }))
	};

	VueRouter.prototype.resolve = function resolve (
	  to,
	  current,
	  append
	) {
	  var location = normalizeLocation(
	    to,
	    current || this.history.current,
	    append,
	    this
	  );
	  var route = this.match(location, current);
	  var fullPath = route.redirectedFrom || route.fullPath;
	  var base = this.history.base;
	  var href = createHref(base, fullPath, this.mode);
	  return {
	    location: location,
	    route: route,
	    href: href,
	    // for backwards compat
	    normalizedTo: location,
	    resolved: route
	  }
	};

	VueRouter.prototype.addRoutes = function addRoutes (routes) {
	  this.matcher.addRoutes(routes);
	  if (this.history.current !== START) {
	    this.history.transitionTo(this.history.getCurrentLocation());
	  }
	};

	Object.defineProperties( VueRouter.prototype, prototypeAccessors );

	function registerHook (list, fn) {
	  list.push(fn);
	  return function () {
	    var i = list.indexOf(fn);
	    if (i > -1) { list.splice(i, 1); }
	  }
	}

	function createHref (base, fullPath, mode) {
	  var path = mode === 'hash' ? '#' + fullPath : fullPath;
	  return base ? cleanPath(base + '/' + path) : path
	}

	VueRouter.install = install;
	VueRouter.version = '3.0.2';

	if (inBrowser && window.Vue) {
	  window.Vue.use(VueRouter);
	}

	module.exports = VueRouter;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _promise = __webpack_require__(6);

	var _promise2 = _interopRequireDefault(_promise);

	var _axios = __webpack_require__(77);

	var _axios2 = _interopRequireDefault(_axios);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var axios = _axios2.default.create();

	axios.interceptors.request.use(function (config) {
	    config.headers['Content-Type'] = 'application/json';

	    var token = localStorage.getItem('token');

	    if (token) {
	        config.headers['Authorization'] = 'Bearer ' + token;
	    }

	    // TODO: loook on
	    // 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')

	    window.App.$store.dispatch('loading', true);
	    window.App.$store.dispatch('failing', []);

	    return config;
	}, function (error) {
	    window.App.$store.dispatch('loading', false);
	    window.App.$store.dispatch('failing', error.response.data);

	    return _promise2.default.reject(error);
	});

	axios.interceptors.response.use(function (response) {
	    window.App.$store.dispatch('loading', false);
	    window.App.$store.dispatch('failing', []);

	    return response;
	}, function (error) {
	    if (401 === error.response.status) {
	        window.App.$auth.logout({
	            redirect: { name: 'login' }
	        });
	    }

	    window.App.$store.dispatch('loading', false);
	    window.App.$store.dispatch('failing', error.response.data);

	    return _promise2.default.reject(error);
	});

	exports.default = axios;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(7), __esModule: true };

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(8);
	__webpack_require__(9);
	__webpack_require__(53);
	__webpack_require__(57);
	__webpack_require__(75);
	__webpack_require__(76);
	module.exports = __webpack_require__(17).Promise;


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(10)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(13)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(11);
	var defined = __webpack_require__(12);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ }),
/* 11 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ }),
/* 12 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(14);
	var $export = __webpack_require__(15);
	var redefine = __webpack_require__(31);
	var hide = __webpack_require__(20);
	var Iterators = __webpack_require__(32);
	var $iterCreate = __webpack_require__(33);
	var setToStringTag = __webpack_require__(49);
	var getPrototypeOf = __webpack_require__(51);
	var ITERATOR = __webpack_require__(50)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	module.exports = true;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(16);
	var core = __webpack_require__(17);
	var ctx = __webpack_require__(18);
	var hide = __webpack_require__(20);
	var has = __webpack_require__(30);
	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && has(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 17 */
/***/ (function(module, exports) {

	var core = module.exports = { version: '2.6.5' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(19);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ }),
/* 19 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(21);
	var createDesc = __webpack_require__(29);
	module.exports = __webpack_require__(25) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(22);
	var IE8_DOM_DEFINE = __webpack_require__(24);
	var toPrimitive = __webpack_require__(28);
	var dP = Object.defineProperty;

	exports.f = __webpack_require__(25) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(23);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ }),
/* 23 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(25) && !__webpack_require__(26)(function () {
	  return Object.defineProperty(__webpack_require__(27)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(26)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 26 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(23);
	var document = __webpack_require__(16).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(23);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ }),
/* 29 */
/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(20);


/***/ }),
/* 32 */
/***/ (function(module, exports) {

	module.exports = {};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(34);
	var descriptor = __webpack_require__(29);
	var setToStringTag = __webpack_require__(49);
	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(20)(IteratorPrototype, __webpack_require__(50)('iterator'), function () { return this; });

	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(22);
	var dPs = __webpack_require__(35);
	var enumBugKeys = __webpack_require__(47);
	var IE_PROTO = __webpack_require__(44)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(27)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(48).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};

	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(21);
	var anObject = __webpack_require__(22);
	var getKeys = __webpack_require__(36);

	module.exports = __webpack_require__(25) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(37);
	var enumBugKeys = __webpack_require__(47);

	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(30);
	var toIObject = __webpack_require__(38);
	var arrayIndexOf = __webpack_require__(41)(false);
	var IE_PROTO = __webpack_require__(44)('IE_PROTO');

	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(39);
	var defined = __webpack_require__(12);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(40);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ }),
/* 40 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(38);
	var toLength = __webpack_require__(42);
	var toAbsoluteIndex = __webpack_require__(43);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(11);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(11);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(45)('keys');
	var uid = __webpack_require__(46);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(17);
	var global = __webpack_require__(16);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});

	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: core.version,
	  mode: __webpack_require__(14) ? 'pure' : 'global',
	  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
	});


/***/ }),
/* 46 */
/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ }),
/* 47 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(16).document;
	module.exports = document && document.documentElement;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(21).f;
	var has = __webpack_require__(30);
	var TAG = __webpack_require__(50)('toStringTag');

	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	var store = __webpack_require__(45)('wks');
	var uid = __webpack_require__(46);
	var Symbol = __webpack_require__(16).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

	$exports.store = store;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(30);
	var toObject = __webpack_require__(52);
	var IE_PROTO = __webpack_require__(44)('IE_PROTO');
	var ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(12);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(54);
	var global = __webpack_require__(16);
	var hide = __webpack_require__(20);
	var Iterators = __webpack_require__(32);
	var TO_STRING_TAG = __webpack_require__(50)('toStringTag');

	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');

	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(55);
	var step = __webpack_require__(56);
	var Iterators = __webpack_require__(32);
	var toIObject = __webpack_require__(38);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(13)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ }),
/* 55 */
/***/ (function(module, exports) {

	module.exports = function () { /* empty */ };


/***/ }),
/* 56 */
/***/ (function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(14);
	var global = __webpack_require__(16);
	var ctx = __webpack_require__(18);
	var classof = __webpack_require__(58);
	var $export = __webpack_require__(15);
	var isObject = __webpack_require__(23);
	var aFunction = __webpack_require__(19);
	var anInstance = __webpack_require__(59);
	var forOf = __webpack_require__(60);
	var speciesConstructor = __webpack_require__(64);
	var task = __webpack_require__(65).set;
	var microtask = __webpack_require__(67)();
	var newPromiseCapabilityModule = __webpack_require__(68);
	var perform = __webpack_require__(69);
	var userAgent = __webpack_require__(70);
	var promiseResolve = __webpack_require__(71);
	var PROMISE = 'Promise';
	var TypeError = global.TypeError;
	var process = global.process;
	var versions = process && process.versions;
	var v8 = versions && versions.v8 || '';
	var $Promise = global[PROMISE];
	var isNode = classof(process) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

	var USE_NATIVE = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[__webpack_require__(50)('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function')
	      && promise.then(empty) instanceof FakePromise
	      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	      // we can't detect it synchronously, so just check versions
	      && v8.indexOf('6.6') !== 0
	      && userAgent.indexOf('Chrome/66') === -1;
	  } catch (e) { /* empty */ }
	}();

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = perform(function () {
	        if (isNode) {
	          process.emit('unhandledRejection', value, promise);
	        } else if (handler = global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(global, function () {
	    var handler;
	    if (isNode) {
	      process.emit('rejectionHandled', promise);
	    } else if (handler = global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};

	// constructor polyfill
	if (!USE_NATIVE) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(72)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject = ctx($reject, promise, 1);
	  };
	  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
	    return C === $Promise || C === Wrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
	__webpack_require__(49)($Promise, PROMISE);
	__webpack_require__(73)(PROMISE);
	Wrapper = __webpack_require__(17)[PROMISE];

	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(74)(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(40);
	var TAG = __webpack_require__(50)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ }),
/* 59 */
/***/ (function(module, exports) {

	module.exports = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(18);
	var call = __webpack_require__(61);
	var isArrayIter = __webpack_require__(62);
	var anObject = __webpack_require__(22);
	var toLength = __webpack_require__(42);
	var getIterFn = __webpack_require__(63);
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
	  var f = ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = call(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(22);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators = __webpack_require__(32);
	var ITERATOR = __webpack_require__(50)('iterator');
	var ArrayProto = Array.prototype;

	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(58);
	var ITERATOR = __webpack_require__(50)('iterator');
	var Iterators = __webpack_require__(32);
	module.exports = __webpack_require__(17).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject = __webpack_require__(22);
	var aFunction = __webpack_require__(19);
	var SPECIES = __webpack_require__(50)('species');
	module.exports = function (O, D) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(18);
	var invoke = __webpack_require__(66);
	var html = __webpack_require__(48);
	var cel = __webpack_require__(27);
	var global = __webpack_require__(16);
	var process = global.process;
	var setTask = global.setImmediate;
	var clearTask = global.clearImmediate;
	var MessageChannel = global.MessageChannel;
	var Dispatch = global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (__webpack_require__(40)(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
	    defer = function (id) {
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in cel('script')) {
	    defer = function (id) {
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set: setTask,
	  clear: clearTask
	};


/***/ }),
/* 66 */
/***/ (function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(16);
	var macrotask = __webpack_require__(65).set;
	var Observer = global.MutationObserver || global.WebKitMutationObserver;
	var process = global.process;
	var Promise = global.Promise;
	var isNode = __webpack_require__(40)(process) == 'process';

	module.exports = function () {
	  var head, last, notify;

	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    var promise = Promise.resolve(undefined);
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }

	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 25.4.1.5 NewPromiseCapability(C)
	var aFunction = __webpack_require__(19);

	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	}

	module.exports.f = function (C) {
	  return new PromiseCapability(C);
	};


/***/ }),
/* 69 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(16);
	var navigator = global.navigator;

	module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(22);
	var isObject = __webpack_require__(23);
	var newPromiseCapability = __webpack_require__(68);

	module.exports = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(20);
	module.exports = function (target, src, safe) {
	  for (var key in src) {
	    if (safe && target[key]) target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(16);
	var core = __webpack_require__(17);
	var dP = __webpack_require__(21);
	var DESCRIPTORS = __webpack_require__(25);
	var SPECIES = __webpack_require__(50)('species');

	module.exports = function (KEY) {
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	var ITERATOR = __webpack_require__(50)('iterator');
	var SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }

	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-promise-finally
	'use strict';
	var $export = __webpack_require__(15);
	var core = __webpack_require__(17);
	var global = __webpack_require__(16);
	var speciesConstructor = __webpack_require__(64);
	var promiseResolve = __webpack_require__(71);

	$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
	  var C = speciesConstructor(this, core.Promise || global.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-promise-try
	var $export = __webpack_require__(15);
	var newPromiseCapability = __webpack_require__(68);
	var perform = __webpack_require__(69);

	$export($export.S, 'Promise', { 'try': function (callbackfn) {
	  var promiseCapability = newPromiseCapability.f(this);
	  var result = perform(callbackfn);
	  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
	  return promiseCapability.promise;
	} });


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(78);

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(79);
	var bind = __webpack_require__(80);
	var Axios = __webpack_require__(82);
	var defaults = __webpack_require__(83);

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);

	  // Copy context to instance
	  utils.extend(instance, context);

	  return instance;
	}

	// Create the default instance to be exported
	var axios = createInstance(defaults);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;

	// Factory for creating new instances
	axios.create = function create(instanceConfig) {
	  return createInstance(utils.merge(defaults, instanceConfig));
	};

	// Expose Cancel & CancelToken
	axios.Cancel = __webpack_require__(100);
	axios.CancelToken = __webpack_require__(101);
	axios.isCancel = __webpack_require__(97);

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(102);

	module.exports = axios;

	// Allow use of default import syntax in TypeScript
	module.exports.default = axios;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(80);
	var isBuffer = __webpack_require__(81);

	/*global toString:true*/

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 */
	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
	    return false;
	  }
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim
	};


/***/ }),
/* 80 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ }),
/* 81 */
/***/ (function(module, exports) {

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */

	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	module.exports = function (obj) {
	  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
	}

	function isBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
	}


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var defaults = __webpack_require__(83);
	var utils = __webpack_require__(79);
	var InterceptorManager = __webpack_require__(94);
	var dispatchRequest = __webpack_require__(95);

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }

	  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);
	  config.method = config.method.toLowerCase();

	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);

	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }

	  return promise;
	};

	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});

	module.exports = Axios;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(79);
	var normalizeHeaderName = __webpack_require__(84);

	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = __webpack_require__(85);
	  } else if (typeof process !== 'undefined') {
	    // For node use HTTP adapter
	    adapter = __webpack_require__(85);
	  }
	  return adapter;
	}

	var defaults = {
	  adapter: getDefaultAdapter(),

	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],

	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};

	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};

	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults.headers[method] = {};
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});

	module.exports = defaults;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(79);

	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(79);
	var settle = __webpack_require__(86);
	var buildURL = __webpack_require__(89);
	var parseHeaders = __webpack_require__(90);
	var isURLSameOrigin = __webpack_require__(91);
	var createError = __webpack_require__(87);
	var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(92);

	module.exports = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;

	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest();
	    var loadEvent = 'onreadystatechange';
	    var xDomain = false;

	    // For IE 8/9 CORS support
	    // Only supports POST and GET calls and doesn't returns the response headers.
	    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
	    if (process.env.NODE_ENV !== 'test' &&
	        typeof window !== 'undefined' &&
	        window.XDomainRequest && !('withCredentials' in request) &&
	        !isURLSameOrigin(config.url)) {
	      request = new window.XDomainRequest();
	      loadEvent = 'onload';
	      xDomain = true;
	      request.onprogress = function handleProgress() {};
	      request.ontimeout = function handleTimeout() {};
	    }

	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;

	    // Listen for ready state
	    request[loadEvent] = function handleLoad() {
	      if (!request || (request.readyState !== 4 && !xDomain)) {
	        return;
	      }

	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request
	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      }

	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
	        status: request.status === 1223 ? 204 : request.status,
	        statusText: request.status === 1223 ? 'No Content' : request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };

	      settle(resolve, reject, response);

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
	        request));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies = __webpack_require__(93);

	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
	          cookies.read(config.xsrfCookieName) :
	          undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }

	    // Add withCredentials to request if needed
	    if (config.withCredentials) {
	      request.withCredentials = true;
	    }

	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
	        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
	        if (config.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }

	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }

	    if (requestData === undefined) {
	      requestData = null;
	    }

	    // Send the request
	    request.send(requestData);
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var createError = __webpack_require__(87);

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response.request,
	      response
	    ));
	  }
	};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var enhanceError = __webpack_require__(88);

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	module.exports = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, request, response);
	};


/***/ }),
/* 88 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	module.exports = function enhanceError(error, config, code, request, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	  error.request = request;
	  error.response = response;
	  return error;
	};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(79);

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils.isArray(val)) {
	        key = key + '[]';
	      } else {
	        val = [val];
	      }

	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(79);

	// Headers whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	var ignoreDuplicateOf = [
	  'age', 'authorization', 'content-length', 'content-type', 'etag',
	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
	  'referer', 'retry-after', 'user-agent'
	];

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
	        return;
	      }
	      if (key === 'set-cookie') {
	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
	      } else {
	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	      }
	    }
	  });

	  return parsed;
	};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(79);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;

	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ }),
/* 92 */
/***/ (function(module, exports) {

	'use strict';

	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error;
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';

	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}

	module.exports = btoa;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(79);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));

	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }

	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }

	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }

	        if (secure === true) {
	          cookie.push('secure');
	        }

	        document.cookie = cookie.join('; ');
	      },

	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },

	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(79);

	function InterceptorManager() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	module.exports = InterceptorManager;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(79);
	var transformData = __webpack_require__(96);
	var isCancel = __webpack_require__(97);
	var defaults = __webpack_require__(83);
	var isAbsoluteURL = __webpack_require__(98);
	var combineURLs = __webpack_require__(99);

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }

	  // Ensure headers exist
	  config.headers = config.headers || {};

	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );

	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  var adapter = config.adapter || defaults.adapter;

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData(
	      response.data,
	      response.headers,
	      config.transformResponse
	    );

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData(
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }

	    return Promise.reject(reason);
	  });
	};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(79);

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });

	  return data;
	};


/***/ }),
/* 97 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};


/***/ }),
/* 98 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ }),
/* 99 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	};


/***/ }),
/* 100 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel(message) {
	  this.message = message;
	}

	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel.prototype.__CANCEL__ = true;

	module.exports = Cancel;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var Cancel = __webpack_require__(100);

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });

	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};

	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	module.exports = CancelToken;


/***/ }),
/* 102 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o};!function(){function o(e,t){if(!o.installed){if(o.installed=!0,!t)return void console.error("You have to install axios");e.axios=t,Object.defineProperties(e.prototype,{axios:{get:function(){return t}},$http:{get:function(){return t}}})}}"object"==( false?"undefined":_typeof(exports))?module.exports=o: true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){return o}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):window.Vue&&window.axios&&Vue.use(o,window.axios)}();

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	var Auth = __webpack_require__(105)();

	module.exports = (function () {

	    return function install(Vue, options) {
	        
	        var auth = new Auth(Vue, options);

	        var ready = auth.ready;
	        var login = auth.login;
	        var fetch = auth.fetch;
	        var logout = auth.logout;
	        var oauth2 = auth.oauth2;
	        var refresh = auth.refresh;
	        var register = auth.register;
	        var impersonate = auth.impersonate;
	        var unimpersonate = auth.unimpersonate;

	        Vue.auth = auth;

	        Object.defineProperties(Vue.prototype, {
	            $auth: {
	                get: function () {
	                    auth.ready = ready.bind(this);
	                    auth.login = login.bind(this);
	                    auth.fetch = fetch.bind(this);
	                    auth.logout = logout.bind(this);
	                    auth.oauth2 = oauth2.bind(this);
	                    auth.refresh = refresh.bind(this);
	                    auth.register = register.bind(this);
	                    auth.impersonate = impersonate.bind(this);
	                    auth.unimpersonate = unimpersonate.bind(this);

	                    return auth;
	                }
	            }
	        });
	    }
	})();

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	var __utils  = __webpack_require__(106),
	    __token  = __webpack_require__(107),
	    __cookie = __webpack_require__(108)

	module.exports = function () {

	    // Private (used double underscore __).

	    var __transitionPrev = null,
	        __transitionThis = null,
	        __transitionRedirectType = null;

	    function __duckPunch(methodName, data) {
	        var _this = this,
	            success = data.success;

	        data = __utils.extend(this.options[methodName + 'Data'], [data]);

	        data.success = function (res) {
	            data.success = success;

	            _this.options[methodName + 'Process'].call(_this, res, data);
	        };

	        return this.options.http._http.call(this, data);
	    }

	    function __bindContext(methodName, data) {
	        var _auth = this.$auth;

	        return _auth.options[methodName + 'Perform'].call(_auth, _auth.options.router._bindData.call(_auth, data, this));
	    }

	    // Overrideable

	    function _checkAuthenticated(cb) {
	        if (this.watch.authenticated === null && __token.get.call(this)) {
	            if ( ! __cookie.exists.call(this)) {
	                this.options.logoutProcess.call(this, null, {});

	                this.watch.loaded = true;

	                return cb.call(this);
	            }

	            this.watch.authenticated = false;

	            if (this.options.fetchData.enabled) {
	                this.options.fetchPerform.call(this, {
	                    success: cb,
	                    error: cb,
	                    enabled: true
	                });
	            }
	            else {
	                this.options.fetchProcess.call(this, {}, {});
	                return cb.call(this);
	            }
	        } else {
	            this.watch.loaded = true;
	            return cb.call(this);
	        }
	    }

	    function _routerBeforeEach(cb) {
	        var _this = this;

	        if (this.watch.authenticated && !__token.get.call(this)) {
	            this.options.logoutProcess.call(this, null, {});
	        }

	        if (this.options.refreshData.enabled && ! this.watch.loaded && __token.get.call(this)) {
	            this.options.refreshPerform.call(this, {
	                success: function () {
	                    this.options.checkAuthenticated.call(_this, cb);
	                }
	            });

	            return;
	        }

	        _checkAuthenticated.call(this, cb);
	    }

	    function _transitionEach(transition, routeAuth, cb) {
	        var authRedirect = (routeAuth || '').redirect || this.options.authRedirect,
	            forbiddenRedirect = (routeAuth || '').forbiddenRedirect || (routeAuth || '').redirect || this.options.forbiddenRedirect,
	            notFoundRedirect = (routeAuth || '').redirect || this.options.notFoundRedirect;

	        routeAuth = __utils.toArray((routeAuth || '').roles !== undefined ? routeAuth.roles : routeAuth);

	        if (routeAuth && (routeAuth === true || routeAuth.constructor === Array || __utils.isObject(routeAuth))) {
	            if ( ! this.check()) {
	                __transitionRedirectType = 401;
	                cb.call(this, authRedirect);
	            }
	            else if ((routeAuth.constructor === Array || __utils.isObject(routeAuth)) && ! __utils.compare(routeAuth, this.watch.data[this.options.rolesVar])) {
	                __transitionRedirectType = 403;
	                cb.call(this, forbiddenRedirect);
	            }
	            else {
	                this.watch.redirect = __transitionRedirectType ? {type: __transitionRedirectType, from: __transitionPrev, to: __transitionThis} : null;
	                __transitionRedirectType = null;

	                return cb();
	            }
	        }
	        else if (routeAuth === false && this.check()) {
	            __transitionRedirectType = 404;
	            cb.call(this, notFoundRedirect);
	        }
	        else {
	            this.watch.redirect = __transitionRedirectType ? {type: __transitionRedirectType, from: __transitionPrev, to: __transitionThis} : null;
	            __transitionRedirectType = null;

	            return cb();
	        }
	    }

	    function _requestIntercept(req) {
	        var token,
	            tokenName;

	        if (req.ignoreVueAuth) {
	            return req;
	        }

	        if (req.impersonating === false && this.impersonating()) {
	            tokenName = this.options.tokenDefaultName;
	        }
	        
	        token = __token.get.call(this, tokenName);

	        if (token) {
	            this.options.auth.request.call(this, req, token);
	        }

	        return req;
	    }

	    function _responseIntercept(res, req) {
	        var token;

	        if (req && req.ignoreVueAuth) {
	            return;
	        }

	        _processInvalidToken.call(this, res, __transitionThis);

	        token = this.options.auth.response.call(this, res);

	        if (token) {
	            __token.set.call(this, null, token);
	        }
	    }

	    function _parseUserData(data) {
	        return data.data || {};
	    }

	    function _parseOauthState(data) {
	        return JSON.parse(decodeURIComponent(data));
	    }

	    function _check(role, key) {
	        if (this.watch.authenticated === true) {
	            if (role) {
	                return __utils.compare(role, this.watch.data[key || this.options.rolesVar]);
	            }

	            return true;
	        }

	        return false;
	    }

	    function _tokenExpired () {
	        return ! __token.get.call(this);
	    }

	    function _cookieDomain () {
	        return window.location.hostname;
	    }

	    function _getUrl () {
	        var port = window.location.port

	        return window.location.protocol + '//' + window.location.hostname + (port ? ':' + port : '')
	    }

	    function _getAuthMeta (transition) {
	        var auth,
	            authRoutes;

	        if (transition.to) {
	            auth = transition.to.auth;
	        } else {
	            authRoutes = transition.matched.filter(function (route) {
	                return route.meta.hasOwnProperty('auth');
	            });

	            // matches the nested route, the last one in the list
	            if (authRoutes.length) {
	                auth = authRoutes[authRoutes.length - 1].meta.auth;
	            }
	        }

	        return auth;
	    }

	    function _setTransitions (transition) {
	        __transitionPrev = __transitionThis;
	        __transitionThis = transition;
	    }

	    function _processInvalidToken(res, transition) {
	        var i,
	            auth,
	            query = '',
	            redirect = transition && transition.path;

	        // Make sure we also attach any existing
	        // query parameters on the path.
	        if (redirect && transition.query) {
	            for (i in transition.query) {
	                if (transition.query[i]) {
	                    query += '&' + i + '=' + transition.query[i];
	                }
	            }

	            redirect += '?' + query.substring(1);
	        }

	        if (!this.options.http._invalidToken) {
	            return;
	        }

	        if (!this.options.http._invalidToken.call(this, res)) {
	            return;
	        }

	        if (transition) {
	            auth = this.options.getAuthMeta(transition);
	        }

	        if (auth) {
	            redirect = auth.redirect || this.options.authRedirect;
	        }

	        this.options.logoutProcess.call(this, res, {redirect: redirect});
	    }

	    function _fetchPerform(data) {
	        var _this = this,
	            error = data.error;

	        data.error = function (res) {
	            _this.watch.loaded = true;

	            if (_this.options.fetchData.error) { _this.options.fetchData.error.call(_this, res); }

	            if (error) { error.call(_this, res); }
	        };

	        if (this.watch.authenticated !== true && !data.enabled) {
	            _fetchProcess.call(this, {}, data);
	        }
	        else {
	            return __duckPunch.call(this, 'fetch', data);
	        }
	    }

	    function _fetchProcess(res, data) {
	        this.watch.authenticated = true;
	        this.watch.data = this.options.parseUserData.call(this, this.options.http._httpData.call(this, res));
	        
	        this.watch.loaded = true;

	        if (this.options.fetchData.success) { this.options.fetchData.success.call(this, res); }

	        if (data.success) { data.success.call(this, res); }
	    }

	    function _refreshPerform(data) {
	        return __duckPunch.call(this, 'refresh', data);
	    }

	    function _refreshProcess(res, data) {
	        if (data.success) { data.success.call(this, res); }
	    }

	    function _registerPerform(data) {
	        return __duckPunch.call(this, 'register', data);
	    }

	    function _registerProcess(res, data) {
	        if (data.autoLogin === true) {
	            data = __utils.extend(data, [this.options.loginData, {redirect: data.redirect}]);

	            this.options.loginPerform.call(this, data);
	        }
	        else {
	            if (data.success) { data.success.call(this, res); }

	            if (data.redirect) {
	                this.options.router._routerGo.call(this, data.redirect);
	            }
	        }
	    }

	    function _loginPerform(data) {
	        return __duckPunch.call(this, 'login', data);
	    }

	    function _loginProcess(res, data) {
	        var _this = this;

	        __cookie.remember.call(this, data.rememberMe);

	        this.watch.authenticated = null;

	        this.options.fetchPerform.call(this, {
	            enabled: data.fetchUser,
	            success: function () {
	                if (data.success) { data.success.call(this, res); }

	                if (data.redirect && _this.options.check.call(_this)) {
	                    _this.options.router._routerGo.call(_this, data.redirect);
	                }
	            }
	        });
	    }

	    function _logoutPerform(data) {
	        data = __utils.extend(this.options.logoutData, [data || {}]);

	        if (data.makeRequest) {
	            return __duckPunch.call(this, 'logout', data);
	        }
	        else {
	            this.options.logoutProcess.call(this, null, data);
	        }
	    }

	    function _logoutProcess(res, data) {
	        __cookie.remove.call(this, 'rememberMe');

	        __cookie.remove.call(this, this.options.tokenImpersonateName);
	        __cookie.remove.call(this, this.options.tokenDefaultName);

	        __token.remove.call(this, this.options.tokenImpersonateName);
	        __token.remove.call(this, this.options.tokenDefaultName);

	        this.watch.authenticated = false;
	        this.watch.data = null;

	        if (data.success) { data.success.call(this, res, data); }

	        if (data.redirect) {
	            this.options.router._routerGo.call(this, data.redirect);
	        }
	    }

	    function _impersonatePerform(data) {
	        var success,
	            token = this.token.call(this); // (admin) token

	        data = data || {};

	        success = data.success;

	        data.success = function (res) {

	            // Reshuffle tokens here...
	            __token.set.call(this, this.options.tokenImpersonateName, this.token.call(this));
	            __token.set.call(this, this.options.tokenDefaultName, token);

	            if (success) { success.call(this, res); }
	        };

	        return __duckPunch.call(this, 'impersonate', data);
	    }

	    function _impersonateProcess(res, data) {
	        var _this = this;

	        this.options.fetchPerform.call(this, {
	            enabled: true,
	            success: function () {
	                if (data.success) { data.success.call(this, res); }

	                if (data.redirect && _this.options.check.call(_this)) {
	                    _this.options.router._routerGo.call(_this, data.redirect);
	                }
	            }
	        });
	    }

	    function _unimpersonatePerform(data) {
	        data = __utils.extend(this.options.unimpersonateData, [data || {}]);

	        if (data.makeRequest) {
	            return __duckPunch.call(this, 'unimpersonate', data);
	        }
	        else {
	            this.options.unimpersonateProcess.call(this, null, data);
	        }
	    }

	    function _unimpersonateProcess(res, data) {
	        __token.remove.call(this, this.options.tokenImpersonateName);

	        this.options.fetchPerform.call(this, {
	            enabled: true,
	            success: function () {
	                if (data.success) { data.success.call(this, res, data); }

	                if (data.redirect) {
	                    this.options.router._routerGo.call(this, data.redirect);
	                }
	            }
	        });
	    }

	    function _oauth2Perform(data) {
	        var key,
	            state = {},
	            params = '';

	        data = data || {};

	        if (data.code === true) {
	            data = __utils.extend(this.options[data.provider + 'Data'], [data]);

	            try {
	                if (data.query.state) {
	                    state = this.options.parseOauthState(data.query.state);
	                }
	            }
	            catch (e) {
	                console.error('vue-auth:error There was an issue retrieving the state data.');
	                state = {};
	            }

	            data.rememberMe = state.rememberMe === true;
	            data.state = state;

	            this.options.loginPerform.call(this, data);
	        } else {
	            data.params = __utils.extend(this.options[data.provider + 'Oauth2Data'].params, [data.params || {}]);
	            data = __utils.extend(this.options[data.provider + 'Oauth2Data'], [data]);

	            // Backwards compatibility.
	            data.params.redirect_uri = data.redirect || data.params.redirect_uri;
	            data.params.client_id = data.clientId || data.params.client_id;
	            data.params.response_type = data.response_type || data.params.response_type || 'code';
	            data.params.scope = data.scope || data.params.scope;
	            data.params.state = data.state || data.params.state || {};

	            if (typeof data.params.redirect_uri === 'function') {
	                data.params.redirect_uri = data.params.redirect_uri.call(this);
	            }

	            data.params.state.rememberMe = data.rememberMe === true;
	            data.params.state = JSON.stringify(data.params.state);

	            for (key in data.params) {
	                params += '&' + key + '=' + encodeURIComponent(data.params[key]);
	            }

	            window.location = data.url + '?' + params.substring(1);
	        }
	    }

	    var defaultOptions = {

	        // Variables

	        rolesVar:             'roles',
	        tokenImpersonateName: 'impersonate_auth_token',
	        tokenDefaultName:     'default_auth_token',
	        tokenStore:           ['localStorage', 'cookie'],

	        // Objects

	        authRedirect:       {path: '/login'},
	        forbiddenRedirect:  {path: '/403'},
	        notFoundRedirect:   {path: '/404'},

	        registerData:       {url: 'auth/register',      method: 'POST', redirect: '/login'},
	        loginData:          {url: 'auth/login',         method: 'POST', redirect: '/', fetchUser: true},
	        logoutData:         {url: 'auth/logout',        method: 'POST', redirect: '/', makeRequest: false},
	        oauth1Data:         {url: 'auth/login',         method: 'POST'},
	        fetchData:          {url: 'auth/user',          method: 'GET', enabled: true},
	        refreshData:        {url: 'auth/refresh',       method: 'GET', enabled: true, interval: 30},
	        impersonateData:    {url: 'auth/impersonate',   method: 'POST', redirect: '/'},
	        unimpersonateData:  {url: 'auth/unimpersonate', method: 'POST', redirect: '/admin', makeRequest: false},

	        facebookData:       {url: 'auth/facebook',      method: 'POST', redirect: '/'},
	        googleData:         {url: 'auth/google',        method: 'POST', redirect: '/'},

	        facebookOauth2Data: {
	            url: 'https://www.facebook.com/v2.5/dialog/oauth',
	            params: {
	                client_id: '',
	                redirect_uri: function () { return this.options.getUrl() + '/login/facebook'; },
	                scope: 'email'
	            }
	        },
	        googleOauth2Data: {
	            url: 'https://accounts.google.com/o/oauth2/auth',
	            params: {
	                client_id: '',
	                redirect_uri: function () { return this.options.getUrl() + '/login/google'; },
	                scope: 'https://www.googleapis.com/auth/plus.me https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/plus.profile.emails.read'
	            }
	        },

	        // Internal

	        getUrl:             _getUrl,
	        cookieDomain:       _cookieDomain,
	        parseUserData:      _parseUserData,
	        parseOauthState:    _parseOauthState,
	        tokenExpired:       _tokenExpired,
	        check:              _check,
	        checkAuthenticated: _checkAuthenticated,
	        getAuthMeta:        _getAuthMeta,
	        setTransitions:     _setTransitions,

	        readyCallback:      null,

	        transitionEach:     _transitionEach,
	        routerBeforeEach:   _routerBeforeEach,
	        requestIntercept:   _requestIntercept,
	        responseIntercept:  _responseIntercept,

	        // Contextual

	        registerPerform:    _registerPerform,
	        registerProcess:    _registerProcess,

	        loginPerform:       _loginPerform,
	        loginProcess:       _loginProcess,

	        logoutPerform:      _logoutPerform,
	        logoutProcess:      _logoutProcess,

	        fetchPerform:       _fetchPerform,
	        fetchProcess:       _fetchProcess,

	        refreshPerform:     _refreshPerform,
	        refreshProcess:     _refreshProcess,

	        impersonatePerform:  _impersonatePerform,
	        impersonateProcess:  _impersonateProcess,

	        unimpersonatePerform: _unimpersonatePerform,
	        unimpersonateProcess: _unimpersonateProcess,

	        oauth2Perform:      _oauth2Perform
	    };

	    function Auth(Vue, options) {
	        var i, ii,
	            msg,
	            _this = this,
	            drivers = ['auth', 'http', 'router'];

	        this.currentToken = null;

	        this.options = __utils.extend(defaultOptions, [options || {}]);
	        this.options.Vue = Vue;

	        this.watch = new this.options.Vue({
	            data: function () {
	                return {
	                    data: null,
	                    loaded: false,
	                    redirect: null,
	                    authenticated: null
	                };
	            },

	            watch: {
	                loaded: function (val) {
	                    if (val === true && _this.options.readyCallback) {
	                        _this.options.readyCallback();
	                    }
	                }
	            }
	        });

	        // Check drivers.
	        for (i = 0, ii = drivers.length; i < ii; i++) {
	            if ( ! this.options[drivers[i]]) {
	                console.error('Error (@websanova/vue-auth): "' + drivers[i] + '" driver must be set.');
	                return;
	            }

	            if (this.options[drivers[i]]._init) {
	                msg = this.options[drivers[i]]._init.call(this);

	                if (msg) {
	                    console.error('Error (@websanova/vue-auth): ' + msg);
	                    return;
	                }
	            }
	        }

	        // Set refresh interval.
	        if (this.options.refreshData.interval && this.options.refreshData.interval > 0) {
	            setInterval(function () {
	                if (this.options.refreshData.enabled && !this.options.tokenExpired.call(this)) {
	                    this.options.refreshPerform.call(this, {});
	                }
	            }.bind(this), this.options.refreshData.interval * 1000 * 60); // In minutes.
	        }

	        // Init interceptors.
	        this.options.router._beforeEach.call(this, this.options.routerBeforeEach, this.options.transitionEach);
	        this.options.http._interceptor.call(this, this.options.requestIntercept, this.options.responseIntercept);
	    }

	    Auth.prototype.ready = function (cb) {
	        if (cb !== undefined) {
	            this.$auth.options.readyCallback = cb.bind(this);
	        }

	        return this.$auth.watch.loaded;
	    };

	    Auth.prototype.redirect = function () {
	        return this.watch.redirect;
	    };

	    Auth.prototype.user = function (data) {
	        if (data) {
	            this.watch.data = data;
	        }

	        return this.watch.data || {};
	    };

	    Auth.prototype.check = function (role, key) {
	        return this.options.check.call(this, role, key);
	    };

	    Auth.prototype.impersonating = function () {
	        this.watch.data; // To fire watch

	        return __token.get.call(this, this.options.tokenImpersonateName) ? true : false;
	    };

	    Auth.prototype.token = function (name, token) {
	        if (token) {
	            __token.set.call(this, name, token);
	        }

	        return __token.get.call(this, name);
	    };

	    Auth.prototype.fetch = function (data) {
	        return __bindContext.call(this, 'fetch', data);
	    };

	    Auth.prototype.refresh = function (data) {
	        return __bindContext.call(this, 'refresh', data);
	    };

	    Auth.prototype.register = function (data) {
	        return __bindContext.call(this, 'register', data);
	    };

	    Auth.prototype.login = function (data) {
	        return __bindContext.call(this, 'login', data);
	    };

	    Auth.prototype.logout = function (data) {
	        return __bindContext.call(this, 'logout', data);
	    };

	    Auth.prototype.impersonate = function (data) {
	        return __bindContext.call(this, 'impersonate', data);
	    };

	    Auth.prototype.unimpersonate = function (data) {
	        return __bindContext.call(this, 'unimpersonate', data);
	    };

	    Auth.prototype.oauth2 = function (data) {
	        return __bindContext.call(this, 'oauth2', data);
	    }

	    Auth.prototype.enableImpersonate = function () {
	        if (this.impersonating()) {
	            this.currentToken = null;
	        }
	    };

	    Auth.prototype.disableImpersonate = function () {
	        if (this.impersonating()) {
	            this.currentToken = this.options.tokenDefaultName;
	        }
	    }; 

	    return Auth;
	};


/***/ }),
/* 106 */
/***/ (function(module, exports) {

	module.exports = (function (){

	    function isObject(val) {
	        if (val !== null && typeof val === 'object' && val.constructor !== Array ) {
	            return true;
	        }

	        return false;
	    }

	    function toArray(val) {
	        return (typeof val) === 'string' || (typeof val) === 'number' ? [val] : val;
	    }

	    function extend(mainObj, appendObj) {
	        var i, ii, key, data = {};

	        for (key in mainObj) {
	            if (isObject(mainObj[key]) && mainObj[key].constructor.name !== 'FormData') {
	                data[key] = extend(mainObj[key], {});
	            }
	            else {
	                data[key] = mainObj[key];
	            }
	        }

	        for (i = 0, ii = appendObj.length; i < ii; i++) {
	            for (key in appendObj[i]) {
	                if (isObject(appendObj[i][key]) && appendObj[i][key].constructor.name !== 'FormData') {
	                    data[key] = extend(mainObj[key] || {}, [appendObj[i][key]]);
	                }
	                else  {
	                    data[key] = appendObj[i][key];
	                }
	            }
	        }

	        return data;
	    }

	    function compare(one, two) {
	        var i, ii, key;

	        if (Object.prototype.toString.call(one) === '[object Object]' && Object.prototype.toString.call(two) === '[object Object]') {
	            for (key in one) {
	                if (compare(one[key], two[key])) {
	                    return true;
	                }
	            }

	            return false;
	        }

	        one = toArray(one);
	        two = toArray(two);

	        if (!one || !two || one.constructor !== Array || two.constructor !== Array) {
	            return false;
	        }

	        for (i = 0, ii = one.length; i < ii; i++) {
	            if (two.indexOf(one[i]) >= 0) {
	                return true;
	            }
	        }

	        return false;
	    }

	    return {
	        extend: extend,
	        toArray: toArray,
	        isObject: isObject,
	        compare: compare
	    };
	})();


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	var __cookie = __webpack_require__(108);

	module.exports = (function () {

	    function tokenName(name) {
	        name = name || this.currentToken;
	        
	        if (name) {
	            return name;
	        }

	        if (this.impersonating.call(this)) {
	            return this.options.tokenImpersonateName;
	        }

	        return this.options.tokenDefaultName;
	    }

	    function isLocalStorageSupported() {
	        try {
	            if (!window.localStorage || !window.sessionStorage) {
	                throw 'exception';
	            }

	            localStorage.setItem('storage_test', 1);
	            localStorage.removeItem('storage_test');
	            
	            return true;
	        } catch (e) {
	            return false;
	        }
	    }

	    function isCookieSupported() {
	        return true;
	    }

	    function processToken(action, name, token) {
	        var i, ii,
	            args = [tokenName.call(this, name)];

	        if (token) {
	            args.push(token);
	        }

	        for (i = 0, ii = this.options.tokenStore.length; i < ii; i++) {
	            if (this.options.tokenStore[i] === 'localStorage' && isLocalStorageSupported()) {
	                return localStorage[action + 'Item'](args[0], args[1]);
	            }

	            else if (this.options.tokenStore[i] === 'cookie' && isCookieSupported()) {
	                return __cookie[action].apply(this, args);
	            }
	        }
	    }

	    return {
	        get: function (name) {
	            return processToken.call(this, 'get', name);
	        },

	        set: function (name, token) {
	            return processToken.call(this, 'set', name, token);
	        },

	        remove: function (name) {
	            return processToken.call(this, 'remove', name);
	        },

	        expiring: function () {
	            return false;
	        }
	    }

	})();

/***/ }),
/* 108 */
/***/ (function(module, exports) {

	module.exports = (function () {

	    function setCookie (name, value, timeOffset) {
	        var domain = this.options.cookieDomain(),
	            expires = (new Date((new Date()).getTime() + timeOffset)).toUTCString(),
	            cookie = name + '=' + value + '; Expires=' + expires + ';';
	        
	        if (domain !== 'localhost') {
	            cookie += ' Path=/; Domain=' + domain + ';';
	        }

	        document.cookie = cookie;
	    }

	    return {
	        remember: function(rememberMe) {
	            setCookie.call(this,
	                'rememberMe',
	                rememberMe === true ? 'true' : 'false',
	                rememberMe === true ? 12096e5 : undefined
	            );
	        },

	        set: function(name, value, expires) {
	            if (value) {
	                setCookie.call(this, name, value, 12096e5);
	            }
	        },

	        get: function(name) {
	            var i, ii,
	                cookie = document.cookie;

	             cookie = cookie.replace(/;\s+/g, ';')
	                            .split(';')
	                            .map(function(s) {
	                                return s.replace(/\s+\=\s+/g, '=').split('=');
	                             });

	            for (i = 0, ii = cookie.length; i < ii; i++) {
	                if (cookie[i][0] && cookie[i][0] === name) {
	                    return cookie[i][1];
	                }
	            }

	            return null;
	        },

	        exists: function(name) {
	            return document.cookie.match(/rememberMe/);
	        },

	        remove: function(name) {
	            setCookie.call(this, name, '', -12096e5);
	        }
	    };

	})();

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  (global = global || self, global.bootstrapVue = factory());
	}(this, function () { 'use strict';

	  function _typeof(obj) {
	    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	      _typeof = function (obj) {
	        return typeof obj;
	      };
	    } else {
	      _typeof = function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	      };
	    }

	    return _typeof(obj);
	  }

	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  }

	  function _defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  function _createClass(Constructor, protoProps, staticProps) {
	    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) _defineProperties(Constructor, staticProps);
	    return Constructor;
	  }

	  function _defineProperty(obj, key, value) {
	    if (key in obj) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	    } else {
	      obj[key] = value;
	    }

	    return obj;
	  }

	  function _objectSpread(target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i] != null ? arguments[i] : {};
	      var ownKeys = Object.keys(source);

	      if (typeof Object.getOwnPropertySymbols === 'function') {
	        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	        }));
	      }

	      ownKeys.forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    }

	    return target;
	  }

	  function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	      constructor: {
	        value: subClass,
	        writable: true,
	        configurable: true
	      }
	    });
	    if (superClass) _setPrototypeOf(subClass, superClass);
	  }

	  function _getPrototypeOf(o) {
	    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	      return o.__proto__ || Object.getPrototypeOf(o);
	    };
	    return _getPrototypeOf(o);
	  }

	  function _setPrototypeOf(o, p) {
	    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	      o.__proto__ = p;
	      return o;
	    };

	    return _setPrototypeOf(o, p);
	  }

	  function _assertThisInitialized(self) {
	    if (self === void 0) {
	      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }

	    return self;
	  }

	  function _possibleConstructorReturn(self, call) {
	    if (call && (typeof call === "object" || typeof call === "function")) {
	      return call;
	    }

	    return _assertThisInitialized(self);
	  }

	  function _toConsumableArray(arr) {
	    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
	  }

	  function _arrayWithoutHoles(arr) {
	    if (Array.isArray(arr)) {
	      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

	      return arr2;
	    }
	  }

	  function _iterableToArray(iter) {
	    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	  }

	  function _nonIterableSpread() {
	    throw new TypeError("Invalid attempt to spread non-iterable instance");
	  }

	  var __assign=function(){return (__assign=Object.assign||function(e){for(var a,s=1,t=arguments.length;s<t;s++)for(var r in a=arguments[s])Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r]);return e}).apply(this,arguments)};function mergeData(){for(var e,a,s={},t=arguments.length;t--;)for(var r=0,c=Object.keys(arguments[t]);r<c.length;r++)switch(e=c[r]){case"class":case"style":case"directives":Array.isArray(s[e])||(s[e]=[]),s[e]=s[e].concat(arguments[t][e]);break;case"staticClass":if(!arguments[t][e])break;void 0===s[e]&&(s[e]=""),s[e]&&(s[e]+=" "),s[e]+=arguments[t][e].trim();break;case"on":case"nativeOn":s[e]||(s[e]={});for(var n=0,o=Object.keys(arguments[t][e]||{});n<o.length;n++)a=o[n],s[e][a]?s[e][a]=[].concat(s[e][a],arguments[t][e][a]):s[e][a]=arguments[t][e][a];break;case"attrs":case"props":case"domProps":case"scopedSlots":case"staticStyle":case"hook":case"transition":s[e]||(s[e]={}),s[e]=__assign({},arguments[t][e],s[e]);break;case"slot":case"key":case"ref":case"tag":case"show":case"keepAlive":default:s[e]||(s[e]=arguments[t][e]);}return s}

	  var props = {
	    disabled: {
	      type: Boolean,
	      default: false
	    },
	    ariaLabel: {
	      type: String,
	      default: 'Close'
	    },
	    textVariant: {
	      type: String,
	      default: null
	    } // @vue/component

	  };
	  var BButtonClose = {
	    name: 'BButtonClose',
	    functional: true,
	    props: props,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          listeners = _ref.listeners,
	          slots = _ref.slots;
	      var componentData = {
	        staticClass: 'close',
	        class: _defineProperty({}, "text-".concat(props.textVariant), props.textVariant),
	        attrs: {
	          type: 'button',
	          disabled: props.disabled,
	          'aria-label': props.ariaLabel ? String(props.ariaLabel) : null
	        },
	        on: {
	          click: function click(e) {
	            // Ensure click on button HTML content is also disabled

	            /* istanbul ignore if: bug in JSDOM still emits click on inner element */
	            if (props.disabled && e instanceof Event) {
	              e.stopPropagation();
	              e.preventDefault();
	            }
	          }
	        } // Careful not to override the default slot with innerHTML

	      };

	      if (!slots().default) {
	        componentData.domProps = {
	          innerHTML: '&times;'
	        };
	      }

	      return h('button', mergeData(data, componentData), slots().default);
	    }
	  };

	  var BAlert = {
	    name: 'BAlert',
	    components: {
	      BButtonClose: BButtonClose
	    },
	    model: {
	      prop: 'show',
	      event: 'input'
	    },
	    props: {
	      variant: {
	        type: String,
	        default: 'info'
	      },
	      dismissible: {
	        type: Boolean,
	        default: false
	      },
	      dismissLabel: {
	        type: String,
	        default: 'Close'
	      },
	      show: {
	        type: [Boolean, Number],
	        default: false
	      },
	      fade: {
	        type: Boolean,
	        default: false
	      }
	    },
	    data: function data() {
	      return {
	        countDownTimerId: null,
	        dismissed: false
	      };
	    },
	    computed: {
	      classObject: function classObject() {
	        return ['alert', this.alertVariant, this.dismissible ? 'alert-dismissible' : ''];
	      },
	      alertVariant: function alertVariant() {
	        var variant = this.variant;
	        return "alert-".concat(variant);
	      },
	      localShow: function localShow() {
	        return !this.dismissed && (this.countDownTimerId || this.show);
	      }
	    },
	    watch: {
	      show: function show() {
	        this.showChanged();
	      }
	    },
	    mounted: function mounted() {
	      this.showChanged();
	    },
	    destroyed
	    /* istanbul ignore next */
	    : function destroyed() {
	      this.clearCounter();
	    },
	    methods: {
	      dismiss: function dismiss() {
	        this.clearCounter();
	        this.dismissed = true;
	        this.$emit('dismissed');
	        this.$emit('input', false);

	        if (typeof this.show === 'number') {
	          this.$emit('dismiss-count-down', 0);
	          this.$emit('input', 0);
	        } else {
	          this.$emit('input', false);
	        }
	      },
	      clearCounter: function clearCounter() {
	        if (this.countDownTimerId) {
	          clearInterval(this.countDownTimerId);
	          this.countDownTimerId = null;
	        }
	      },
	      showChanged: function showChanged() {
	        var _this = this;

	        // Reset counter status
	        this.clearCounter(); // Reset dismiss status

	        this.dismissed = false; // No timer for boolean values

	        if (this.show === true || this.show === false || this.show === null || this.show === 0) {
	          return;
	        } // Start counter (ensure we have an integer value)


	        var dismissCountDown = parseInt(this.show, 10) || 1;
	        this.countDownTimerId = setInterval(function () {
	          if (dismissCountDown < 1) {
	            _this.dismiss();

	            return;
	          }

	          dismissCountDown--;

	          _this.$emit('dismiss-count-down', dismissCountDown);

	          _this.$emit('input', dismissCountDown);
	        }, 1000);
	      }
	    },
	    render: function render(h) {
	      if (!this.localShow) {
	        // If not showing, render placeholder
	        return h(false);
	      }

	      var dismissBtn = h(false);

	      if (this.dismissible) {
	        // Add dismiss button
	        dismissBtn = h('b-button-close', {
	          attrs: {
	            'aria-label': this.dismissLabel
	          },
	          on: {
	            click: this.dismiss
	          }
	        }, [this.$slots.dismiss]);
	      }

	      var alert = h('div', {
	        class: this.classObject,
	        attrs: {
	          role: 'alert',
	          'aria-live': 'polite',
	          'aria-atomic': true
	        }
	      }, [dismissBtn, this.$slots.default]);
	      return !this.fade ? alert : h('transition', {
	        props: {
	          name: 'fade',
	          appear: true
	        }
	      }, [alert]);
	    }
	  };

	  /**
	   * Load a component.
	   * @param {object} Vue
	   * @param {string} Component name
	   * @param {object} Component definition
	   */
	  function registerComponent(Vue, name, def) {
	    Vue.component(name, def);
	  }
	  /**
	   * Load a group of components.
	   * @param {object} Vue
	   * @param {object} Object of component definitions
	   */

	  function registerComponents(Vue, components) {
	    for (var component in components) {
	      registerComponent(Vue, component, components[component]);
	    }
	  }
	  /**
	   * Load a directive.
	   * @param {object} Vue
	   * @param {string} Directive name
	   * @param {object} Directive definition
	   */

	  function registerDirective(Vue, name, def) {
	    Vue.directive(name, def);
	  }
	  /**
	   * Load a group of directives.
	   * @param {object} Vue
	   * @param {object} Object of directive definitions
	   */

	  function registerDirectives(Vue, directives) {
	    for (var directive in directives) {
	      registerDirective(Vue, directive, directives[directive]);
	    }
	  }
	  /**
	   * Install plugin if window.Vue available
	   * @param {object} Plugin definition
	   */

	  function vueUse(VuePlugin) {
	    /* istanbul ignore next */
	    if (typeof window !== 'undefined' && window.Vue) {
	      window.Vue.use(VuePlugin);
	    }
	  }

	  var components = {
	    BAlert: BAlert
	  };
	  var index = {
	    install: function install(Vue) {
	      registerComponents(Vue, components);
	    }
	  };

	  /**
	   * Aliasing Object[method] allows the minifier to shorten methods to a single character variable,
	   * as well as giving BV a chance to inject polyfills.
	   * As long as we avoid
	   * - import * as Object from "utils/object"
	   * all unused exports should be removed by tree-shaking.
	   */
	  // @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

	  /* istanbul ignore if */
	  if (typeof Object.assign !== 'function') {
	    Object.assign = function (target, varArgs) {
	      // .length of function is 2
	      if (target == null) {
	        // TypeError if undefined or null
	        throw new TypeError('Cannot convert undefined or null to object');
	      }

	      var to = Object(target);

	      for (var index = 1; index < arguments.length; index++) {
	        var nextSource = arguments[index];

	        if (nextSource != null) {
	          // Skip over if undefined or null
	          for (var nextKey in nextSource) {
	            // Avoid bugs when hasOwnProperty is shadowed
	            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
	              to[nextKey] = nextSource[nextKey];
	            }
	          }
	        }
	      }

	      return to;
	    };
	  } // @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Polyfill

	  /* istanbul ignore if */


	  if (!Object.is) {
	    Object.is = function (x, y) {
	      // SameValue algorithm
	      if (x === y) {
	        // Steps 1-5, 7-10
	        // Steps 6.b-6.e: +0 != -0
	        return x !== 0 || 1 / x === 1 / y;
	      } else {
	        // Step 6.a: NaN == NaN
	        // eslint-disable-next-line no-self-compare
	        return x !== x && y !== y;
	      }
	    };
	  }

	  var assign = Object.assign;
	  var keys = Object.keys;
	  var defineProperties = Object.defineProperties;
	  var defineProperty = Object.defineProperty;
	  var create = Object.create;
	  /**
	   * Quick object check - this is primarily used to tell
	   * Objects from primitive values when we know the value
	   * is a JSON-compliant type.
	   * Note object could be a complex type like array, date, etc.
	   */

	  var isObject = function isObject(obj) {
	    return obj !== null && _typeof(obj) === 'object';
	  };
	  /**
	   * Strict object type check. Only returns true
	   * for plain JavaScript objects.
	   */

	  var isPlainObject = function isPlainObject(obj) {
	    return Object.prototype.toString.call(obj) === '[object Object]';
	  }; // @link https://gist.github.com/bisubus/2da8af7e801ffd813fab7ac221aa7afc

	  var omit = function omit(obj, props) {
	    return Object.keys(obj).filter(function (key) {
	      return props.indexOf(key) === -1;
	    }).reduce(function (result, key) {
	      return _objectSpread({}, result, _defineProperty({}, key, obj[key]));
	    }, {});
	  };
	  var readonlyDescriptor = function readonlyDescriptor() {
	    return {
	      enumerable: true,
	      configurable: false,
	      writable: false
	    };
	  };

	  // Production steps of ECMA-262, Edition 6, 22.1.2.1
	  // es6-ified by @alexsasharegan

	  /* istanbul ignore if */
	  if (!Array.from) {
	    Array.from = function () {
	      var toStr = Object.prototype.toString;

	      var isCallable = function isCallable(fn) {
	        return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
	      };

	      var toInteger = function toInteger(value) {
	        var number = Number(value);

	        if (isNaN(number)) {
	          return 0;
	        }

	        if (number === 0 || !isFinite(number)) {
	          return number;
	        }

	        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
	      };

	      var maxSafeInteger = Math.pow(2, 53) - 1;

	      var toLength = function toLength(value) {
	        return Math.min(Math.max(toInteger(value), 0), maxSafeInteger);
	      }; // The length property of the from method is 1.


	      return function from(arrayLike
	      /*, mapFn, thisArg */
	      ) {
	        // 1. Let C be the this value.
	        var C = this; // 2. Let items be ToObject(arrayLike).

	        var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).

	        if (arrayLike == null) {
	          throw new TypeError('Array.from requires an array-like object - not null or undefined');
	        } // 4. If mapfn is undefined, then let mapping be false.


	        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
	        var T;

	        if (typeof mapFn !== 'undefined') {
	          // 5. else
	          // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
	          if (!isCallable(mapFn)) {
	            throw new TypeError('Array.from: when provided, the second argument must be a function');
	          } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.


	          if (arguments.length > 2) {
	            T = arguments[2];
	          }
	        } // 10. Let lenValue be Get(items, "length").
	        // 11. Let len be ToLength(lenValue).


	        var len = toLength(items.length); // 13. If IsConstructor(C) is true, then
	        // 13. a. Let A be the result of calling the [[Construct]] internal method
	        // of C with an argument list containing the single item len.
	        // 14. a. Else, Let A be ArrayCreate(len).

	        var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.

	        var k = 0; // 17. Repeat, while k < len… (also steps a - h)

	        var kValue;

	        while (k < len) {
	          kValue = items[k];

	          if (mapFn) {
	            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
	          } else {
	            A[k] = kValue;
	          }

	          k += 1;
	        } // 18. Let putStatus be Put(A, "length", len, true).


	        A.length = len; // 20. Return A.

	        return A;
	      };
	    }();
	  } // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  // Needed for IE support

	  /* istanbul ignore if */


	  if (!Array.prototype.find) {
	    // eslint-disable-next-line no-extend-native
	    Object.defineProperty(Array.prototype, 'find', {
	      value: function value(predicate) {
	        // 1. Let O be ? ToObject(this value).
	        if (this == null) {
	          throw new TypeError('"this" is null or not defined');
	        }

	        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

	        var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.

	        if (typeof predicate !== 'function') {
	          throw new TypeError('predicate must be a function');
	        } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.


	        var thisArg = arguments[1]; // 5. Let k be 0.

	        var k = 0; // 6. Repeat, while k < len

	        while (k < len) {
	          // a. Let Pk be ! ToString(k).
	          // b. Let kValue be ? Get(O, Pk).
	          // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
	          // d. If testResult is true, return kValue.
	          var kValue = o[k];

	          if (predicate.call(thisArg, kValue, k, o)) {
	            return kValue;
	          } // e. Increase k by 1.


	          k++;
	        } // 7. Return undefined.


	        return undefined;
	      }
	    });
	  }
	  /* istanbul ignore if */


	  if (!Array.isArray) {
	    Array.isArray = function (arg) {
	      return Object.prototype.toString.call(arg) === '[object Array]';
	    };
	  } // Static


	  var from = Array.from;
	  var isArray = Array.isArray; // Instance

	  var arrayIncludes = function arrayIncludes(array, value) {
	    return array.indexOf(value) !== -1;
	  };
	  function concat() {
	    return Array.prototype.concat.apply([], arguments);
	  }

	  function identity(x) {
	    return x;
	  }

	  /**
	   * Given an array of properties or an object of property keys,
	   * plucks all the values off the target object.
	   * @param {{}|string[]} keysToPluck
	   * @param {{}} objToPluck
	   * @param {Function} transformFn
	   * @return {{}}
	   */

	  function pluckProps(keysToPluck, objToPluck) {
	    var transformFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;
	    return (isArray(keysToPluck) ? keysToPluck.slice() : keys(keysToPluck)).reduce(function (memo, prop) {
	      // eslint-disable-next-line no-sequences
	      return memo[transformFn(prop)] = objToPluck[prop], memo;
	    }, {});
	  }

	  /**
	   * The Link component is used in many other BV components.
	   * As such, sharing its props makes supporting all its features easier.
	   * However, some components need to modify the defaults for their own purpose.
	   * Prefer sharing a fresh copy of the props to ensure mutations
	   * do not affect other component references to the props.
	   *
	   * https://github.com/vuejs/vue-router/blob/dev/src/components/link.js
	   * @return {{}}
	   */

	  function propsFactory() {
	    return {
	      href: {
	        type: String,
	        default: null
	      },
	      rel: {
	        type: String,
	        default: null
	      },
	      target: {
	        type: String,
	        default: '_self'
	      },
	      active: {
	        type: Boolean,
	        default: false
	      },
	      disabled: {
	        type: Boolean,
	        default: false
	      },
	      // router-link specific props
	      to: {
	        type: [String, Object],
	        default: null
	      },
	      append: {
	        type: Boolean,
	        default: false
	      },
	      replace: {
	        type: Boolean,
	        default: false
	      },
	      event: {
	        type: [String, Array],
	        default: 'click'
	      },
	      activeClass: {
	        type: String // default: undefined

	      },
	      exact: {
	        type: Boolean,
	        default: false
	      },
	      exactActiveClass: {
	        type: String // default: undefined

	      },
	      routerTag: {
	        type: String,
	        default: 'a'
	      },
	      // nuxt-link specific prop(s)
	      noPrefetch: {
	        type: Boolean,
	        default: false
	      }
	    };
	  }
	  function pickLinkProps(propsToPick) {
	    var freshLinkProps = propsFactory(); // Normalize everything to array.

	    propsToPick = concat(propsToPick);
	    return keys(freshLinkProps).reduce(function (memo, prop) {
	      if (arrayIncludes(propsToPick, prop)) {
	        memo[prop] = freshLinkProps[prop];
	      }

	      return memo;
	    }, {});
	  }

	  function computeTag(props, parent) {
	    return parent.$router && props.to && !props.disabled ? parent.$nuxt ? 'nuxt-link' : 'router-link' : 'a';
	  }

	  function isRouterLink(tag) {
	    return tag !== 'a';
	  }

	  function computeHref(_ref, tag) {
	    var disabled = _ref.disabled,
	        href = _ref.href,
	        to = _ref.to;

	    // We've already checked the parent.$router in computeTag,
	    // so isRouterLink(tag) indicates a live router.
	    // When deferring to Vue Router's router-link, don't use the href attr at all.
	    // We return null, and then remove href from the attributes passed to router-link
	    if (isRouterLink(tag)) {
	      return null;
	    } // If href explicitly provided


	    if (href) {
	      return href;
	    } // Reconstruct `href` when `to` used, but no router


	    if (to) {
	      // Fallback to `to` prop (if `to` is a string)
	      if (typeof to === 'string') {
	        return to;
	      } // Fallback to `to.path` prop (if `to` is an object)


	      if (_typeof(to) === 'object' && typeof to.path === 'string') {
	        return to.path;
	      }
	    } // If nothing is provided use '#' as a fallback


	    return '#';
	  }

	  function computeRel(_ref2) {
	    var target = _ref2.target,
	        rel = _ref2.rel;

	    if (target === '_blank' && rel === null) {
	      return 'noopener';
	    }

	    return rel || null;
	  }

	  function clickHandlerFactory(_ref3) {
	    var disabled = _ref3.disabled,
	        tag = _ref3.tag,
	        href = _ref3.href,
	        suppliedHandler = _ref3.suppliedHandler,
	        parent = _ref3.parent;
	    return function onClick(e) {
	      if (disabled && e instanceof Event) {
	        // Stop event from bubbling up.
	        e.stopPropagation(); // Kill the event loop attached to this specific EventTarget.

	        e.stopImmediatePropagation();
	      } else {
	        if (isRouterLink(tag) && e.target.__vue__) {
	          e.target.__vue__.$emit('click', e);
	        }

	        if (typeof suppliedHandler === 'function') {
	          suppliedHandler.apply(void 0, arguments);
	        }

	        parent.$root.$emit('clicked::link', e);
	      }

	      if (!isRouterLink(tag) && href === '#' || disabled) {
	        // Stop scroll-to-top behavior or navigation.
	        e.preventDefault();
	      }
	    };
	  } // @vue/component


	  var BLink = {
	    name: 'BLink',
	    functional: true,
	    props: propsFactory(),
	    render: function render(h, _ref4) {
	      var props = _ref4.props,
	          data = _ref4.data,
	          parent = _ref4.parent,
	          children = _ref4.children;
	      var tag = computeTag(props, parent);
	      var rel = computeRel(props);
	      var href = computeHref(props, tag);
	      var eventType = isRouterLink(tag) ? 'nativeOn' : 'on';
	      var suppliedHandler = (data[eventType] || {}).click;
	      var handlers = {
	        click: clickHandlerFactory({
	          tag: tag,
	          href: href,
	          disabled: props.disabled,
	          suppliedHandler: suppliedHandler,
	          parent: parent
	        })
	      };
	      var componentData = mergeData(data, {
	        class: {
	          active: props.active,
	          disabled: props.disabled
	        },
	        attrs: {
	          rel: rel,
	          target: props.target,
	          tabindex: props.disabled ? '-1' : data.attrs ? data.attrs.tabindex : null,
	          'aria-disabled': props.disabled ? 'true' : null
	        },
	        props: _objectSpread({}, props, {
	          tag: props.routerTag
	        })
	      }); // If href attribute exists on router-link (even undefined or null) it fails working on SSR
	      // So we explicitly add it here if needed (i.e. if computeHref() is truthy)

	      if (href) {
	        componentData.attrs.href = href;
	      } // We want to overwrite any click handler since our callback
	      // will invoke the user supplied handler if !props.disabled


	      componentData[eventType] = _objectSpread({}, componentData[eventType] || {}, handlers);
	      return h(tag, componentData, children);
	    }
	  };

	  var linkProps = propsFactory();
	  delete linkProps.href.default;
	  delete linkProps.to.default;
	  var props$1 = _objectSpread({}, linkProps, {
	    tag: {
	      type: String,
	      default: 'span'
	    },
	    variant: {
	      type: String,
	      default: 'secondary'
	    },
	    pill: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  });
	  var BBadge = {
	    name: 'BBadge',
	    functional: true,
	    props: props$1,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var tag = !props.href && !props.to ? props.tag : BLink;
	      var componentData = {
	        staticClass: 'badge',
	        class: [!props.variant ? 'badge-secondary' : "badge-".concat(props.variant), {
	          'badge-pill': Boolean(props.pill),
	          active: props.active,
	          disabled: props.disabled
	        }],
	        props: pluckProps(linkProps, props)
	      };
	      return h(tag, mergeData(data, componentData), children);
	    }
	  };

	  var components$1 = {
	    BBadge: BBadge
	  };
	  var index$1 = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$1);
	    }
	  };

	  var stripTagsRegex = /(<([^>]+)>)/gi;
	  function stripTags() {
	    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    return String(text).replace(stripTagsRegex, '');
	  }
	  function htmlOrText(innerHTML, textContent) {
	    return innerHTML ? {
	      innerHTML: innerHTML
	    } : {
	      textContent: textContent
	    };
	  }

	  var props$2 = _objectSpread({}, propsFactory(), {
	    text: {
	      type: String,
	      default: null
	    },
	    html: {
	      type: String,
	      default: null
	    },
	    ariaCurrent: {
	      type: String,
	      default: 'location'
	    } // @vue/component

	  });
	  var BBreadcrumbLink = {
	    name: 'BBreadcrumbLink',
	    functional: true,
	    props: props$2,
	    render: function render(h, _ref) {
	      var suppliedProps = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var tag = suppliedProps.active ? 'span' : BLink;
	      var componentData = {
	        props: pluckProps(props$2, suppliedProps)
	      };

	      if (suppliedProps.active) {
	        componentData.attrs = {
	          'aria-current': suppliedProps.ariaCurrent
	        };
	      }

	      if (!children) {
	        componentData.domProps = htmlOrText(suppliedProps.html, suppliedProps.text);
	      }

	      return h(tag, mergeData(data, componentData), children);
	    }
	  };

	  var BBreadcrumbItem = {
	    name: 'BBreadcrumbItem',
	    functional: true,
	    props: props$2,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h('li', mergeData(data, {
	        staticClass: 'breadcrumb-item',
	        class: {
	          active: props.active
	        },
	        attrs: {
	          role: 'presentation'
	        }
	      }), [h(BBreadcrumbLink, {
	        props: props
	      }, children)]);
	    }
	  };

	  var props$3 = {
	    items: {
	      type: Array,
	      default: null
	    } // @vue/component

	  };
	  var BBreadcrumb = {
	    name: 'BBreadcrumb',
	    functional: true,
	    props: props$3,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var childNodes = children; // Build child nodes from items if given.

	      if (isArray(props.items)) {
	        var activeDefined = false;
	        childNodes = props.items.map(function (item, idx) {
	          if (_typeof(item) !== 'object') {
	            item = {
	              text: item
	            };
	          } // Copy the value here so we can normalize it.


	          var active = item.active;

	          if (active) {
	            activeDefined = true;
	          }

	          if (!active && !activeDefined) {
	            // Auto-detect active by position in list.
	            active = idx + 1 === props.items.length;
	          }

	          return h(BBreadcrumbItem, {
	            props: _objectSpread({}, item, {
	              active: active
	            })
	          });
	        });
	      }

	      return h('ol', mergeData(data, {
	        staticClass: 'breadcrumb'
	      }), childNodes);
	    }
	  };

	  var components$2 = {
	    BBreadcrumb: BBreadcrumb,
	    BBreadcrumbItem: BBreadcrumbItem,
	    BBreadcrumbLink: BBreadcrumbLink
	  };
	  var index$2 = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$2);
	    }
	  };

	  // Info about the current environment
	  var inBrowser = typeof document !== 'undefined' && typeof window !== 'undefined';
	  var isServer = !inBrowser;
	  var hasTouchSupport = inBrowser && ('ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0);
	  var hasPointerEvent = inBrowser && Boolean(window.PointerEvent || window.MSPointerEvent);

	  var passiveEventSupported = false;
	  /* istanbul ignore if */

	  if (inBrowser) {
	    try {
	      var options = {
	        get passive() {
	          // This function will be called when the browser
	          // attempts to access the passive property.
	          passiveEventSupported = true;
	        }

	      };
	      window.addEventListener('test', options, options);
	      window.removeEventListener('test', options, options);
	    } catch (err) {
	      passiveEventSupported = false;
	    }
	  } // Normalize event options based on support of passive option


	  function parseEventOptions(options) {
	    var useCapture = false;

	    if (options) {
	      if (_typeof(options) === 'object') {
	        // eslint-disable-next-line no-unneeded-ternary
	        useCapture = options.useCapture ? true : false;
	      } else {
	        useCapture = options;
	      }
	    }

	    return passiveEventSupported ? options : useCapture;
	  } // Attach an event listener to an element


	  var eventOn = function eventOn(el, evtName, handler, options) {
	    if (el && el.addEventListener) {
	      el.addEventListener(evtName, handler, parseEventOptions(options));
	    }
	  }; // Remove an event listener from an element

	  var eventOff = function eventOff(el, evtName, handler, options) {
	    if (el && el.removeEventListener) {
	      el.removeEventListener(evtName, handler, parseEventOptions(options));
	    }
	  }; // Determine if an element is an HTML Element

	  var isElement = function isElement(el) {
	    return el && el.nodeType === Node.ELEMENT_NODE;
	  }; // Determine if an HTML element is visible - Faster than CSS check

	  var isVisible = function isVisible(el)
	  /* istanbul ignore next: getBoundingClientRect() doesn't work in JSDOM */
	  {
	    if (!isElement(el) || !contains(document.body, el)) {
	      return false;
	    }

	    var bcr = getBCR(el);
	    return bcr && bcr.height > 0 && bcr.width > 0;
	  }; // Determine if an element is disabled

	  var isDisabled = function isDisabled(el) {
	    return !isElement(el) || el.disabled || hasClass(el, 'disabled') || Boolean(getAttr(el, 'disabled'));
	  }; // Cause/wait-for an element to reflow it's content (adjusting it's height/width)

	  var reflow = function reflow(el) {
	    // Requesting an elements offsetHight will trigger a reflow of the element content

	    /* istanbul ignore next: reflow doesn't happen in JSDOM */
	    return isElement(el) && el.offsetHeight;
	  }; // Select all elements matching selector. Returns `[]` if none found

	  var selectAll = function selectAll(selector, root) {
	    if (!isElement(root)) {
	      root = document;
	    }

	    return from(root.querySelectorAll(selector));
	  }; // Select a single element, returns `null` if not found

	  var select = function select(selector, root) {
	    if (!isElement(root)) {
	      root = document;
	    }

	    return root.querySelector(selector) || null;
	  }; // Determine if an element matches a selector

	  var matches = function matches(el, selector) {
	    if (!isElement(el)) {
	      return false;
	    } // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
	    // Prefer native implementations over polyfill function


	    var proto = Element.prototype;
	    /* istanbul ignore next */

	    var Matches = proto.matches || proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector || function (sel)
	    /* istanbul ignore next */
	    {
	      var element = this;
	      var m = selectAll(sel, element.document || element.ownerDocument);
	      var i = m.length; // eslint-disable-next-line no-empty

	      while (--i >= 0 && m.item(i) !== element) {}

	      return i > -1;
	    };

	    return Matches.call(el, selector);
	  }; // Finds closest element matching selector. Returns `null` if not found

	  var closest = function closest(selector, root) {
	    if (!isElement(root)) {
	      return null;
	    } // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
	    // Since we dont support IE < 10, we can use the "Matches" version of the polyfill for speed
	    // Prefer native implementation over polyfill function


	    var Closest = Element.prototype.closest || function (sel)
	    /* istanbul ignore next */
	    {
	      var element = this;

	      if (!contains(document.documentElement, element)) {
	        return null;
	      }

	      do {
	        // Use our "patched" matches function
	        if (matches(element, sel)) {
	          return element;
	        }

	        element = element.parentElement;
	      } while (element !== null);

	      return null;
	    };

	    var el = Closest.call(root, selector); // Emulate jQuery closest and return `null` if match is the passed in element (root)

	    return el === root ? null : el;
	  }; // Returns true if the parent element contains the child element

	  var contains = function contains(parent, child) {
	    if (!parent || typeof parent.contains !== 'function') {
	      return false;
	    }

	    return parent.contains(child);
	  }; // Get an element given an ID

	  var getById = function getById(id) {
	    return document.getElementById(/^#/.test(id) ? id.slice(1) : id) || null;
	  }; // Add a class to an element

	  var addClass = function addClass(el, className) {
	    // We are checking for `el.classList` existence here since IE 11
	    // returns `undefined` for some elements (e.g. SVG elements)
	    // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713
	    if (className && isElement(el) && el.classList) {
	      el.classList.add(className);
	    }
	  }; // Remove a class from an element

	  var removeClass = function removeClass(el, className) {
	    // We are checking for `el.classList` existence here since IE 11
	    // returns `undefined` for some elements (e.g. SVG elements)
	    // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713
	    if (className && isElement(el) && el.classList) {
	      el.classList.remove(className);
	    }
	  }; // Test if an element has a class

	  var hasClass = function hasClass(el, className) {
	    // We are checking for `el.classList` existence here since IE 11
	    // returns `undefined` for some elements (e.g. SVG elements)
	    // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713
	    if (className && isElement(el) && el.classList) {
	      return el.classList.contains(className);
	    }

	    return false;
	  }; // Set an attribute on an element

	  var setAttr = function setAttr(el, attr, value) {
	    if (attr && isElement(el)) {
	      el.setAttribute(attr, value);
	    }
	  }; // Remove an attribute from an element

	  var removeAttr = function removeAttr(el, attr) {
	    if (attr && isElement(el)) {
	      el.removeAttribute(attr);
	    }
	  }; // Get an attribute value from an element (returns `null` if not found)

	  var getAttr = function getAttr(el, attr) {
	    if (attr && isElement(el)) {
	      return el.getAttribute(attr);
	    }

	    return null;
	  }; // Determine if an attribute exists on an element (returns `true`
	  // or `false`, or `null` if element not found)

	  var hasAttr = function hasAttr(el, attr) {
	    if (attr && isElement(el)) {
	      return el.hasAttribute(attr);
	    }

	    return null;
	  }; // Return the Bounding Client Rect of an element. Returns `null` if not an element

	  var getBCR = function getBCR(el) {
	    /* istanbul ignore next: getBoundingClientRect() doesn't work in JSDOM */
	    return isElement(el) ? el.getBoundingClientRect() : null;
	  }; // Get computed style object for an element

	  var getCS = function getCS(el) {
	    /* istanbul ignore next: getComputedStyle() doesn't work in JSDOM */
	    return isElement(el) ? window.getComputedStyle(el) : {};
	  }; // Return an element's offset with respect to document element
	  // https://j11y.io/jquery/#v=git&fn=jQuery.fn.offset

	  var offset = function offset(el)
	  /* istanbul ignore next: getBoundingClientRect(), getClientRects() doesn't work in JSDOM */
	  {
	    var _offset = {
	      top: 0,
	      left: 0
	    };

	    if (!isElement(el) || el.getClientRects().length === 0) {
	      return _offset;
	    }

	    var bcr = getBCR(el);

	    if (bcr) {
	      var win = el.ownerDocument.defaultView;
	      _offset.top = bcr.top + win.pageYOffset;
	      _offset.left = bcr.left + win.pageXOffset;
	    }

	    return _offset;
	  }; // Return an element's offset with respect to to it's offsetParent
	  // https://j11y.io/jquery/#v=git&fn=jQuery.fn.position

	  var position = function position(el)
	  /* istanbul ignore next: getBoundingClientRect() doesn't work in JSDOM */
	  {
	    var _offset = {
	      top: 0,
	      left: 0
	    };

	    if (!isElement(el)) {
	      return _offset;
	    }

	    var parentOffset = {
	      top: 0,
	      left: 0
	    };
	    var elStyles = getCS(el);

	    if (elStyles.position === 'fixed') {
	      _offset = getBCR(el) || _offset;
	    } else {
	      _offset = offset(el);
	      var doc = el.ownerDocument;
	      var offsetParent = el.offsetParent || doc.documentElement;

	      while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && getCS(offsetParent).position === 'static') {
	        offsetParent = offsetParent.parentNode;
	      }

	      if (offsetParent && offsetParent !== el && offsetParent.nodeType === Node.ELEMENT_NODE) {
	        parentOffset = offset(offsetParent);
	        var offsetParentStyles = getCS(offsetParent);
	        parentOffset.top += parseFloat(offsetParentStyles.borderTopWidth);
	        parentOffset.left += parseFloat(offsetParentStyles.borderLeftWidth);
	      }
	    }

	    return {
	      top: _offset.top - parentOffset.top - parseFloat(elStyles.marginTop),
	      left: _offset.left - parentOffset.left - parseFloat(elStyles.marginLeft)
	    };
	  }; // requestAnimationFrame convenience method
	  // We don't have a version for cancelAnimationFrame, but we don't call it anywhere

	  var requestAF = function requestAF(cb) {
	    var w = inBrowser ? window : {};

	    var rAF = w.requestAnimationFrame || w.webkitRequestAnimationFrame || w.mozRequestAnimationFrame || w.msRequestAnimationFrame || w.oRequestAnimationFrame || function (cb) {
	      // Fallback, but not a true polyfill.
	      // But all browsers we support (other than Opera Mini) support rAF
	      // without a polyfill.

	      /* istanbul ignore next */
	      return setTimeout(cb, 16);
	    };

	    return rAF(cb);
	  };

	  var btnProps = {
	    block: {
	      type: Boolean,
	      default: false
	    },
	    disabled: {
	      type: Boolean,
	      default: false
	    },
	    size: {
	      type: String,
	      default: null
	    },
	    variant: {
	      type: String,
	      default: null
	    },
	    type: {
	      type: String,
	      default: 'button'
	    },
	    tag: {
	      type: String,
	      default: 'button'
	    },
	    pressed: {
	      // tri-state prop: true, false or null
	      // => on, off, not a toggle
	      type: Boolean,
	      default: null
	    }
	  };
	  var linkProps$1 = propsFactory();
	  delete linkProps$1.href.default;
	  delete linkProps$1.to.default;
	  var linkPropKeys = keys(linkProps$1);
	  var props$4 = _objectSpread({}, linkProps$1, btnProps); // Focus handler for toggle buttons.  Needs class of 'focus' when focused.

	  function handleFocus(evt) {
	    if (evt.type === 'focusin') {
	      addClass(evt.target, 'focus');
	    } else if (evt.type === 'focusout') {
	      removeClass(evt.target, 'focus');
	    }
	  } // Helper functons to minimize runtime memory footprint when lots of buttons on page
	  // Is the requested button a link?


	  function isLink(props) {
	    // If tag prop is set to `a`, we use a b-link to get proper disabled handling
	    return Boolean(props.href || props.to || props.tag && String(props.tag).toLowerCase() === 'a');
	  } // Is the button to be a toggle button?


	  function isToggle(props) {
	    return typeof props.pressed === 'boolean';
	  } // Is the button "really" a button?


	  function isButton(props) {
	    if (isLink(props)) {
	      return false;
	    } else if (props.tag && String(props.tag).toLowerCase() !== 'button') {
	      return false;
	    }

	    return true;
	  } // Is the requested tag not a button or link?


	  function isNonStandardTag(props) {
	    return !isLink(props) && !isButton(props);
	  } // Compute required classes (non static classes)


	  function computeClass(props) {
	    var _ref;

	    return [props.variant ? "btn-".concat(props.variant) : "btn-secondary", (_ref = {}, _defineProperty(_ref, "btn-".concat(props.size), Boolean(props.size)), _defineProperty(_ref, 'btn-block', props.block), _defineProperty(_ref, "disabled", props.disabled), _defineProperty(_ref, "active", props.pressed), _ref)];
	  } // Compute the link props to pass to b-link (if required)


	  function computeLinkProps(props) {
	    return isLink(props) ? pluckProps(linkPropKeys, props) : null;
	  } // Compute the attributes for a button


	  function computeAttrs(props, data) {
	    var button = isButton(props);
	    var link = isLink(props);
	    var toggle = isToggle(props);
	    var nonStdTag = isNonStandardTag(props);
	    var role = data.attrs && data.attrs['role'] ? data.attrs['role'] : null;
	    var tabindex = data.attrs ? data.attrs['tabindex'] : null;

	    if (nonStdTag) {
	      tabindex = '0';
	    }

	    return {
	      // Type only used for "real" buttons
	      type: button && !link ? props.type : null,
	      // Disabled only set on "real" buttons
	      disabled: button ? props.disabled : null,
	      // We add a role of button when the tag is not a link or button for ARIA.
	      // Don't bork any role provided in data.attrs when isLink or isButton
	      role: nonStdTag ? 'button' : role,
	      // We set the aria-disabled state for non-standard tags
	      'aria-disabled': nonStdTag ? String(props.disabled) : null,
	      // For toggles, we need to set the pressed state for ARIA
	      'aria-pressed': toggle ? String(props.pressed) : null,
	      // autocomplete off is needed in toggle mode to prevent some browsers from
	      // remembering the previous setting when using the back button.
	      autocomplete: toggle ? 'off' : null,
	      // Tab index is used when the component is not a button.
	      // Links are tabbable, but don't allow disabled, while non buttons or links
	      // are not tabbable, so we mimic that functionality by disabling tabbing
	      // when disabled, and adding a tabindex of '0' to non buttons or non links.
	      tabindex: props.disabled && !button ? '-1' : tabindex
	    };
	  } // @vue/component


	  var BButton = {
	    name: 'BButton',
	    functional: true,
	    props: props$4,
	    render: function render(h, _ref2) {
	      var props = _ref2.props,
	          data = _ref2.data,
	          listeners = _ref2.listeners,
	          children = _ref2.children;
	      var toggle = isToggle(props);
	      var link = isLink(props);
	      var on = {
	        click: function click(e) {
	          if (props.disabled && e instanceof Event) {
	            e.stopPropagation();
	            e.preventDefault();
	          } else if (toggle && listeners && listeners['update:pressed']) {
	            // Send .sync updates to any "pressed" prop (if .sync listeners)
	            // Concat will normalize the value to an array
	            // without double wrapping an array value in an array.
	            concat(listeners['update:pressed']).forEach(function (fn) {
	              if (typeof fn === 'function') {
	                fn(!props.pressed);
	              }
	            });
	          }
	        }
	      };

	      if (toggle) {
	        on.focusin = handleFocus;
	        on.focusout = handleFocus;
	      }

	      var componentData = {
	        staticClass: 'btn',
	        class: computeClass(props),
	        props: computeLinkProps(props),
	        attrs: computeAttrs(props, data),
	        on: on
	      };
	      return h(link ? BLink : props.tag, mergeData(data, componentData), children);
	    }
	  };

	  var components$3 = {
	    BButton: BButton,
	    BBtn: BButton,
	    BButtonClose: BButtonClose,
	    BBtnClose: BButtonClose
	  };
	  var index$3 = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$3);
	    }
	  };

	  var props$5 = {
	    vertical: {
	      type: Boolean,
	      default: false
	    },
	    size: {
	      type: String,
	      default: null
	    },
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    ariaRole: {
	      type: String,
	      default: 'group'
	    } // @vue/component

	  };
	  var BButtonGroup = {
	    name: 'BButtonGroup',
	    functional: true,
	    props: props$5,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        class: _defineProperty({
	          'btn-group': !props.vertical,
	          'btn-group-vertical': props.vertical
	        }, "btn-group-".concat(props.size), Boolean(props.size)),
	        attrs: {
	          role: props.ariaRole
	        }
	      }), children);
	    }
	  };

	  var components$4 = {
	    BButtonGroup: BButtonGroup,
	    BBtnGroup: BButtonGroup
	  };
	  var index$4 = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$4);
	    }
	  };

	  /*
	   * Key Codes (events)
	   */
	  var KeyCodes = {
	    SPACE: 32,
	    ENTER: 13,
	    ESC: 27,
	    LEFT: 37,
	    UP: 38,
	    RIGHT: 39,
	    DOWN: 40,
	    PAGEUP: 33,
	    PAGEDOWN: 34,
	    HOME: 36,
	    END: 35,
	    TAB: 9,
	    SHIFT: 16,
	    CTRL: 17,
	    BACKSPACE: 8,
	    ALT: 18,
	    PAUSE: 19,
	    BREAK: 19,
	    INSERT: 45,
	    INS: 45,
	    DELETE: 46
	  };

	  var ITEM_SELECTOR = ['.btn:not(.disabled):not([disabled]):not(.dropdown-item)', '.form-control:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'input[type="checkbox"]:not(.disabled)', 'input[type="radio"]:not(.disabled)'].join(','); // @vue/component

	  var BButtonToolbar = {
	    name: 'BButtonToolbar',
	    props: {
	      justify: {
	        type: Boolean,
	        default: false
	      },
	      keyNav: {
	        type: Boolean,
	        default: false
	      }
	    },
	    computed: {
	      classObject: function classObject() {
	        return ['btn-toolbar', this.justify && !this.vertical ? 'justify-content-between' : ''];
	      }
	    },
	    mounted: function mounted() {
	      if (this.keyNav) {
	        // Pre-set the tabindexes if the markup does not include tabindex="-1" on the toolbar items
	        this.getItems();
	      }
	    },
	    methods: {
	      onFocusin: function onFocusin(evt) {
	        if (evt.target === this.$el) {
	          evt.preventDefault();
	          evt.stopPropagation();
	          this.focusFirst(evt);
	        }
	      },
	      onKeydown: function onKeydown(evt) {
	        if (!this.keyNav) {
	          return;
	        }

	        var key = evt.keyCode;
	        var shift = evt.shiftKey;

	        if (key === KeyCodes.UP || key === KeyCodes.LEFT) {
	          evt.preventDefault();
	          evt.stopPropagation();

	          if (shift) {
	            this.focusFirst(evt);
	          } else {
	            this.focusNext(evt, true);
	          }
	        } else if (key === KeyCodes.DOWN || key === KeyCodes.RIGHT) {
	          evt.preventDefault();
	          evt.stopPropagation();

	          if (shift) {
	            this.focusLast(evt);
	          } else {
	            this.focusNext(evt, false);
	          }
	        }
	      },
	      setItemFocus: function setItemFocus(item) {
	        this.$nextTick(function () {
	          item.focus();
	        });
	      },
	      focusNext: function focusNext(evt, prev) {
	        var items = this.getItems();

	        if (items.length < 1) {
	          return;
	        }

	        var index = items.indexOf(evt.target);

	        if (prev && index > 0) {
	          index--;
	        } else if (!prev && index < items.length - 1) {
	          index++;
	        }

	        if (index < 0) {
	          index = 0;
	        }

	        this.setItemFocus(items[index]);
	      },
	      focusFirst: function focusFirst(evt) {
	        var items = this.getItems();

	        if (items.length > 0) {
	          this.setItemFocus(items[0]);
	        }
	      },
	      focusLast: function focusLast(evt) {
	        var items = this.getItems();

	        if (items.length > 0) {
	          this.setItemFocus([items.length - 1]);
	        }
	      },
	      getItems: function getItems() {
	        var items = selectAll(ITEM_SELECTOR, this.$el);
	        items.forEach(function (item) {
	          // Ensure tabfocus is -1 on any new elements
	          item.tabIndex = -1;
	        });
	        return items.filter(function (el) {
	          return isVisible(el);
	        });
	      }
	    },
	    render: function render(h) {
	      return h('div', {
	        class: this.classObject,
	        attrs: {
	          role: 'toolbar',
	          tabindex: this.keyNav ? '0' : null
	        },
	        on: {
	          focusin: this.onFocusin,
	          keydown: this.onKeydown
	        }
	      }, [this.$slots.default]);
	    }
	  };

	  var components$5 = {
	    BButtonToolbar: BButtonToolbar,
	    BBtnToolbar: BButtonToolbar
	  };
	  var index$5 = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$5);
	    }
	  };

	  var props$6 = {
	    tag: {
	      type: String,
	      default: 'div'
	    } // @vue/component

	  };
	  var InputGroupText = {
	    name: 'BInputGroupText',
	    functional: true,
	    props: props$6,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        staticClass: 'input-group-text'
	      }), children);
	    }
	  };

	  var commonProps = {
	    id: {
	      type: String,
	      default: null
	    },
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    isText: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  };
	  var InputGroupAddon = {
	    name: 'BInputGroupAddon',
	    functional: true,
	    props: _objectSpread({}, commonProps, {
	      append: {
	        type: Boolean,
	        default: false
	      }
	    }),
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        class: {
	          'input-group-append': props.append,
	          'input-group-prepend': !props.append
	        },
	        attrs: {
	          id: props.id
	        }
	      }), props.isText ? [h(InputGroupText, children)] : children);
	    }
	  };

	  var InputGroupPrepend = {
	    name: 'BInputGroupPrepend',
	    functional: true,
	    props: commonProps,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      // pass all our props/attrs down to child, and set`append` to false
	      return h(InputGroupAddon, mergeData(data, {
	        props: _objectSpread({}, props, {
	          append: false
	        })
	      }), children);
	    }
	  };

	  var InputGroupAppend = {
	    name: 'BInputGroupAppend',
	    functional: true,
	    props: commonProps,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      // pass all our props/attrs down to child, and set`append` to true
	      return h(InputGroupAddon, mergeData(data, {
	        props: _objectSpread({}, props, {
	          append: true
	        })
	      }), children);
	    }
	  };

	  var props$7 = {
	    id: {
	      type: String
	    },
	    size: {
	      type: String
	    },
	    prepend: {
	      type: String
	    },
	    prependHTML: {
	      type: String
	    },
	    append: {
	      type: String
	    },
	    appendHTML: {
	      type: String
	    },
	    tag: {
	      type: String,
	      default: 'div'
	    } // @vue/component

	  };
	  var BInputGroup = {
	    name: 'BInputGroup',
	    functional: true,
	    props: props$7,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          slots = _ref.slots;
	      var $slots = slots();
	      var childNodes = []; // Prepend prop

	      if (props.prepend) {
	        childNodes.push(h(InputGroupPrepend, [h(InputGroupText, {
	          domProps: htmlOrText(props.prependHTML, props.prepend)
	        })]));
	      } else {
	        childNodes.push(h(false));
	      } // Prepend slot


	      if ($slots.prepend) {
	        childNodes.push(h(InputGroupPrepend, $slots.prepend));
	      } else {
	        childNodes.push(h(false));
	      } // Default slot


	      if ($slots.default) {
	        childNodes.push.apply(childNodes, _toConsumableArray($slots.default));
	      } else {
	        childNodes.push(h(false));
	      } // Append prop


	      if (props.append) {
	        childNodes.push(h(InputGroupAppend, [h(InputGroupText, {
	          domProps: htmlOrText(props.appendHTML, props.append)
	        })]));
	      } else {
	        childNodes.push(h(false));
	      } // Append slot


	      if ($slots.append) {
	        childNodes.push(h(InputGroupAppend, $slots.append));
	      } else {
	        childNodes.push(h(false));
	      }

	      return h(props.tag, mergeData(data, {
	        staticClass: 'input-group',
	        class: _defineProperty({}, "input-group-".concat(props.size), Boolean(props.size)),
	        attrs: {
	          id: props.id || null,
	          role: 'group'
	        }
	      }), childNodes);
	    }
	  };

	  var components$6 = {
	    BInputGroup: BInputGroup,
	    BInputGroupAddon: InputGroupAddon,
	    BInputGroupPrepend: InputGroupPrepend,
	    BInputGroupAppend: InputGroupAppend,
	    BInputGroupText: InputGroupText
	  };
	  var index$6 = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$6);
	    }
	  };

	  /**
	   * @param {string} str
	   */
	  function upperFirst(str) {
	    if (typeof str !== 'string') {
	      str = String(str);
	    }

	    return str.charAt(0).toUpperCase() + str.slice(1);
	  }

	  /**
	   * @param {string} prefix
	   * @param {string} value
	   */

	  function prefixPropName(prefix, value) {
	    return prefix + upperFirst(value);
	  }

	  /**
	   * @param {string} str
	   */
	  function lowerFirst(str) {
	    str = String(str);
	    return str.charAt(0).toLowerCase() + str.slice(1);
	  }

	  /**
	   * @param {string} prefix
	   * @param {string} value
	   */

	  function unPrefixPropName(prefix, value) {
	    return lowerFirst(value.replace(prefix, ''));
	  }

	  /**
	   * @param {[]|{}} props
	   * @param {Function} transformFn
	   */

	  function copyProps(props) {
	    var transformFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;

	    if (isArray(props)) {
	      return props.map(transformFn);
	    } // Props as an object.


	    var copied = {};

	    for (var prop in props) {
	      if (props.hasOwnProperty(prop)) {
	        if (_typeof(prop) === 'object') {
	          copied[transformFn(prop)] = _objectSpread({}, props[prop]);
	        } else {
	          copied[transformFn(prop)] = props[prop];
	        }
	      }
	    }

	    return copied;
	  }

	  // @vue/component
	  var cardMixin = {
	    props: {
	      tag: {
	        type: String,
	        default: 'div'
	      },
	      bgVariant: {
	        type: String,
	        default: null
	      },
	      borderVariant: {
	        type: String,
	        default: null
	      },
	      textVariant: {
	        type: String,
	        default: null
	      }
	    }
	  };

	  var props$8 = {
	    title: {
	      type: String,
	      default: ''
	    },
	    titleTag: {
	      type: String,
	      default: 'h4'
	    } // @vue/component

	  };
	  var BCardTitle = {
	    name: 'BCardTitle',
	    functional: true,
	    props: props$8,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.titleTag, mergeData(data, {
	        staticClass: 'card-title'
	      }), children || props.title);
	    }
	  };

	  var props$9 = {
	    subTitle: {
	      type: String,
	      default: ''
	    },
	    subTitleTag: {
	      type: String,
	      default: 'h6'
	    },
	    subTitleTextVariant: {
	      type: String,
	      default: 'muted'
	    } // @vue/component

	  };
	  var BCardSubTitle = {
	    name: 'BCardSubTitle',
	    functional: true,
	    props: props$9,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.subTitleTag, mergeData(data, {
	        staticClass: 'card-subtitle',
	        class: [props.subTitleTextVariant ? "text-".concat(props.subTitleTextVariant) : null]
	      }), children || props.subTitle);
	    }
	  };

	  var props$a = _objectSpread({}, copyProps(cardMixin.props, prefixPropName.bind(null, 'body')), {
	    bodyClass: {
	      type: [String, Object, Array],
	      default: null
	    }
	  }, props$8, props$9, {
	    overlay: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  });
	  var BCardBody = {
	    name: 'BCardBody',
	    functional: true,
	    props: props$a,
	    render: function render(h, _ref) {
	      var _ref2;

	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var cardTitle = h(false);
	      var cardSubTitle = h(false);
	      var cardContent = children || [h(false)];

	      if (props.title) {
	        cardTitle = h(BCardTitle, {
	          props: pluckProps(props$8, props)
	        });
	      }

	      if (props.subTitle) {
	        cardSubTitle = h(BCardSubTitle, {
	          props: pluckProps(props$9, props),
	          class: ['mb-2']
	        });
	      }

	      return h(props.bodyTag, mergeData(data, {
	        staticClass: 'card-body',
	        class: [(_ref2 = {
	          'card-img-overlay': props.overlay
	        }, _defineProperty(_ref2, "bg-".concat(props.bodyBgVariant), Boolean(props.bodyBgVariant)), _defineProperty(_ref2, "border-".concat(props.bodyBorderVariant), Boolean(props.bodyBorderVariant)), _defineProperty(_ref2, "text-".concat(props.bodyTextVariant), Boolean(props.bodyTextVariant)), _ref2), props.bodyClass || {}]
	      }), [cardTitle, cardSubTitle].concat(_toConsumableArray(cardContent)));
	    }
	  };

	  var props$b = _objectSpread({}, copyProps(cardMixin.props, prefixPropName.bind(null, 'header')), {
	    header: {
	      type: String,
	      default: null
	    },
	    headerHtml: {
	      type: String,
	      default: null
	    },
	    headerClass: {
	      type: [String, Object, Array],
	      default: null
	    } // @vue/component

	  });
	  var BCardHeader = {
	    name: 'BCardHeader',
	    functional: true,
	    props: props$b,
	    render: function render(h, _ref) {
	      var _ref2;

	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.headerTag, mergeData(data, {
	        staticClass: 'card-header',
	        class: [props.headerClass, (_ref2 = {}, _defineProperty(_ref2, "bg-".concat(props.headerBgVariant), Boolean(props.headerBgVariant)), _defineProperty(_ref2, "border-".concat(props.headerBorderVariant), Boolean(props.headerBorderVariant)), _defineProperty(_ref2, "text-".concat(props.headerTextVariant), Boolean(props.headerTextVariant)), _ref2)]
	      }), children || [h('div', {
	        domProps: htmlOrText(props.headerHtml, props.header)
	      })]);
	    }
	  };

	  var props$c = _objectSpread({}, copyProps(cardMixin.props, prefixPropName.bind(null, 'footer')), {
	    footer: {
	      type: String,
	      default: null
	    },
	    footerHtml: {
	      type: String,
	      default: null
	    },
	    footerClass: {
	      type: [String, Object, Array],
	      default: null
	    } // @vue/component

	  });
	  var BCardFooter = {
	    name: 'BCardFooter',
	    functional: true,
	    props: props$c,
	    render: function render(h, _ref) {
	      var _ref2;

	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.footerTag, mergeData(data, {
	        staticClass: 'card-footer',
	        class: [props.footerClass, (_ref2 = {}, _defineProperty(_ref2, "bg-".concat(props.footerBgVariant), Boolean(props.footerBgVariant)), _defineProperty(_ref2, "border-".concat(props.footerBorderVariant), Boolean(props.footerBorderVariant)), _defineProperty(_ref2, "text-".concat(props.footerTextVariant), Boolean(props.footerTextVariant)), _ref2)]
	      }), children || [h('div', {
	        domProps: htmlOrText(props.footerHtml, props.footer)
	      })]);
	    }
	  };

	  var props$d = {
	    src: {
	      type: String,
	      default: null,
	      required: true
	    },
	    alt: {
	      type: String,
	      default: null
	    },
	    top: {
	      type: Boolean,
	      default: false
	    },
	    bottom: {
	      type: Boolean,
	      default: false
	    },
	    left: {
	      type: Boolean,
	      default: false
	    },
	    start: {
	      type: Boolean,
	      default: false // alias of 'left'

	    },
	    right: {
	      type: Boolean,
	      default: false
	    },
	    end: {
	      type: Boolean,
	      default: false // alias of 'right'

	    },
	    height: {
	      type: String,
	      default: null
	    },
	    width: {
	      type: String,
	      default: null
	    } // @vue/component

	  };
	  var BCardImg = {
	    name: 'BCardImg',
	    functional: true,
	    props: props$d,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data;
	      var baseClass = 'card-img';

	      if (props.top) {
	        baseClass += '-top';
	      } else if (props.right || props.end) {
	        baseClass += '-right';
	      } else if (props.bottom) {
	        baseClass += '-bottom';
	      } else if (props.left || props.start) {
	        baseClass += '-left';
	      }

	      return h('img', mergeData(data, {
	        class: [baseClass],
	        attrs: {
	          src: props.src,
	          alt: props.alt,
	          height: props.height,
	          width: props.width
	        }
	      }));
	    }
	  };

	  var cardImgProps = copyProps(props$d, prefixPropName.bind(null, 'img'));
	  cardImgProps.imgSrc.required = false;
	  var props$e = _objectSpread({}, props$a, props$b, props$c, cardImgProps, copyProps(cardMixin.props), {
	    align: {
	      type: String,
	      default: null
	    },
	    noBody: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  });
	  var BCard = {
	    name: 'BCard',
	    functional: true,
	    props: props$e,
	    render: function render(h, _ref) {
	      var _class;

	      var props = _ref.props,
	          data = _ref.data,
	          slots = _ref.slots;
	      var $slots = slots(); // Create placeholder elements for each section

	      var imgFirst = h(false);
	      var header = h(false);
	      var content = h(false);
	      var footer = h(false);
	      var imgLast = h(false);

	      if (props.imgSrc) {
	        var img = h(BCardImg, {
	          props: pluckProps(cardImgProps, props, unPrefixPropName.bind(null, 'img'))
	        });

	        if (props.imgBottom) {
	          imgLast = img;
	        } else {
	          imgFirst = img;
	        }
	      }

	      if (props.header || $slots.header) {
	        header = h(BCardHeader, {
	          props: pluckProps(props$b, props)
	        }, $slots.header);
	      }

	      if (props.noBody) {
	        content = $slots.default || [];
	      } else {
	        // Wrap content in card-body
	        content = [h(BCardBody, {
	          props: pluckProps(props$a, props)
	        }, $slots.default)];
	      }

	      if (props.footer || $slots.footer) {
	        footer = h(BCardFooter, {
	          props: pluckProps(props$c, props)
	        }, $slots.footer);
	      }

	      return h(props.tag, mergeData(data, {
	        staticClass: 'card',
	        class: (_class = {
	          'flex-row': props.imgLeft || props.imgStart,
	          'flex-row-reverse': (props.imgRight || props.imgEnd) && !(props.imgLeft || props.imgStart)
	        }, _defineProperty(_class, "text-".concat(props.align), Boolean(props.align)), _defineProperty(_class, "bg-".concat(props.bgVariant), Boolean(props.bgVariant)), _defineProperty(_class, "border-".concat(props.borderVariant), Boolean(props.borderVariant)), _defineProperty(_class, "text-".concat(props.textVariant), Boolean(props.textVariant)), _class)
	      }), [imgFirst, header].concat(_toConsumableArray(content), [footer, imgLast]));
	    }
	  };

	  var BLANK_TEMPLATE = '<svg width="%{w}" height="%{h}" ' + 'xmlns="http://www.w3.org/2000/svg" ' + 'viewBox="0 0 %{w} %{h}" preserveAspectRatio="none">' + '<rect width="100%" height="100%" style="fill:%{f};"></rect>' + '</svg>';

	  function makeBlankImgSrc(width, height, color) {
	    var src = encodeURIComponent(BLANK_TEMPLATE.replace('%{w}', String(width)).replace('%{h}', String(height)).replace('%{f}', color));
	    return "data:image/svg+xml;charset=UTF-8,".concat(src);
	  }

	  var props$f = {
	    src: {
	      type: String,
	      default: null
	    },
	    alt: {
	      type: String,
	      default: null
	    },
	    width: {
	      type: [Number, String],
	      default: null
	    },
	    height: {
	      type: [Number, String],
	      default: null
	    },
	    block: {
	      type: Boolean,
	      default: false
	    },
	    fluid: {
	      type: Boolean,
	      default: false
	    },
	    fluidGrow: {
	      // Gives fluid images class `w-100` to make them grow to fit container
	      type: Boolean,
	      default: false
	    },
	    rounded: {
	      // rounded can be:
	      //   false: no rounding of corners
	      //   true: slightly rounded corners
	      //   'top': top corners rounded
	      //   'right': right corners rounded
	      //   'bottom': bottom corners rounded
	      //   'left': left corners rounded
	      //   'circle': circle/oval
	      //   '0': force rounding off
	      type: [Boolean, String],
	      default: false
	    },
	    thumbnail: {
	      type: Boolean,
	      default: false
	    },
	    left: {
	      type: Boolean,
	      default: false
	    },
	    right: {
	      type: Boolean,
	      default: false
	    },
	    center: {
	      type: Boolean,
	      default: false
	    },
	    blank: {
	      type: Boolean,
	      default: false
	    },
	    blankColor: {
	      type: String,
	      default: 'transparent'
	    } // @vue/component

	  };
	  var BImg = {
	    name: 'BImg',
	    functional: true,
	    props: props$f,
	    render: function render(h, _ref) {
	      var _class;

	      var props = _ref.props,
	          data = _ref.data;
	      var src = props.src;
	      var width = parseInt(props.width, 10) ? parseInt(props.width, 10) : null;
	      var height = parseInt(props.height, 10) ? parseInt(props.height, 10) : null;
	      var align = null;
	      var block = props.block;

	      if (props.blank) {
	        if (!height && Boolean(width)) {
	          height = width;
	        } else if (!width && Boolean(height)) {
	          width = height;
	        }

	        if (!width && !height) {
	          width = 1;
	          height = 1;
	        } // Make a blank SVG image


	        src = makeBlankImgSrc(width, height, props.blankColor || 'transparent');
	      }

	      if (props.left) {
	        align = 'float-left';
	      } else if (props.right) {
	        align = 'float-right';
	      } else if (props.center) {
	        align = 'mx-auto';
	        block = true;
	      }

	      return h('img', mergeData(data, {
	        attrs: {
	          src: src,
	          alt: props.alt,
	          width: width ? String(width) : null,
	          height: height ? String(height) : null
	        },
	        class: (_class = {
	          'img-thumbnail': props.thumbnail,
	          'img-fluid': props.fluid || props.fluidGrow,
	          'w-100': props.fluidGrow,
	          rounded: props.rounded === '' || props.rounded === true
	        }, _defineProperty(_class, "rounded-".concat(props.rounded), typeof props.rounded === 'string' && props.rounded !== ''), _defineProperty(_class, align, Boolean(align)), _defineProperty(_class, 'd-block', block), _class)
	      }));
	    }
	  };

	  var THROTTLE = 100;
	  var EventOptions = {
	    passive: true,
	    capture: false // @vue/component

	  };
	  var BImgLazy = {
	    name: 'BImgLazy',
	    components: {
	      BImg: BImg
	    },
	    props: {
	      src: {
	        type: String,
	        default: null,
	        required: true
	      },
	      alt: {
	        type: String,
	        default: null
	      },
	      width: {
	        type: [Number, String],
	        default: null
	      },
	      height: {
	        type: [Number, String],
	        default: null
	      },
	      blankSrc: {
	        // If null, a blank image is generated
	        type: String,
	        default: null
	      },
	      blankColor: {
	        type: String,
	        default: 'transparent'
	      },
	      blankWidth: {
	        type: [Number, String],
	        default: null
	      },
	      blankHeight: {
	        type: [Number, String],
	        default: null
	      },
	      show: {
	        type: Boolean,
	        default: false
	      },
	      fluid: {
	        type: Boolean,
	        default: false
	      },
	      fluidGrow: {
	        type: Boolean,
	        default: false
	      },
	      block: {
	        type: Boolean,
	        default: false
	      },
	      thumbnail: {
	        type: Boolean,
	        default: false
	      },
	      rounded: {
	        type: [Boolean, String],
	        default: false
	      },
	      left: {
	        type: Boolean,
	        default: false
	      },
	      right: {
	        type: Boolean,
	        default: false
	      },
	      center: {
	        type: Boolean,
	        default: false
	      },
	      offset: {
	        type: [Number, String],
	        default: 360
	      },
	      throttle: {
	        type: [Number, String],
	        default: THROTTLE
	      }
	    },
	    data: function data() {
	      return {
	        isShown: false,
	        scrollTimeout: null
	      };
	    },
	    computed: {
	      computedSrc: function computedSrc() {
	        return !this.blankSrc || this.isShown ? this.src : this.blankSrc;
	      },
	      computedBlank: function computedBlank() {
	        return !(this.isShown || this.blankSrc);
	      },
	      computedWidth: function computedWidth() {
	        return this.isShown ? this.width : this.blankWidth || this.width;
	      },
	      computedHeight: function computedHeight() {
	        return this.isShown ? this.height : this.blankHeight || this.height;
	      }
	    },
	    watch: {
	      show: function show(newVal, oldVal) {
	        if (newVal !== oldVal) {
	          this.isShown = newVal;

	          if (!newVal) {
	            // Make sure listeners are re-enabled if img is force set to blank
	            this.setListeners(true);
	          }
	        }
	      },
	      isShown: function isShown(newVal, oldVal) {
	        if (newVal !== oldVal) {
	          // Update synched show prop
	          this.$emit('update:show', newVal);
	        }
	      }
	    },
	    created: function created() {
	      this.isShown = this.show;
	    },
	    mounted: function mounted() {
	      if (this.isShown) {
	        this.setListeners(false);
	      } else {
	        this.setListeners(true);
	        this.$nextTick(this.checkView);
	      }
	    },
	    activated: function activated() {
	      /* istanbul ignore if */
	      if (!this.isShown) {
	        this.setListeners(true);
	        this.$nextTick(this.checkView);
	      }
	    },
	    deactivated: function deactivated() {
	      /* istanbul ignore next */
	      this.setListeners(false);
	    },
	    beforeDestroy: function beforeDestroy() {
	      /* istanbul ignore next */
	      this.setListeners(false);
	    },
	    methods: {
	      setListeners: function setListeners(on) {
	        clearTimeout(this.scrollTimer);
	        this.scrollTimeout = null;
	        var root = window;

	        if (on) {
	          eventOn(this.$el, 'load', this.checkView);
	          eventOn(root, 'scroll', this.onScroll, EventOptions);
	          eventOn(root, 'resize', this.onScroll, EventOptions);
	          eventOn(root, 'orientationchange', this.onScroll, EventOptions);
	          eventOn(document, 'transitionend', this.onScroll, EventOptions);
	        } else {
	          eventOff(this.$el, 'load', this.checkView);
	          eventOff(root, 'scroll', this.onScroll, EventOptions);
	          eventOff(root, 'resize', this.onScroll, EventOptions);
	          eventOff(root, 'orientationchange', this.onScroll, EventOptions);
	          eventOff(document, 'transitionend', this.onScroll, EventOptions);
	        }
	      },
	      checkView: function checkView()
	      /* istanbul ignore next: can't test getBoundingClientRect in JSDOM */
	      {
	        // check bounding box + offset to see if we should show
	        if (this.isShown) {
	          this.setListeners(false);
	          return;
	        }

	        var offset = parseInt(this.offset, 10) || 0;
	        var docElement = document.documentElement;
	        var view = {
	          l: 0 - offset,
	          t: 0 - offset,
	          b: docElement.clientHeight + offset,
	          r: docElement.clientWidth + offset
	          /* istanbul ignore next */

	        };
	        var box = getBCR(this.$el);
	        /* istanbul ignore if */

	        if (box.right >= view.l && box.bottom >= view.t && box.left <= view.r && box.top <= view.b) {
	          // image is in view (or about to be in view)
	          this.isShown = true;
	          this.setListeners(false);
	        }
	      },
	      onScroll: function onScroll() {
	        if (this.isShown) {
	          this.setListeners(false);
	        } else {
	          clearTimeout(this.scrollTimeout);
	          this.scrollTimeout = setTimeout(this.checkView, parseInt(this.throttle, 10) || THROTTLE);
	        }
	      }
	    },
	    render: function render(h) {
	      return h('b-img', {
	        props: {
	          src: this.computedSrc,
	          alt: this.alt,
	          blank: this.computedBlank,
	          blankColor: this.blankColor,
	          width: this.computedWidth,
	          height: this.computedHeight,
	          fluid: this.fluid,
	          fluidGrow: this.fluidGrow,
	          block: this.block,
	          thumbnail: this.thumbnail,
	          rounded: this.rounded,
	          left: this.left,
	          right: this.right,
	          center: this.center
	        }
	      });
	    }
	  };

	  // The `omit()` util creates a new object, so we can just pass the original props

	  var lazyProps = omit(BImgLazy.props, ['left', 'right', 'center', 'block', 'rounded', 'thumbnail', 'fluid', 'fluidGrow']);
	  var props$g = _objectSpread({}, lazyProps, {
	    top: {
	      type: Boolean,
	      default: false
	    },
	    bottom: {
	      type: Boolean,
	      default: false
	    },
	    left: {
	      type: Boolean,
	      default: false
	    },
	    start: {
	      type: Boolean,
	      default: false // alias of 'left'

	    },
	    right: {
	      type: Boolean,
	      default: false
	    },
	    end: {
	      type: Boolean,
	      default: false // alias of 'right'

	    } // @vue/component

	  });
	  var BCardImgLazy = {
	    name: 'BCardImgLazy',
	    functional: true,
	    props: props$g,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data;
	      var baseClass = 'card-img';

	      if (props.top) {
	        baseClass += '-top';
	      } else if (props.right || props.end) {
	        baseClass += '-right';
	      } else if (props.bottom) {
	        baseClass += '-bottom';
	      } else if (props.left || props.start) {
	        baseClass += '-left';
	      } // False out the left/center/right props before passing to b-img-lazy


	      var lazyProps = _objectSpread({}, props, {
	        left: false,
	        right: false,
	        center: false
	      });

	      return h(BImgLazy, mergeData(data, {
	        class: [baseClass],
	        props: lazyProps
	      }));
	    }
	  };

	  var props$h = {
	    textTag: {
	      type: String,
	      default: 'p'
	    } // @vue/component

	  };
	  var BCardText = {
	    name: 'BCardText',
	    functional: true,
	    props: props$h,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.textTag, mergeData(data, {
	        staticClass: 'card-text'
	      }), children);
	    }
	  };

	  var props$i = {
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    deck: {
	      type: Boolean,
	      default: false
	    },
	    columns: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  };
	  var BCardGroup = {
	    name: 'BCardGroup',
	    functional: true,
	    props: props$i,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var baseClass = 'card-group';

	      if (props.deck) {
	        baseClass = 'card-deck';
	      } else if (props.columns) {
	        baseClass = 'card-columns';
	      }

	      return h(props.tag, mergeData(data, {
	        class: baseClass
	      }), children);
	    }
	  };

	  var components$7 = {
	    BCard: BCard,
	    BCardHeader: BCardHeader,
	    BCardBody: BCardBody,
	    BCardTitle: BCardTitle,
	    BCardSubTitle: BCardSubTitle,
	    BCardFooter: BCardFooter,
	    BCardImg: BCardImg,
	    BCardImgLazy: BCardImgLazy,
	    BCardText: BCardText,
	    BCardGroup: BCardGroup
	  };
	  var index$7 = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$7);
	    }
	  };

	  // Emulate observer disconnect() method so that we can detach the events later

	  function fakeObserverFactory(el, callback)
	  /* istanbul ignore next: hard to test in JSDOM */
	  {
	    eventOn(el, 'DOMNodeInserted', callback, false);
	    eventOn(el, 'DOMNodeRemoved', callback, false);
	    return {
	      disconnect: function disconnect() {
	        eventOff(el, 'DOMNodeInserted', callback, false);
	        eventOff(el, 'DOMNodeRemoved', callback, false);
	      }
	    };
	  }
	  /**
	   * Observe a DOM element changes, falls back to eventListener mode
	   * @param {Element} el The DOM element to observe
	   * @param {Function} callback callback to be called on change
	   * @param {object} [opts={childList: true, subtree: true}] observe options
	   * @see http://stackoverflow.com/questions/3219758
	   */


	  function observeDOM(el, callback, opts)
	  /* istanbul ignore next: difficult to test in JSDOM */
	  {
	    var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
	    var eventListenerSupported = window.addEventListener; // Handle case where we might be passed a vue instance

	    el = el ? el.$el || el : null;
	    /* istanbul ignore next: dificult to test in JSDOM */

	    if (!isElement(el)) {
	      // We can't observe somthing that isn't an element
	      return null;
	    }

	    var obs = null;

	    if (MutationObserver) {
	      // Define a new observer
	      obs = new MutationObserver(function (mutations) {
	        var changed = false; // A Mutation can contain several change records, so we loop through them to see what has changed.
	        // We break out of the loop early if any "significant" change has been detected

	        for (var i = 0; i < mutations.length && !changed; i++) {
	          // The muttion record
	          var mutation = mutations[i]; // Mutation Type

	          var type = mutation.type; // DOM Node (could be any DOM Node type - HTMLElement, Text, comment, etc)

	          var target = mutation.target;

	          if (type === 'characterData' && target.nodeType === Node.TEXT_NODE) {
	            // We ignore nodes that are not TEXT (i.e. comments, etc) as they don't change layout
	            changed = true;
	          } else if (type === 'attributes') {
	            changed = true;
	          } else if (type === 'childList' && (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)) {
	            // This includes HTMLElement and Text Nodes being added/removed/re-arranged
	            changed = true;
	          }
	        }

	        if (changed) {
	          // We only call the callback if a change that could affect layout/size truely happened.
	          callback();
	        }
	      }); // Have the observer observe foo for changes in children, etc

	      obs.observe(el, _objectSpread({
	        childList: true,
	        subtree: true
	      }, opts));
	    } else if (eventListenerSupported) {
	      // Legacy interface. most likely not used in modern browsers
	      obs = fakeObserverFactory(el, callback);
	    } // We return a reference to the observer so that obs.disconnect() can be called if necessary
	    // To reduce overhead when the root element is hiiden


	    return obs;
	  }

	  /*
	   * SSR Safe Client Side ID attribute generation
	   * id's can only be generated client side, after mount.
	   * this._uid is not synched between server and client.
	   */
	  // @vue/component
	  var idMixin = {
	    props: {
	      id: {
	        type: String,
	        default: null
	      }
	    },
	    data: function data() {
	      return {
	        localId_: null
	      };
	    },
	    computed: {
	      safeId: function safeId() {
	        // Computed property that returns a dynamic function for creating the ID.
	        // Reacts to changes in both .id and .localId_ And regens a new function
	        var id = this.id || this.localId_; // We return a function that accepts an optional suffix string
	        // So this computed prop looks and works like a method!!!

	        var fn = function fn(suffix) {
	          if (!id) {
	            return null;
	          }

	          suffix = String(suffix || '').replace(/\s+/g, '_');
	          return suffix ? id + '_' + suffix : id;
	        };

	        return fn;
	      }
	    },
	    mounted: function mounted() {
	      var _this = this;

	      // mounted only occurs client side
	      this.$nextTick(function () {
	        // Update dom with auto ID after dom loaded to prevent
	        // SSR hydration errors.
	        _this.localId_ = "__BVID__".concat(_this._uid);
	      });
	    }
	  };

	  var DIRECTION = {
	    next: {
	      dirClass: 'carousel-item-left',
	      overlayClass: 'carousel-item-next'
	    },
	    prev: {
	      dirClass: 'carousel-item-right',
	      overlayClass: 'carousel-item-prev'
	    } // Fallback Transition duration (with a little buffer) in ms

	  };
	  var TRANS_DURATION = 600 + 50; // Time for mouse compat events to fire after touch

	  var TOUCHEVENT_COMPAT_WAIT = 500; // Number of pixels to consider touch move a swipe

	  var SWIPE_THRESHOLD = 40; // PointerEvent pointer types

	  var PointerType = {
	    TOUCH: 'touch',
	    PEN: 'pen' // Transition Event names

	  };
	  var TransitionEndEvents = {
	    WebkitTransition: 'webkitTransitionEnd',
	    MozTransition: 'transitionend',
	    OTransition: 'otransitionend oTransitionEnd',
	    transition: 'transitionend'
	  };
	  var EventOptions$1 = {
	    passive: true,
	    capture: false // Return the browser specific transitionEnd event name

	  };

	  function getTransisionEndEvent(el) {
	    for (var name in TransitionEndEvents) {
	      if (el.style[name] !== undefined) {
	        /* istanbul ignore next: JSDOM doesn't support transition events */
	        return TransitionEndEvents[name];
	      }
	    } // fallback


	    return null;
	  } // @vue/component


	  var BCarousel = {
	    name: 'BCarousel',
	    mixins: [idMixin],
	    provide: function provide() {
	      return {
	        bvCarousel: this
	      };
	    },
	    props: {
	      labelPrev: {
	        type: String,
	        default: 'Previous Slide'
	      },
	      labelNext: {
	        type: String,
	        default: 'Next Slide'
	      },
	      labelGotoSlide: {
	        type: String,
	        default: 'Goto Slide'
	      },
	      labelIndicators: {
	        type: String,
	        default: 'Select a slide to display'
	      },
	      interval: {
	        type: Number,
	        default: 5000
	      },
	      indicators: {
	        type: Boolean,
	        default: false
	      },
	      controls: {
	        type: Boolean,
	        default: false
	      },
	      noAnimation: {
	        // Disable slide/fade animation
	        type: Boolean,
	        default: false
	      },
	      fade: {
	        // Enable cross-fade animation instead of slide animation
	        type: Boolean,
	        default: false
	      },
	      noTouch: {
	        // Sniffed by carousel-slide
	        type: Boolean,
	        default: false
	      },
	      imgWidth: {
	        // Sniffed by carousel-slide
	        type: [Number, String] // default: undefined

	      },
	      imgHeight: {
	        // Sniffed by carousel-slide
	        type: [Number, String] // default: undefined

	      },
	      background: {
	        type: String // default: undefined

	      },
	      value: {
	        type: Number,
	        default: 0
	      }
	    },
	    data: function data() {
	      return {
	        index: this.value || 0,
	        isSliding: false,
	        transitionEndEvent: null,
	        slides: [],
	        direction: null,
	        isPaused: false,
	        // Touch event handling values
	        touchStartX: 0,
	        touchDeltaX: 0
	      };
	    },
	    watch: {
	      value: function value(newVal, oldVal) {
	        if (newVal !== oldVal) {
	          this.setSlide(newVal);
	        }
	      },
	      interval: function interval(newVal, oldVal) {
	        if (newVal === oldVal) {
	          return;
	        }

	        if (!newVal) {
	          // Pausing slide show
	          this.pause(false);
	        } else {
	          // Restarting or Changing interval
	          this.pause(true);
	          this.start(false);
	        }
	      },
	      isPaused: function isPaused(newVal, oldVal) {
	        if (newVal !== oldVal) {
	          this.$emit(newVal ? 'paused' : 'unpaused');
	        }
	      },
	      index: function index(to, from) {
	        if (to === from || this.isSliding) {
	          return;
	        }

	        this.doSlide(to, from);
	      }
	    },
	    created: function created() {
	      // Create private non-reactive props
	      this._intervalId = null;
	      this._animationTimeout = null;
	      this._touchTimeout = null;
	    },
	    mounted: function mounted() {
	      // Cache current browser transitionend event name
	      this.transitionEndEvent = getTransisionEndEvent(this.$el) || null; // Get all slides

	      this.updateSlides(); // Observe child changes so we can update slide list

	      observeDOM(this.$refs.inner, this.updateSlides.bind(this), {
	        subtree: false,
	        childList: true,
	        attributes: true,
	        attributeFilter: ['id']
	      });
	    },
	    beforeDestroy: function beforeDestroy()
	    /* istanbul ignore next: dificult to test */
	    {
	      clearTimeout(this._animationTimeout);
	      clearTimeout(this._touchTimeout);
	      clearInterval(this._intervalId);
	      this._intervalId = null;
	      this._animationTimeout = null;
	      this._touchTimeout = null;
	    },
	    methods: {
	      // Set slide
	      setSlide: function setSlide(slide) {
	        var _this = this;

	        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

	        // Don't animate when page is not visible

	        /* istanbul ignore if: dificult to test */
	        if (inBrowser && document.visibilityState && document.hidden) {
	          return;
	        }

	        var len = this.slides.length; // Don't do anything if nothing to slide to

	        if (len === 0) {
	          return;
	        } // Don't change slide while transitioning, wait until transition is done


	        if (this.isSliding) {
	          // Schedule slide after sliding complete
	          this.$once('sliding-end', function () {
	            return _this.setSlide(slide, direction);
	          });
	          return;
	        }

	        this.direction = direction; // Make sure we have an integer (you never know!)

	        slide = Math.floor(slide); // Set new slide index. Wrap around if necessary

	        this.index = slide >= len ? 0 : slide >= 0 ? slide : len - 1;
	      },
	      // Previous slide
	      prev: function prev() {
	        this.setSlide(this.index - 1, 'prev');
	      },
	      // Next slide
	      next: function next() {
	        this.setSlide(this.index + 1, 'next');
	      },
	      // Pause auto rotation
	      pause: function pause(evt) {
	        if (!evt) {
	          this.isPaused = true;
	        }

	        if (this._intervalId) {
	          clearInterval(this._intervalId);
	          this._intervalId = null;
	        }
	      },
	      // Start auto rotate slides
	      start: function start(evt) {
	        if (!evt) {
	          this.isPaused = false;
	        }

	        if (this._intervalId) {
	          clearInterval(this._intervalId);
	          this._intervalId = null;
	        } // Don't start if no interval, or less than 2 slides


	        if (this.interval && this.slides.length > 1) {
	          this._intervalId = setInterval(this.next, Math.max(1000, this.interval));
	        }
	      },
	      // Re-Start auto rotate slides when focus/hover leaves the carousel
	      restart: function restart(evt) {
	        /* istanbul ignore if: dificult to test */
	        if (!this.$el.contains(document.activeElement)) {
	          this.start();
	        }
	      },
	      doSlide: function doSlide(to, from) {
	        var _this2 = this;

	        var isCycling = Boolean(this.interval); // Determine sliding direction

	        var direction = this.calcDirection(this.direction, from, to);
	        var overlayClass = direction.overlayClass;
	        var dirClass = direction.dirClass; // Determine current and next slides

	        var currentSlide = this.slides[from];
	        var nextSlide = this.slides[to]; // Don't do anything if there aren't any slides to slide to

	        if (!currentSlide || !nextSlide) {
	          return;
	        } // Start animating


	        this.isSliding = true;

	        if (isCycling) {
	          this.pause(false);
	        }

	        this.$emit('sliding-start', to); // Update v-model

	        this.$emit('input', this.index);

	        if (this.noAnimation) {
	          addClass(nextSlide, 'active');
	          removeClass(currentSlide, 'active');
	          this.isSliding = false; // Notify ourselves that we're done sliding (slid)

	          this.$nextTick(function () {
	            return _this2.$emit('sliding-end', to);
	          });
	        } else {
	          addClass(nextSlide, overlayClass); // Trigger a reflow of next slide

	          reflow(nextSlide);
	          addClass(currentSlide, dirClass);
	          addClass(nextSlide, dirClass); // Transition End handler

	          var called = false;
	          /* istanbul ignore next: dificult to test */

	          var onceTransEnd = function onceTransEnd(evt) {
	            if (called) {
	              return;
	            }

	            called = true;
	            /* istanbul ignore if: transition events cant be tested in JSDOM */

	            if (_this2.transitionEndEvent) {
	              var events = _this2.transitionEndEvent.split(/\s+/);

	              events.forEach(function (evt) {
	                return eventOff(currentSlide, evt, onceTransEnd, EventOptions$1);
	              });
	            }

	            _this2._animationTimeout = null;
	            removeClass(nextSlide, dirClass);
	            removeClass(nextSlide, overlayClass);
	            addClass(nextSlide, 'active');
	            removeClass(currentSlide, 'active');
	            removeClass(currentSlide, dirClass);
	            removeClass(currentSlide, overlayClass);
	            setAttr(currentSlide, 'aria-current', 'false');
	            setAttr(nextSlide, 'aria-current', 'true');
	            setAttr(currentSlide, 'aria-hidden', 'true');
	            setAttr(nextSlide, 'aria-hidden', 'false');
	            _this2.isSliding = false;
	            _this2.direction = null; // Notify ourselves that we're done sliding (slid)

	            _this2.$nextTick(function () {
	              return _this2.$emit('sliding-end', to);
	            });
	          }; // Set up transitionend handler

	          /* istanbul ignore if: transition events cant be tested in JSDOM */


	          if (this.transitionEndEvent) {
	            var events = this.transitionEndEvent.split(/\s+/);
	            events.forEach(function (event) {
	              return eventOn(currentSlide, event, onceTransEnd, EventOptions$1);
	            });
	          } // Fallback to setTimeout


	          this._animationTimeout = setTimeout(onceTransEnd, TRANS_DURATION);
	        }

	        if (isCycling) {
	          this.start(false);
	        }
	      },
	      // Update slide list
	      updateSlides: function updateSlides() {
	        this.pause(true); // Get all slides as DOM elements

	        this.slides = selectAll('.carousel-item', this.$refs.inner);
	        var numSlides = this.slides.length; // Keep slide number in range

	        var index = Math.max(0, Math.min(Math.floor(this.index), numSlides - 1));
	        this.slides.forEach(function (slide, idx) {
	          var n = idx + 1;

	          if (idx === index) {
	            addClass(slide, 'active');
	            setAttr(slide, 'aria-current', 'true');
	          } else {
	            removeClass(slide, 'active');
	            setAttr(slide, 'aria-current', 'false');
	          }

	          setAttr(slide, 'aria-posinset', String(n));
	          setAttr(slide, 'aria-setsize', String(numSlides));
	        }); // Set slide as active

	        this.setSlide(index);
	        this.start(this.isPaused);
	      },
	      calcDirection: function calcDirection() {
	        var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	        var curIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	        var nextIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	        if (!direction) {
	          return nextIndex > curIndex ? DIRECTION.next : DIRECTION.prev;
	        }

	        return DIRECTION[direction];
	      },
	      handleClick: function handleClick(evt, fn) {
	        var keyCode = evt.keyCode;

	        if (evt.type === 'click' || keyCode === KeyCodes.SPACE || keyCode === KeyCodes.ENTER) {
	          evt.preventDefault();
	          evt.stopPropagation();
	          fn();
	        }
	      },
	      handleSwipe: function handleSwipe()
	      /* istanbul ignore next: JSDOM doesn't support touch events */
	      {
	        var absDeltax = Math.abs(this.touchDeltaX);

	        if (absDeltax <= SWIPE_THRESHOLD) {
	          return;
	        }

	        var direction = absDeltax / this.touchDeltaX;

	        if (direction > 0) {
	          // swipe left
	          this.prev();
	        } else if (direction < 0) {
	          // swipe right
	          this.next();
	        }
	      },
	      touchStart: function touchStart(evt)
	      /* istanbul ignore next: JSDOM doesn't support touch events */
	      {
	        if (hasPointerEvent && PointerType[evt.pointerType.toUpperCase()]) {
	          this.touchStartX = evt.clientX;
	        } else if (!hasPointerEvent) {
	          this.touchStartX = evt.touches[0].clientX;
	        }
	      },
	      touchMove: function touchMove(evt)
	      /* istanbul ignore next: JSDOM doesn't support touch events */
	      {
	        // ensure swiping with one touch and not pinching
	        if (evt.touches && evt.originalEvent.touches.length > 1) {
	          this.touchDeltaX = 0;
	        } else {
	          this.touchDeltaX = evt.touches[0].clientX - this.touchStartX;
	        }
	      },
	      touchEnd: function touchEnd(evt)
	      /* istanbul ignore next: JSDOM doesn't support touch events */
	      {
	        if (hasPointerEvent && PointerType[evt.pointerType.toUpperCase()]) {
	          this.touchDeltaX = evt.clientX - this.touchStartX;
	        }

	        this.handleSwipe(); // If it's a touch-enabled device, mouseenter/leave are fired as
	        // part of the mouse compatibility events on first tap - the carousel
	        // would stop cycling until user tapped out of it;
	        // here, we listen for touchend, explicitly pause the carousel
	        // (as if it's the second time we tap on it, mouseenter compat event
	        // is NOT fired) and after a timeout (to allow for mouse compatibility
	        // events to fire) we explicitly restart cycling

	        this.pause(false);

	        if (this._touchTimeout) {
	          clearTimeout(this._touchTimeout);
	        }

	        this._touchTimeout = setTimeout(this.start, TOUCHEVENT_COMPAT_WAIT + Math.max(1000, this.interval));
	      }
	    },
	    render: function render(h) {
	      var _this3 = this;

	      // Wrapper for slides
	      var inner = h('div', {
	        ref: 'inner',
	        class: ['carousel-inner'],
	        attrs: {
	          id: this.safeId('__BV_inner_'),
	          role: 'list'
	        }
	      }, [this.$slots.default]); // Prev and Next Controls

	      var controls = h(false);

	      if (this.controls) {
	        controls = [h('a', {
	          class: ['carousel-control-prev'],
	          attrs: {
	            href: '#',
	            role: 'button',
	            'aria-controls': this.safeId('__BV_inner_')
	          },
	          on: {
	            click: function click(evt) {
	              _this3.handleClick(evt, _this3.prev);
	            },
	            keydown: function keydown(evt) {
	              _this3.handleClick(evt, _this3.prev);
	            }
	          }
	        }, [h('span', {
	          class: ['carousel-control-prev-icon'],
	          attrs: {
	            'aria-hidden': 'true'
	          }
	        }), h('span', {
	          class: ['sr-only']
	        }, [this.labelPrev])]), h('a', {
	          class: ['carousel-control-next'],
	          attrs: {
	            href: '#',
	            role: 'button',
	            'aria-controls': this.safeId('__BV_inner_')
	          },
	          on: {
	            click: function click(evt) {
	              _this3.handleClick(evt, _this3.next);
	            },
	            keydown: function keydown(evt) {
	              _this3.handleClick(evt, _this3.next);
	            }
	          }
	        }, [h('span', {
	          class: ['carousel-control-next-icon'],
	          attrs: {
	            'aria-hidden': 'true'
	          }
	        }), h('span', {
	          class: ['sr-only']
	        }, [this.labelNext])])];
	      } // Indicators


	      var indicators = h('ol', {
	        class: ['carousel-indicators'],
	        directives: [{
	          name: 'show',
	          rawName: 'v-show',
	          value: this.indicators,
	          expression: 'indicators'
	        }],
	        attrs: {
	          id: this.safeId('__BV_indicators_'),
	          'aria-hidden': this.indicators ? 'false' : 'true',
	          'aria-label': this.labelIndicators,
	          'aria-owns': this.safeId('__BV_inner_')
	        }
	      }, this.slides.map(function (slide, n) {
	        return h('li', {
	          key: "slide_".concat(n),
	          class: {
	            active: n === _this3.index
	          },
	          attrs: {
	            role: 'button',
	            id: _this3.safeId("__BV_indicator_".concat(n + 1, "_")),
	            tabindex: _this3.indicators ? '0' : '-1',
	            'aria-current': n === _this3.index ? 'true' : 'false',
	            'aria-label': "".concat(_this3.labelGotoSlide, " ").concat(n + 1),
	            'aria-describedby': _this3.slides[n].id || null,
	            'aria-controls': _this3.safeId('__BV_inner_')
	          },
	          on: {
	            click: function click(evt) {
	              _this3.handleClick(evt, function () {
	                _this3.setSlide(n);
	              });
	            },
	            keydown: function keydown(evt) {
	              _this3.handleClick(evt, function () {
	                _this3.setSlide(n);
	              });
	            }
	          }
	        });
	      }));
	      var on = {
	        mouseenter: this.pause,
	        mouseleave: this.restart,
	        focusin: this.pause,
	        focusout: this.restart,
	        keydown: function keydown(evt) {
	          if (/input|textarea/i.test(evt.target.tagName)) {
	            return;
	          }

	          var keyCode = evt.keyCode;

	          if (keyCode === KeyCodes.LEFT || keyCode === KeyCodes.RIGHT) {
	            evt.preventDefault();
	            evt.stopPropagation();

	            _this3[keyCode === KeyCodes.LEFT ? 'prev' : 'next']();
	          }
	        } // Touch support event handlers for environment

	      };

	      if (!this.noTouch && hasTouchSupport) {
	        /* istanbul ignore next: JSDOM doesn't support touch events */
	        // Attach appropriate listeners (passsive mode)
	        if (hasPointerEvent) {
	          on['&pointerdown'] = this.touchStart;
	          on['&pointerup'] = this.touchEnd;
	        } else {
	          on['&touchstart'] = this.touchStart;
	          on['&touchmove'] = this.touchMove;
	          on['&touchend'] = this.touchEnd;
	        }
	      } // Return the carousel


	      return h('div', {
	        staticClass: 'carousel',
	        class: {
	          slide: !this.noAnimation,
	          'carousel-fade': !this.noAnimation && this.fade,
	          'pointer-event': !this.noTouch && hasTouchSupport && hasPointerEvent
	        },
	        style: {
	          background: this.background
	        },
	        attrs: {
	          role: 'region',
	          id: this.safeId(),
	          'aria-busy': this.isSliding ? 'true' : 'false'
	        },
	        on: on
	      }, [inner, controls, indicators]);
	    }
	  };

	  var BCarouselSlide = {
	    name: 'BCarouselSlide',
	    components: {
	      BImg: BImg
	    },
	    mixins: [idMixin],
	    inject: {
	      bvCarousel: {
	        default: function _default() {
	          return {
	            // Explicitly disable touch if not a child of carousel
	            noTouch: true
	          };
	        }
	      }
	    },
	    props: {
	      imgSrc: {
	        type: String // default: undefined

	      },
	      imgAlt: {
	        type: String // default: undefined

	      },
	      imgWidth: {
	        type: [Number, String] // default: undefined

	      },
	      imgHeight: {
	        type: [Number, String] // default: undefined

	      },
	      imgBlank: {
	        type: Boolean,
	        default: false
	      },
	      imgBlankColor: {
	        type: String,
	        default: 'transparent'
	      },
	      contentVisibleUp: {
	        type: String
	      },
	      contentTag: {
	        type: String,
	        default: 'div'
	      },
	      caption: {
	        type: String
	      },
	      captionHtml: {
	        type: String
	      },
	      captionTag: {
	        type: String,
	        default: 'h3'
	      },
	      text: {
	        type: String
	      },
	      textHtml: {
	        type: String
	      },
	      textTag: {
	        type: String,
	        default: 'p'
	      },
	      background: {
	        type: String
	      }
	    },
	    data: function data() {
	      return {};
	    },
	    computed: {
	      contentClasses: function contentClasses() {
	        return [this.contentVisibleUp ? 'd-none' : '', this.contentVisibleUp ? "d-".concat(this.contentVisibleUp, "-block") : ''];
	      },
	      computedWidth: function computedWidth() {
	        // Use local width, or try parent width
	        return this.imgWidth || this.bvCarousel.imgWidth || null;
	      },
	      computedHeight: function computedHeight() {
	        // Use local height, or try parent height
	        return this.imgHeight || this.bvCarousel.imgHeight || null;
	      }
	    },
	    render: function render(h) {
	      var $slots = this.$slots;
	      var noDrag = !this.bvCarousel.noTouch && hasTouchSupport;
	      var img = $slots.img;

	      if (!img && (this.imgSrc || this.imgBlank)) {
	        img = h('b-img', {
	          props: {
	            fluidGrow: true,
	            block: true,
	            src: this.imgSrc,
	            blank: this.imgBlank,
	            blankColor: this.imgBlankColor,
	            width: this.computedWidth,
	            height: this.computedHeight,
	            alt: this.imgAlt
	          },
	          // Touch support event handler
	          on: noDrag ? {
	            dragstart: function dragstart(e) {
	              e.preventDefault();
	            }
	          } : {}
	        });
	      }

	      if (!img) {
	        img = h(false);
	      }

	      var content = h(this.contentTag, {
	        staticClass: 'carousel-caption',
	        class: this.contentClasses
	      }, [this.caption || this.captionHtml ? h(this.captionTag, {
	        domProps: htmlOrText(this.captionHtml, this.caption)
	      }) : h(false), this.text || this.textHtml ? h(this.textTag, {
	        domProps: htmlOrText(this.textHtml, this.text)
	      }) : h(false), $slots.default]);
	      return h('div', {
	        staticClass: 'carousel-item',
	        style: {
	          background: this.background || this.bvCarousel.background || null
	        },
	        attrs: {
	          id: this.safeId(),
	          role: 'listitem'
	        }
	      }, [img, content]);
	    }
	  };

	  var components$8 = {
	    BCarousel: BCarousel,
	    BCarouselSlide: BCarouselSlide
	  };
	  var index$8 = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$8);
	    }
	  };

	  var props$j = {
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    fluid: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  };
	  var Container = {
	    name: 'BContainer',
	    functional: true,
	    props: props$j,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        class: {
	          container: !props.fluid,
	          'container-fluid': props.fluid
	        }
	      }), children);
	    }
	  };

	  var COMMON_ALIGNMENT = ['start', 'end', 'center'];
	  var props$k = {
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    noGutters: {
	      type: Boolean,
	      default: false
	    },
	    alignV: {
	      type: String,
	      default: null,
	      validator: function validator(str) {
	        return arrayIncludes(COMMON_ALIGNMENT.concat(['baseline', 'stretch']), str);
	      }
	    },
	    alignH: {
	      type: String,
	      default: null,
	      validator: function validator(str) {
	        return arrayIncludes(COMMON_ALIGNMENT.concat(['between', 'around']), str);
	      }
	    },
	    alignContent: {
	      type: String,
	      default: null,
	      validator: function validator(str) {
	        return arrayIncludes(COMMON_ALIGNMENT.concat(['between', 'around', 'stretch']), str);
	      }
	    } // @vue/component

	  };
	  var BRow = {
	    name: 'BRow',
	    functional: true,
	    props: props$k,
	    render: function render(h, _ref) {
	      var _class;

	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        staticClass: 'row',
	        class: (_class = {
	          'no-gutters': props.noGutters
	        }, _defineProperty(_class, "align-items-".concat(props.alignV), props.alignV), _defineProperty(_class, "justify-content-".concat(props.alignH), props.alignH), _defineProperty(_class, "align-content-".concat(props.alignContent), props.alignContent), _class)
	      }), children);
	    }
	  };

	  function memoize(fn) {
	    var cache = create(null);
	    return function memoizedFn() {
	      var args = JSON.stringify(arguments);
	      return cache[args] = cache[args] || fn.apply(null, arguments);
	    };
	  }

	  /**
	   * Suffix can be a falsey value so nothing is appended to string.
	   * (helps when looping over props & some shouldn't change)
	   * Use data last parameters to allow for currying.
	   * @param {string} suffix
	   * @param {string} str
	   */

	  function suffixPropName(suffix, str) {
	    return str + (suffix ? upperFirst(suffix) : '');
	  }

	  /**
	   * Generates a prop object with a type of
	   * [Boolean, String, Number]
	   */

	  function boolStrNum() {
	    return {
	      type: [Boolean, String, Number],
	      default: false
	    };
	  }
	  /**
	   * Generates a prop object with a type of
	   * [String, Number]
	   */


	  function strNum() {
	    return {
	      type: [String, Number],
	      default: null
	    };
	  }

	  var computeBkPtClass = memoize(function computeBkPt(type, breakpoint, val) {
	    var className = type;

	    if (val === false || val === null || val === undefined) {
	      return undefined;
	    }

	    if (breakpoint) {
	      className += "-".concat(breakpoint);
	    } // Handling the boolean style prop when accepting [Boolean, String, Number]
	    // means Vue will not convert <b-col sm /> to sm: true for us.
	    // Since the default is false, an empty string indicates the prop's presence.


	    if (type === 'col' && (val === '' || val === true)) {
	      // .col-md
	      return className.toLowerCase();
	    } // .order-md-6


	    className += "-".concat(val);
	    return className.toLowerCase();
	  });
	  var BREAKPOINTS = ['sm', 'md', 'lg', 'xl']; // Supports classes like: .col-sm, .col-md-6, .col-lg-auto

	  var breakpointCol = BREAKPOINTS.reduce( // eslint-disable-next-line no-sequences
	  function (propMap, breakpoint) {
	    return propMap[breakpoint] = boolStrNum(), propMap;
	  }, create(null)); // Supports classes like: .offset-md-1, .offset-lg-12

	  var breakpointOffset = BREAKPOINTS.reduce( // eslint-disable-next-line no-sequences
	  function (propMap, breakpoint) {
	    return propMap[suffixPropName(breakpoint, 'offset')] = strNum(), propMap;
	  }, create(null)); // Supports classes like: .order-md-1, .order-lg-12

	  var breakpointOrder = BREAKPOINTS.reduce( // eslint-disable-next-line no-sequences
	  function (propMap, breakpoint) {
	    return propMap[suffixPropName(breakpoint, 'order')] = strNum(), propMap;
	  }, create(null)); // For loop doesn't need to check hasOwnProperty
	  // when using an object created from null

	  var breakpointPropMap = assign(create(null), {
	    col: keys(breakpointCol),
	    offset: keys(breakpointOffset),
	    order: keys(breakpointOrder)
	  });
	  var props$l = _objectSpread({}, breakpointCol, breakpointOffset, breakpointOrder, {
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    // Generic flexbox .col
	    col: {
	      type: Boolean,
	      default: false
	    },
	    // .col-[1-12]|auto
	    cols: strNum(),
	    // .offset-[1-12]
	    offset: strNum(),
	    // Flex ordering utility .order-[1-12]
	    order: strNum(),
	    alignSelf: {
	      type: String,
	      default: null,
	      validator: function validator(str) {
	        return arrayIncludes(['auto', 'start', 'end', 'center', 'baseline', 'stretch'], str);
	      }
	    }
	    /**
	     * We need ".col" to default in when no other props are passed,
	     * but always render when col=true.
	     */
	    // @vue/component

	  });
	  var BCol = {
	    name: 'BCol',
	    functional: true,
	    props: props$l,
	    render: function render(h, _ref) {
	      var _classList$push;

	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var classList = []; // Loop through `col`, `offset`, `order` breakpoint props

	      for (var type in breakpointPropMap) {
	        // Returns colSm, offset, offsetSm, orderMd, etc.
	        var _keys = breakpointPropMap[type];

	        for (var i = 0; i < _keys.length; i++) {
	          // computeBkPt(col, colSm => Sm, value=[String, Number, Boolean])
	          var c = computeBkPtClass(type, _keys[i].replace(type, ''), props[_keys[i]]); // If a class is returned, push it onto the array.

	          if (c) {
	            classList.push(c);
	          }
	        }
	      }

	      classList.push((_classList$push = {
	        // Default to .col if no other classes generated nor `cols` specified.
	        col: props.col || classList.length === 0 && !props.cols
	      }, _defineProperty(_classList$push, "col-".concat(props.cols), props.cols), _defineProperty(_classList$push, "offset-".concat(props.offset), props.offset), _defineProperty(_classList$push, "order-".concat(props.order), props.order), _defineProperty(_classList$push, "align-self-".concat(props.alignSelf), props.alignSelf), _classList$push));
	      return h(props.tag, mergeData(data, {
	        class: classList
	      }), children);
	    }
	  };

	  var props$m = {
	    tag: {
	      type: String,
	      default: 'div'
	    } // @vue/component

	  };
	  var BFormRow = {
	    name: 'BFormRow',
	    functional: true,
	    props: props$m,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        staticClass: 'form-row'
	      }), children);
	    }
	  };

	  var components$9 = {
	    BContainer: Container,
	    BRow: BRow,
	    BCol: BCol,
	    BFormRow: BFormRow
	  };
	  var index$9 = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$9);
	    }
	  };

	  /**
	   * Issue #569: collapse::toggle::state triggered too many times
	   * @link https://github.com/bootstrap-vue/bootstrap-vue/issues/569
	   */

	  var BVRL = '__BV_root_listeners__'; // @vue/component

	  var listenOnRootMixin = {
	    beforeDestroy: function beforeDestroy() {
	      if (this[BVRL] && isArray(this[BVRL])) {
	        while (this[BVRL].length > 0) {
	          // shift to process in order
	          var _this$BVRL$shift = this[BVRL].shift(),
	              event = _this$BVRL$shift.event,
	              callback = _this$BVRL$shift.callback;

	          this.$root.$off(event, callback);
	        }
	      }
	    },
	    methods: {
	      /**
	       * Safely register event listeners on the root Vue node.
	       * While Vue automatically removes listeners for individual components,
	       * when a component registers a listener on root and is destroyed,
	       * this orphans a callback because the node is gone,
	       * but the root does not clear the callback.
	       *
	       * This adds a non-reactive prop to a vm on the fly
	       * in order to avoid object observation and its performance costs
	       * to something that needs no reactivity.
	       * It should be highly unlikely there are any naming collisions.
	       * @param {string} event
	       * @param {function} callback
	       * @chainable
	       */
	      listenOnRoot: function listenOnRoot(event, callback) {
	        if (!this[BVRL] || !isArray(this[BVRL])) {
	          this[BVRL] = [];
	        }

	        this[BVRL].push({
	          event: event,
	          callback: callback
	        });
	        this.$root.$on(event, callback);
	        return this;
	      },

	      /**
	       * Convenience method for calling vm.$emit on vm.$root.
	       * @param {string} event
	       * @param {*} args
	       * @chainable
	       */
	      emitOnRoot: function emitOnRoot(event) {
	        var _this$$root;

	        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          args[_key - 1] = arguments[_key];
	        }

	        (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args));

	        return this;
	      }
	    }
	  };

	  var EVENT_STATE = 'bv::collapse::state';
	  var EVENT_ACCORDION = 'bv::collapse::accordion'; // Events we listen to on $root

	  var EVENT_TOGGLE = 'bv::toggle::collapse'; // Event Listener options

	  var EventOptions$2 = {
	    passive: true,
	    capture: false // @vue/component

	  };
	  var BCollapse = {
	    name: 'BCollapse',
	    mixins: [listenOnRootMixin],
	    model: {
	      prop: 'visible',
	      event: 'input'
	    },
	    props: {
	      id: {
	        type: String,
	        required: true
	      },
	      isNav: {
	        type: Boolean,
	        default: false
	      },
	      accordion: {
	        type: String,
	        default: null
	      },
	      visible: {
	        type: Boolean,
	        default: false
	      },
	      tag: {
	        type: String,
	        default: 'div'
	      }
	    },
	    data: function data() {
	      return {
	        show: this.visible,
	        transitioning: false
	      };
	    },
	    computed: {
	      classObject: function classObject() {
	        return {
	          'navbar-collapse': this.isNav,
	          collapse: !this.transitioning,
	          show: this.show && !this.transitioning
	        };
	      }
	    },
	    watch: {
	      visible: function visible(newVal) {
	        if (newVal !== this.show) {
	          this.show = newVal;
	        }
	      },
	      show: function show(newVal, oldVal) {
	        if (newVal !== oldVal) {
	          this.emitState();
	        }
	      }
	    },
	    created: function created() {
	      // Listen for toggle events to open/close us
	      this.listenOnRoot(EVENT_TOGGLE, this.handleToggleEvt); // Listen to other collapses for accordion events

	      this.listenOnRoot(EVENT_ACCORDION, this.handleAccordionEvt);
	    },
	    mounted: function mounted() {
	      if (this.isNav && typeof document !== 'undefined') {
	        // Set up handlers
	        eventOn(window, 'resize', this.handleResize, EventOptions$2);
	        eventOn(window, 'orientationchange', this.handleResize, EventOptions$2);
	        this.handleResize();
	      }

	      this.emitState();
	    },
	    updated: function updated() {
	      this.$root.$emit(EVENT_STATE, this.id, this.show);
	    },
	    beforeDestroy: function beforeDestroy()
	    /* istanbul ignore next */
	    {
	      if (this.isNav && typeof document !== 'undefined') {
	        eventOff(window, 'resize', this.handleResize, EventOptions$2);
	        eventOff(window, 'orientationchange', this.handleResize, EventOptions$2);
	      }
	    },
	    methods: {
	      toggle: function toggle() {
	        this.show = !this.show;
	      },
	      onEnter: function onEnter(el) {
	        el.style.height = 0;
	        reflow(el);
	        el.style.height = el.scrollHeight + 'px';
	        this.transitioning = true; // This should be moved out so we can add cancellable events

	        this.$emit('show');
	      },
	      onAfterEnter: function onAfterEnter(el) {
	        el.style.height = null;
	        this.transitioning = false;
	        this.$emit('shown');
	      },
	      onLeave: function onLeave(el) {
	        el.style.height = 'auto';
	        el.style.display = 'block';
	        el.style.height = getBCR(el).height + 'px';
	        reflow(el);
	        this.transitioning = true;
	        el.style.height = 0; // This should be moved out so we can add cancellable events

	        this.$emit('hide');
	      },
	      onAfterLeave: function onAfterLeave(el) {
	        el.style.height = null;
	        this.transitioning = false;
	        this.$emit('hidden');
	      },
	      emitState: function emitState() {
	        this.$emit('input', this.show); // Let v-b-toggle know the state of this collapse

	        this.$root.$emit(EVENT_STATE, this.id, this.show);

	        if (this.accordion && this.show) {
	          // Tell the other collapses in this accordion to close
	          this.$root.$emit(EVENT_ACCORDION, this.id, this.accordion);
	        }
	      },
	      clickHandler: function clickHandler(evt) {
	        // If we are in a nav/navbar, close the collapse when non-disabled link clicked
	        var el = evt.target;

	        if (!this.isNav || !el || getCS(this.$el).display !== 'block') {
	          return;
	        }

	        if (matches(el, '.nav-link,.dropdown-item') || closest('.nav-link,.dropdown-item', el)) {
	          this.show = false;
	        }
	      },
	      handleToggleEvt: function handleToggleEvt(target) {
	        if (target !== this.id) {
	          return;
	        }

	        this.toggle();
	      },
	      handleAccordionEvt: function handleAccordionEvt(openedId, accordion) {
	        if (!this.accordion || accordion !== this.accordion) {
	          return;
	        }

	        if (openedId === this.id) {
	          // Open this collapse if not shown
	          if (!this.show) {
	            this.toggle();
	          }
	        } else {
	          // Close this collapse if shown
	          if (this.show) {
	            this.toggle();
	          }
	        }
	      },
	      handleResize: function handleResize() {
	        // Handler for orientation/resize to set collapsed state in nav/navbar
	        this.show = getCS(this.$el).display === 'block';
	      }
	    },
	    render: function render(h) {
	      var content = h(this.tag, {
	        class: this.classObject,
	        directives: [{
	          name: 'show',
	          value: this.show
	        }],
	        attrs: {
	          id: this.id || null
	        },
	        on: {
	          click: this.clickHandler
	        }
	      }, [this.$slots.default]);
	      return h('transition', {
	        props: {
	          enterClass: '',
	          enterActiveClass: 'collapsing',
	          enterToClass: '',
	          leaveClass: '',
	          leaveActiveClass: 'collapsing',
	          leaveToClass: ''
	        },
	        on: {
	          enter: this.onEnter,
	          afterEnter: this.onAfterEnter,
	          leave: this.onLeave,
	          afterLeave: this.onAfterLeave
	        }
	      }, [content]);
	    }
	  };

	  var allListenTypes = {
	    hover: true,
	    click: true,
	    focus: true
	  };
	  var BVBoundListeners = '__BV_boundEventListeners__';

	  var bindTargets = function bindTargets(vnode, binding, listenTypes, fn) {
	    var targets = keys(binding.modifiers || {}).filter(function (t) {
	      return !allListenTypes[t];
	    });

	    if (binding.value) {
	      targets.push(binding.value);
	    }

	    var listener = function listener() {
	      fn({
	        targets: targets,
	        vnode: vnode
	      });
	    };

	    keys(allListenTypes).forEach(function (type) {
	      if (listenTypes[type] || binding.modifiers[type]) {
	        eventOn(vnode.elm, type, listener);
	        var boundListeners = vnode.elm[BVBoundListeners] || {};
	        boundListeners[type] = boundListeners[type] || [];
	        boundListeners[type].push(listener);
	        vnode.elm[BVBoundListeners] = boundListeners;
	      }
	    }); // Return the list of targets

	    return targets;
	  };

	  var unbindTargets = function unbindTargets(vnode, binding, listenTypes) {
	    keys(allListenTypes).forEach(function (type) {
	      if (listenTypes[type] || binding.modifiers[type]) {
	        var boundListeners = vnode.elm[BVBoundListeners] && vnode.elm[BVBoundListeners][type];

	        if (boundListeners) {
	          boundListeners.forEach(function (listener) {
	            return eventOff(vnode.elm, type, listener);
	          });
	          delete vnode.elm[BVBoundListeners][type];
	        }
	      }
	    });
	  };

	  var inBrowser$1 = typeof window !== 'undefined'; // target listen types

	  var listenTypes = {
	    click: true // Property key for handler storage

	  };
	  var BVT = '__BV_toggle__'; // Emitted Control Event for collapse (emitted to collapse)

	  var EVENT_TOGGLE$1 = 'bv::toggle::collapse'; // Listen to Event for toggle state update (Emited by collapse)

	  var EVENT_STATE$1 = 'bv::collapse::state';
	  var bToggle = {
	    bind: function bind(el, binding, vnode) {
	      var targets = bindTargets(vnode, binding, listenTypes, function (_ref) {
	        var targets = _ref.targets,
	            vnode = _ref.vnode;
	        targets.forEach(function (target) {
	          vnode.context.$root.$emit(EVENT_TOGGLE$1, target);
	        });
	      });

	      if (inBrowser$1 && vnode.context && targets.length > 0) {
	        // Add aria attributes to element
	        setAttr(el, 'aria-controls', targets.join(' '));
	        setAttr(el, 'aria-expanded', 'false');

	        if (el.tagName !== 'BUTTON') {
	          // If element is not a button, we add `role="button"` for accessibility
	          setAttr(el, 'role', 'button');
	        } // Toggle state hadnler, stored on element


	        el[BVT] = function toggleDirectiveHandler(id, state) {
	          if (targets.indexOf(id) !== -1) {
	            // Set aria-expanded state
	            setAttr(el, 'aria-expanded', state ? 'true' : 'false'); // Set/Clear 'collapsed' class state

	            if (state) {
	              removeClass(el, 'collapsed');
	            } else {
	              addClass(el, 'collapsed');
	            }
	          }
	        }; // Listen for toggle state changes


	        vnode.context.$root.$on(EVENT_STATE$1, el[BVT]);
	      }
	    },
	    unbind: function unbind(el, binding, vnode) {
	      if (el[BVT]) {
	        // Remove our $root listener
	        vnode.context.$root.$off(EVENT_STATE$1, el[BVT]);
	        el[BVT] = null;
	      }
	    }
	  };

	  var directives = {
	    bToggle: bToggle
	  };
	  var toggleDirectivePlugin = {
	    install: function install(Vue) {
	      registerDirectives(Vue, directives);
	    }
	  };

	  var components$a = {
	    BCollapse: BCollapse
	  };
	  var collapsePlugin = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$a);
	      Vue.use(toggleDirectivePlugin);
	    }
	  };

	  /**!
	   * @fileOverview Kickass library to create and place poppers near their reference elements.
	   * @version 1.14.7
	   * @license
	   * Copyright (c) 2016 Federico Zivolo and contributors
	   *
	   * Permission is hereby granted, free of charge, to any person obtaining a copy
	   * of this software and associated documentation files (the "Software"), to deal
	   * in the Software without restriction, including without limitation the rights
	   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	   * copies of the Software, and to permit persons to whom the Software is
	   * furnished to do so, subject to the following conditions:
	   *
	   * The above copyright notice and this permission notice shall be included in all
	   * copies or substantial portions of the Software.
	   *
	   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	   * SOFTWARE.
	   */
	  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';

	  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
	  var timeoutDuration = 0;
	  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
	    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
	      timeoutDuration = 1;
	      break;
	    }
	  }

	  function microtaskDebounce(fn) {
	    var called = false;
	    return function () {
	      if (called) {
	        return;
	      }
	      called = true;
	      window.Promise.resolve().then(function () {
	        called = false;
	        fn();
	      });
	    };
	  }

	  function taskDebounce(fn) {
	    var scheduled = false;
	    return function () {
	      if (!scheduled) {
	        scheduled = true;
	        setTimeout(function () {
	          scheduled = false;
	          fn();
	        }, timeoutDuration);
	      }
	    };
	  }

	  var supportsMicroTasks = isBrowser && window.Promise;

	  /**
	  * Create a debounced version of a method, that's asynchronously deferred
	  * but called in the minimum time possible.
	  *
	  * @method
	  * @memberof Popper.Utils
	  * @argument {Function} fn
	  * @returns {Function}
	  */
	  var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

	  /**
	   * Check if the given variable is a function
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Any} functionToCheck - variable to check
	   * @returns {Boolean} answer to: is a function?
	   */
	  function isFunction(functionToCheck) {
	    var getType = {};
	    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	  }

	  /**
	   * Get CSS computed property of the given element
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Eement} element
	   * @argument {String} property
	   */
	  function getStyleComputedProperty(element, property) {
	    if (element.nodeType !== 1) {
	      return [];
	    }
	    // NOTE: 1 DOM access here
	    var window = element.ownerDocument.defaultView;
	    var css = window.getComputedStyle(element, null);
	    return property ? css[property] : css;
	  }

	  /**
	   * Returns the parentNode or the host of the element
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Element} element
	   * @returns {Element} parent
	   */
	  function getParentNode(element) {
	    if (element.nodeName === 'HTML') {
	      return element;
	    }
	    return element.parentNode || element.host;
	  }

	  /**
	   * Returns the scrolling parent of the given element
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Element} element
	   * @returns {Element} scroll parent
	   */
	  function getScrollParent(element) {
	    // Return body, `getScroll` will take care to get the correct `scrollTop` from it
	    if (!element) {
	      return document.body;
	    }

	    switch (element.nodeName) {
	      case 'HTML':
	      case 'BODY':
	        return element.ownerDocument.body;
	      case '#document':
	        return element.body;
	    }

	    // Firefox want us to check `-x` and `-y` variations as well

	    var _getStyleComputedProp = getStyleComputedProperty(element),
	        overflow = _getStyleComputedProp.overflow,
	        overflowX = _getStyleComputedProp.overflowX,
	        overflowY = _getStyleComputedProp.overflowY;

	    if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
	      return element;
	    }

	    return getScrollParent(getParentNode(element));
	  }

	  var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
	  var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

	  /**
	   * Determines if the browser is Internet Explorer
	   * @method
	   * @memberof Popper.Utils
	   * @param {Number} version to check
	   * @returns {Boolean} isIE
	   */
	  function isIE(version) {
	    if (version === 11) {
	      return isIE11;
	    }
	    if (version === 10) {
	      return isIE10;
	    }
	    return isIE11 || isIE10;
	  }

	  /**
	   * Returns the offset parent of the given element
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Element} element
	   * @returns {Element} offset parent
	   */
	  function getOffsetParent(element) {
	    if (!element) {
	      return document.documentElement;
	    }

	    var noOffsetParent = isIE(10) ? document.body : null;

	    // NOTE: 1 DOM access here
	    var offsetParent = element.offsetParent || null;
	    // Skip hidden elements which don't have an offsetParent
	    while (offsetParent === noOffsetParent && element.nextElementSibling) {
	      offsetParent = (element = element.nextElementSibling).offsetParent;
	    }

	    var nodeName = offsetParent && offsetParent.nodeName;

	    if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
	      return element ? element.ownerDocument.documentElement : document.documentElement;
	    }

	    // .offsetParent will return the closest TH, TD or TABLE in case
	    // no offsetParent is present, I hate this job...
	    if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
	      return getOffsetParent(offsetParent);
	    }

	    return offsetParent;
	  }

	  function isOffsetContainer(element) {
	    var nodeName = element.nodeName;

	    if (nodeName === 'BODY') {
	      return false;
	    }
	    return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
	  }

	  /**
	   * Finds the root node (document, shadowDOM root) of the given element
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Element} node
	   * @returns {Element} root node
	   */
	  function getRoot(node) {
	    if (node.parentNode !== null) {
	      return getRoot(node.parentNode);
	    }

	    return node;
	  }

	  /**
	   * Finds the offset parent common to the two provided nodes
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Element} element1
	   * @argument {Element} element2
	   * @returns {Element} common offset parent
	   */
	  function findCommonOffsetParent(element1, element2) {
	    // This check is needed to avoid errors in case one of the elements isn't defined for any reason
	    if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
	      return document.documentElement;
	    }

	    // Here we make sure to give as "start" the element that comes first in the DOM
	    var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
	    var start = order ? element1 : element2;
	    var end = order ? element2 : element1;

	    // Get common ancestor container
	    var range = document.createRange();
	    range.setStart(start, 0);
	    range.setEnd(end, 0);
	    var commonAncestorContainer = range.commonAncestorContainer;

	    // Both nodes are inside #document

	    if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
	      if (isOffsetContainer(commonAncestorContainer)) {
	        return commonAncestorContainer;
	      }

	      return getOffsetParent(commonAncestorContainer);
	    }

	    // one of the nodes is inside shadowDOM, find which one
	    var element1root = getRoot(element1);
	    if (element1root.host) {
	      return findCommonOffsetParent(element1root.host, element2);
	    } else {
	      return findCommonOffsetParent(element1, getRoot(element2).host);
	    }
	  }

	  /**
	   * Gets the scroll value of the given element in the given side (top and left)
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Element} element
	   * @argument {String} side `top` or `left`
	   * @returns {number} amount of scrolled pixels
	   */
	  function getScroll(element) {
	    var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

	    var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
	    var nodeName = element.nodeName;

	    if (nodeName === 'BODY' || nodeName === 'HTML') {
	      var html = element.ownerDocument.documentElement;
	      var scrollingElement = element.ownerDocument.scrollingElement || html;
	      return scrollingElement[upperSide];
	    }

	    return element[upperSide];
	  }

	  /*
	   * Sum or subtract the element scroll values (left and top) from a given rect object
	   * @method
	   * @memberof Popper.Utils
	   * @param {Object} rect - Rect object you want to change
	   * @param {HTMLElement} element - The element from the function reads the scroll values
	   * @param {Boolean} subtract - set to true if you want to subtract the scroll values
	   * @return {Object} rect - The modifier rect object
	   */
	  function includeScroll(rect, element) {
	    var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    var scrollTop = getScroll(element, 'top');
	    var scrollLeft = getScroll(element, 'left');
	    var modifier = subtract ? -1 : 1;
	    rect.top += scrollTop * modifier;
	    rect.bottom += scrollTop * modifier;
	    rect.left += scrollLeft * modifier;
	    rect.right += scrollLeft * modifier;
	    return rect;
	  }

	  /*
	   * Helper to detect borders of a given element
	   * @method
	   * @memberof Popper.Utils
	   * @param {CSSStyleDeclaration} styles
	   * Result of `getStyleComputedProperty` on the given element
	   * @param {String} axis - `x` or `y`
	   * @return {number} borders - The borders size of the given axis
	   */

	  function getBordersSize(styles, axis) {
	    var sideA = axis === 'x' ? 'Left' : 'Top';
	    var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

	    return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
	  }

	  function getSize(axis, body, html, computedStyle) {
	    return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
	  }

	  function getWindowSizes(document) {
	    var body = document.body;
	    var html = document.documentElement;
	    var computedStyle = isIE(10) && getComputedStyle(html);

	    return {
	      height: getSize('Height', body, html, computedStyle),
	      width: getSize('Width', body, html, computedStyle)
	    };
	  }

	  var classCallCheck = function (instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  };

	  var createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }

	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();





	  var defineProperty$1 = function (obj, key, value) {
	    if (key in obj) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	    } else {
	      obj[key] = value;
	    }

	    return obj;
	  };

	  var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  /**
	   * Given element offsets, generate an output similar to getBoundingClientRect
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Object} offsets
	   * @returns {Object} ClientRect like output
	   */
	  function getClientRect(offsets) {
	    return _extends({}, offsets, {
	      right: offsets.left + offsets.width,
	      bottom: offsets.top + offsets.height
	    });
	  }

	  /**
	   * Get bounding client rect of given element
	   * @method
	   * @memberof Popper.Utils
	   * @param {HTMLElement} element
	   * @return {Object} client rect
	   */
	  function getBoundingClientRect(element) {
	    var rect = {};

	    // IE10 10 FIX: Please, don't ask, the element isn't
	    // considered in DOM in some circumstances...
	    // This isn't reproducible in IE10 compatibility mode of IE11
	    try {
	      if (isIE(10)) {
	        rect = element.getBoundingClientRect();
	        var scrollTop = getScroll(element, 'top');
	        var scrollLeft = getScroll(element, 'left');
	        rect.top += scrollTop;
	        rect.left += scrollLeft;
	        rect.bottom += scrollTop;
	        rect.right += scrollLeft;
	      } else {
	        rect = element.getBoundingClientRect();
	      }
	    } catch (e) {}

	    var result = {
	      left: rect.left,
	      top: rect.top,
	      width: rect.right - rect.left,
	      height: rect.bottom - rect.top
	    };

	    // subtract scrollbar size from sizes
	    var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
	    var width = sizes.width || element.clientWidth || result.right - result.left;
	    var height = sizes.height || element.clientHeight || result.bottom - result.top;

	    var horizScrollbar = element.offsetWidth - width;
	    var vertScrollbar = element.offsetHeight - height;

	    // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
	    // we make this check conditional for performance reasons
	    if (horizScrollbar || vertScrollbar) {
	      var styles = getStyleComputedProperty(element);
	      horizScrollbar -= getBordersSize(styles, 'x');
	      vertScrollbar -= getBordersSize(styles, 'y');

	      result.width -= horizScrollbar;
	      result.height -= vertScrollbar;
	    }

	    return getClientRect(result);
	  }

	  function getOffsetRectRelativeToArbitraryNode(children, parent) {
	    var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    var isIE10 = isIE(10);
	    var isHTML = parent.nodeName === 'HTML';
	    var childrenRect = getBoundingClientRect(children);
	    var parentRect = getBoundingClientRect(parent);
	    var scrollParent = getScrollParent(children);

	    var styles = getStyleComputedProperty(parent);
	    var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
	    var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);

	    // In cases where the parent is fixed, we must ignore negative scroll in offset calc
	    if (fixedPosition && isHTML) {
	      parentRect.top = Math.max(parentRect.top, 0);
	      parentRect.left = Math.max(parentRect.left, 0);
	    }
	    var offsets = getClientRect({
	      top: childrenRect.top - parentRect.top - borderTopWidth,
	      left: childrenRect.left - parentRect.left - borderLeftWidth,
	      width: childrenRect.width,
	      height: childrenRect.height
	    });
	    offsets.marginTop = 0;
	    offsets.marginLeft = 0;

	    // Subtract margins of documentElement in case it's being used as parent
	    // we do this only on HTML because it's the only element that behaves
	    // differently when margins are applied to it. The margins are included in
	    // the box of the documentElement, in the other cases not.
	    if (!isIE10 && isHTML) {
	      var marginTop = parseFloat(styles.marginTop, 10);
	      var marginLeft = parseFloat(styles.marginLeft, 10);

	      offsets.top -= borderTopWidth - marginTop;
	      offsets.bottom -= borderTopWidth - marginTop;
	      offsets.left -= borderLeftWidth - marginLeft;
	      offsets.right -= borderLeftWidth - marginLeft;

	      // Attach marginTop and marginLeft because in some circumstances we may need them
	      offsets.marginTop = marginTop;
	      offsets.marginLeft = marginLeft;
	    }

	    if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
	      offsets = includeScroll(offsets, parent);
	    }

	    return offsets;
	  }

	  function getViewportOffsetRectRelativeToArtbitraryNode(element) {
	    var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	    var html = element.ownerDocument.documentElement;
	    var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
	    var width = Math.max(html.clientWidth, window.innerWidth || 0);
	    var height = Math.max(html.clientHeight, window.innerHeight || 0);

	    var scrollTop = !excludeScroll ? getScroll(html) : 0;
	    var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

	    var offset = {
	      top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
	      left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
	      width: width,
	      height: height
	    };

	    return getClientRect(offset);
	  }

	  /**
	   * Check if the given element is fixed or is inside a fixed parent
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Element} element
	   * @argument {Element} customContainer
	   * @returns {Boolean} answer to "isFixed?"
	   */
	  function isFixed(element) {
	    var nodeName = element.nodeName;
	    if (nodeName === 'BODY' || nodeName === 'HTML') {
	      return false;
	    }
	    if (getStyleComputedProperty(element, 'position') === 'fixed') {
	      return true;
	    }
	    var parentNode = getParentNode(element);
	    if (!parentNode) {
	      return false;
	    }
	    return isFixed(parentNode);
	  }

	  /**
	   * Finds the first parent of an element that has a transformed property defined
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Element} element
	   * @returns {Element} first transformed parent or documentElement
	   */

	  function getFixedPositionOffsetParent(element) {
	    // This check is needed to avoid errors in case one of the elements isn't defined for any reason
	    if (!element || !element.parentElement || isIE()) {
	      return document.documentElement;
	    }
	    var el = element.parentElement;
	    while (el && getStyleComputedProperty(el, 'transform') === 'none') {
	      el = el.parentElement;
	    }
	    return el || document.documentElement;
	  }

	  /**
	   * Computed the boundaries limits and return them
	   * @method
	   * @memberof Popper.Utils
	   * @param {HTMLElement} popper
	   * @param {HTMLElement} reference
	   * @param {number} padding
	   * @param {HTMLElement} boundariesElement - Element used to define the boundaries
	   * @param {Boolean} fixedPosition - Is in fixed position mode
	   * @returns {Object} Coordinates of the boundaries
	   */
	  function getBoundaries(popper, reference, padding, boundariesElement) {
	    var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

	    // NOTE: 1 DOM access here

	    var boundaries = { top: 0, left: 0 };
	    var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);

	    // Handle viewport case
	    if (boundariesElement === 'viewport') {
	      boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
	    } else {
	      // Handle other cases based on DOM element used as boundaries
	      var boundariesNode = void 0;
	      if (boundariesElement === 'scrollParent') {
	        boundariesNode = getScrollParent(getParentNode(reference));
	        if (boundariesNode.nodeName === 'BODY') {
	          boundariesNode = popper.ownerDocument.documentElement;
	        }
	      } else if (boundariesElement === 'window') {
	        boundariesNode = popper.ownerDocument.documentElement;
	      } else {
	        boundariesNode = boundariesElement;
	      }

	      var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

	      // In case of HTML, we need a different computation
	      if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
	        var _getWindowSizes = getWindowSizes(popper.ownerDocument),
	            height = _getWindowSizes.height,
	            width = _getWindowSizes.width;

	        boundaries.top += offsets.top - offsets.marginTop;
	        boundaries.bottom = height + offsets.top;
	        boundaries.left += offsets.left - offsets.marginLeft;
	        boundaries.right = width + offsets.left;
	      } else {
	        // for all the other DOM elements, this one is good
	        boundaries = offsets;
	      }
	    }

	    // Add paddings
	    padding = padding || 0;
	    var isPaddingNumber = typeof padding === 'number';
	    boundaries.left += isPaddingNumber ? padding : padding.left || 0;
	    boundaries.top += isPaddingNumber ? padding : padding.top || 0;
	    boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
	    boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

	    return boundaries;
	  }

	  function getArea(_ref) {
	    var width = _ref.width,
	        height = _ref.height;

	    return width * height;
	  }

	  /**
	   * Utility used to transform the `auto` placement to the placement with more
	   * available space.
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Object} data - The data object generated by update method
	   * @argument {Object} options - Modifiers configuration and options
	   * @returns {Object} The data object, properly modified
	   */
	  function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
	    var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

	    if (placement.indexOf('auto') === -1) {
	      return placement;
	    }

	    var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

	    var rects = {
	      top: {
	        width: boundaries.width,
	        height: refRect.top - boundaries.top
	      },
	      right: {
	        width: boundaries.right - refRect.right,
	        height: boundaries.height
	      },
	      bottom: {
	        width: boundaries.width,
	        height: boundaries.bottom - refRect.bottom
	      },
	      left: {
	        width: refRect.left - boundaries.left,
	        height: boundaries.height
	      }
	    };

	    var sortedAreas = Object.keys(rects).map(function (key) {
	      return _extends({
	        key: key
	      }, rects[key], {
	        area: getArea(rects[key])
	      });
	    }).sort(function (a, b) {
	      return b.area - a.area;
	    });

	    var filteredAreas = sortedAreas.filter(function (_ref2) {
	      var width = _ref2.width,
	          height = _ref2.height;
	      return width >= popper.clientWidth && height >= popper.clientHeight;
	    });

	    var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

	    var variation = placement.split('-')[1];

	    return computedPlacement + (variation ? '-' + variation : '');
	  }

	  /**
	   * Get offsets to the reference element
	   * @method
	   * @memberof Popper.Utils
	   * @param {Object} state
	   * @param {Element} popper - the popper element
	   * @param {Element} reference - the reference element (the popper will be relative to this)
	   * @param {Element} fixedPosition - is in fixed position mode
	   * @returns {Object} An object containing the offsets which will be applied to the popper
	   */
	  function getReferenceOffsets(state, popper, reference) {
	    var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	    var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
	    return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
	  }

	  /**
	   * Get the outer sizes of the given element (offset size + margins)
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Element} element
	   * @returns {Object} object containing width and height properties
	   */
	  function getOuterSizes(element) {
	    var window = element.ownerDocument.defaultView;
	    var styles = window.getComputedStyle(element);
	    var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
	    var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
	    var result = {
	      width: element.offsetWidth + y,
	      height: element.offsetHeight + x
	    };
	    return result;
	  }

	  /**
	   * Get the opposite placement of the given one
	   * @method
	   * @memberof Popper.Utils
	   * @argument {String} placement
	   * @returns {String} flipped placement
	   */
	  function getOppositePlacement(placement) {
	    var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
	    return placement.replace(/left|right|bottom|top/g, function (matched) {
	      return hash[matched];
	    });
	  }

	  /**
	   * Get offsets to the popper
	   * @method
	   * @memberof Popper.Utils
	   * @param {Object} position - CSS position the Popper will get applied
	   * @param {HTMLElement} popper - the popper element
	   * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
	   * @param {String} placement - one of the valid placement options
	   * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
	   */
	  function getPopperOffsets(popper, referenceOffsets, placement) {
	    placement = placement.split('-')[0];

	    // Get popper node sizes
	    var popperRect = getOuterSizes(popper);

	    // Add position, width and height to our offsets object
	    var popperOffsets = {
	      width: popperRect.width,
	      height: popperRect.height
	    };

	    // depending by the popper placement we have to compute its offsets slightly differently
	    var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
	    var mainSide = isHoriz ? 'top' : 'left';
	    var secondarySide = isHoriz ? 'left' : 'top';
	    var measurement = isHoriz ? 'height' : 'width';
	    var secondaryMeasurement = !isHoriz ? 'height' : 'width';

	    popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
	    if (placement === secondarySide) {
	      popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
	    } else {
	      popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
	    }

	    return popperOffsets;
	  }

	  /**
	   * Mimics the `find` method of Array
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Array} arr
	   * @argument prop
	   * @argument value
	   * @returns index or -1
	   */
	  function find(arr, check) {
	    // use native find if supported
	    if (Array.prototype.find) {
	      return arr.find(check);
	    }

	    // use `filter` to obtain the same behavior of `find`
	    return arr.filter(check)[0];
	  }

	  /**
	   * Return the index of the matching object
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Array} arr
	   * @argument prop
	   * @argument value
	   * @returns index or -1
	   */
	  function findIndex(arr, prop, value) {
	    // use native findIndex if supported
	    if (Array.prototype.findIndex) {
	      return arr.findIndex(function (cur) {
	        return cur[prop] === value;
	      });
	    }

	    // use `find` + `indexOf` if `findIndex` isn't supported
	    var match = find(arr, function (obj) {
	      return obj[prop] === value;
	    });
	    return arr.indexOf(match);
	  }

	  /**
	   * Loop trough the list of modifiers and run them in order,
	   * each of them will then edit the data object.
	   * @method
	   * @memberof Popper.Utils
	   * @param {dataObject} data
	   * @param {Array} modifiers
	   * @param {String} ends - Optional modifier name used as stopper
	   * @returns {dataObject}
	   */
	  function runModifiers(modifiers, data, ends) {
	    var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

	    modifiersToRun.forEach(function (modifier) {
	      if (modifier['function']) {
	        // eslint-disable-line dot-notation
	        console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
	      }
	      var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
	      if (modifier.enabled && isFunction(fn)) {
	        // Add properties to offsets to make them a complete clientRect object
	        // we do this before each modifier to make sure the previous one doesn't
	        // mess with these values
	        data.offsets.popper = getClientRect(data.offsets.popper);
	        data.offsets.reference = getClientRect(data.offsets.reference);

	        data = fn(data, modifier);
	      }
	    });

	    return data;
	  }

	  /**
	   * Updates the position of the popper, computing the new offsets and applying
	   * the new style.<br />
	   * Prefer `scheduleUpdate` over `update` because of performance reasons.
	   * @method
	   * @memberof Popper
	   */
	  function update() {
	    // if popper is destroyed, don't perform any further update
	    if (this.state.isDestroyed) {
	      return;
	    }

	    var data = {
	      instance: this,
	      styles: {},
	      arrowStyles: {},
	      attributes: {},
	      flipped: false,
	      offsets: {}
	    };

	    // compute reference element offsets
	    data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

	    // compute auto placement, store placement inside the data object,
	    // modifiers will be able to edit `placement` if needed
	    // and refer to originalPlacement to know the original value
	    data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

	    // store the computed placement inside `originalPlacement`
	    data.originalPlacement = data.placement;

	    data.positionFixed = this.options.positionFixed;

	    // compute the popper offsets
	    data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

	    data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

	    // run the modifiers
	    data = runModifiers(this.modifiers, data);

	    // the first `update` will call `onCreate` callback
	    // the other ones will call `onUpdate` callback
	    if (!this.state.isCreated) {
	      this.state.isCreated = true;
	      this.options.onCreate(data);
	    } else {
	      this.options.onUpdate(data);
	    }
	  }

	  /**
	   * Helper used to know if the given modifier is enabled.
	   * @method
	   * @memberof Popper.Utils
	   * @returns {Boolean}
	   */
	  function isModifierEnabled(modifiers, modifierName) {
	    return modifiers.some(function (_ref) {
	      var name = _ref.name,
	          enabled = _ref.enabled;
	      return enabled && name === modifierName;
	    });
	  }

	  /**
	   * Get the prefixed supported property name
	   * @method
	   * @memberof Popper.Utils
	   * @argument {String} property (camelCase)
	   * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
	   */
	  function getSupportedPropertyName(property) {
	    var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
	    var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

	    for (var i = 0; i < prefixes.length; i++) {
	      var prefix = prefixes[i];
	      var toCheck = prefix ? '' + prefix + upperProp : property;
	      if (typeof document.body.style[toCheck] !== 'undefined') {
	        return toCheck;
	      }
	    }
	    return null;
	  }

	  /**
	   * Destroys the popper.
	   * @method
	   * @memberof Popper
	   */
	  function destroy() {
	    this.state.isDestroyed = true;

	    // touch DOM only if `applyStyle` modifier is enabled
	    if (isModifierEnabled(this.modifiers, 'applyStyle')) {
	      this.popper.removeAttribute('x-placement');
	      this.popper.style.position = '';
	      this.popper.style.top = '';
	      this.popper.style.left = '';
	      this.popper.style.right = '';
	      this.popper.style.bottom = '';
	      this.popper.style.willChange = '';
	      this.popper.style[getSupportedPropertyName('transform')] = '';
	    }

	    this.disableEventListeners();

	    // remove the popper if user explicity asked for the deletion on destroy
	    // do not use `remove` because IE11 doesn't support it
	    if (this.options.removeOnDestroy) {
	      this.popper.parentNode.removeChild(this.popper);
	    }
	    return this;
	  }

	  /**
	   * Get the window associated with the element
	   * @argument {Element} element
	   * @returns {Window}
	   */
	  function getWindow(element) {
	    var ownerDocument = element.ownerDocument;
	    return ownerDocument ? ownerDocument.defaultView : window;
	  }

	  function attachToScrollParents(scrollParent, event, callback, scrollParents) {
	    var isBody = scrollParent.nodeName === 'BODY';
	    var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
	    target.addEventListener(event, callback, { passive: true });

	    if (!isBody) {
	      attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
	    }
	    scrollParents.push(target);
	  }

	  /**
	   * Setup needed event listeners used to update the popper position
	   * @method
	   * @memberof Popper.Utils
	   * @private
	   */
	  function setupEventListeners(reference, options, state, updateBound) {
	    // Resize event listener on window
	    state.updateBound = updateBound;
	    getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

	    // Scroll event listener on scroll parents
	    var scrollElement = getScrollParent(reference);
	    attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
	    state.scrollElement = scrollElement;
	    state.eventsEnabled = true;

	    return state;
	  }

	  /**
	   * It will add resize/scroll events and start recalculating
	   * position of the popper element when they are triggered.
	   * @method
	   * @memberof Popper
	   */
	  function enableEventListeners() {
	    if (!this.state.eventsEnabled) {
	      this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
	    }
	  }

	  /**
	   * Remove event listeners used to update the popper position
	   * @method
	   * @memberof Popper.Utils
	   * @private
	   */
	  function removeEventListeners(reference, state) {
	    // Remove resize event listener on window
	    getWindow(reference).removeEventListener('resize', state.updateBound);

	    // Remove scroll event listener on scroll parents
	    state.scrollParents.forEach(function (target) {
	      target.removeEventListener('scroll', state.updateBound);
	    });

	    // Reset state
	    state.updateBound = null;
	    state.scrollParents = [];
	    state.scrollElement = null;
	    state.eventsEnabled = false;
	    return state;
	  }

	  /**
	   * It will remove resize/scroll events and won't recalculate popper position
	   * when they are triggered. It also won't trigger `onUpdate` callback anymore,
	   * unless you call `update` method manually.
	   * @method
	   * @memberof Popper
	   */
	  function disableEventListeners() {
	    if (this.state.eventsEnabled) {
	      cancelAnimationFrame(this.scheduleUpdate);
	      this.state = removeEventListeners(this.reference, this.state);
	    }
	  }

	  /**
	   * Tells if a given input is a number
	   * @method
	   * @memberof Popper.Utils
	   * @param {*} input to check
	   * @return {Boolean}
	   */
	  function isNumeric(n) {
	    return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
	  }

	  /**
	   * Set the style to the given popper
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Element} element - Element to apply the style to
	   * @argument {Object} styles
	   * Object with a list of properties and values which will be applied to the element
	   */
	  function setStyles(element, styles) {
	    Object.keys(styles).forEach(function (prop) {
	      var unit = '';
	      // add unit if the value is numeric and is one of the following
	      if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
	        unit = 'px';
	      }
	      element.style[prop] = styles[prop] + unit;
	    });
	  }

	  /**
	   * Set the attributes to the given popper
	   * @method
	   * @memberof Popper.Utils
	   * @argument {Element} element - Element to apply the attributes to
	   * @argument {Object} styles
	   * Object with a list of properties and values which will be applied to the element
	   */
	  function setAttributes(element, attributes) {
	    Object.keys(attributes).forEach(function (prop) {
	      var value = attributes[prop];
	      if (value !== false) {
	        element.setAttribute(prop, attributes[prop]);
	      } else {
	        element.removeAttribute(prop);
	      }
	    });
	  }

	  /**
	   * @function
	   * @memberof Modifiers
	   * @argument {Object} data - The data object generated by `update` method
	   * @argument {Object} data.styles - List of style properties - values to apply to popper element
	   * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
	   * @argument {Object} options - Modifiers configuration and options
	   * @returns {Object} The same data object
	   */
	  function applyStyle(data) {
	    // any property present in `data.styles` will be applied to the popper,
	    // in this way we can make the 3rd party modifiers add custom styles to it
	    // Be aware, modifiers could override the properties defined in the previous
	    // lines of this modifier!
	    setStyles(data.instance.popper, data.styles);

	    // any property present in `data.attributes` will be applied to the popper,
	    // they will be set as HTML attributes of the element
	    setAttributes(data.instance.popper, data.attributes);

	    // if arrowElement is defined and arrowStyles has some properties
	    if (data.arrowElement && Object.keys(data.arrowStyles).length) {
	      setStyles(data.arrowElement, data.arrowStyles);
	    }

	    return data;
	  }

	  /**
	   * Set the x-placement attribute before everything else because it could be used
	   * to add margins to the popper margins needs to be calculated to get the
	   * correct popper offsets.
	   * @method
	   * @memberof Popper.modifiers
	   * @param {HTMLElement} reference - The reference element used to position the popper
	   * @param {HTMLElement} popper - The HTML element used as popper
	   * @param {Object} options - Popper.js options
	   */
	  function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
	    // compute reference element offsets
	    var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

	    // compute auto placement, store placement inside the data object,
	    // modifiers will be able to edit `placement` if needed
	    // and refer to originalPlacement to know the original value
	    var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

	    popper.setAttribute('x-placement', placement);

	    // Apply `position` to popper before anything else because
	    // without the position applied we can't guarantee correct computations
	    setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

	    return options;
	  }

	  /**
	   * @function
	   * @memberof Popper.Utils
	   * @argument {Object} data - The data object generated by `update` method
	   * @argument {Boolean} shouldRound - If the offsets should be rounded at all
	   * @returns {Object} The popper's position offsets rounded
	   *
	   * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
	   * good as it can be within reason.
	   * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
	   *
	   * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
	   * as well on High DPI screens).
	   *
	   * Firefox prefers no rounding for positioning and does not have blurriness on
	   * high DPI screens.
	   *
	   * Only horizontal placement and left/right values need to be considered.
	   */
	  function getRoundedOffsets(data, shouldRound) {
	    var _data$offsets = data.offsets,
	        popper = _data$offsets.popper,
	        reference = _data$offsets.reference;
	    var round = Math.round,
	        floor = Math.floor;

	    var noRound = function noRound(v) {
	      return v;
	    };

	    var referenceWidth = round(reference.width);
	    var popperWidth = round(popper.width);

	    var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
	    var isVariation = data.placement.indexOf('-') !== -1;
	    var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
	    var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

	    var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
	    var verticalToInteger = !shouldRound ? noRound : round;

	    return {
	      left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
	      top: verticalToInteger(popper.top),
	      bottom: verticalToInteger(popper.bottom),
	      right: horizontalToInteger(popper.right)
	    };
	  }

	  var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

	  /**
	   * @function
	   * @memberof Modifiers
	   * @argument {Object} data - The data object generated by `update` method
	   * @argument {Object} options - Modifiers configuration and options
	   * @returns {Object} The data object, properly modified
	   */
	  function computeStyle(data, options) {
	    var x = options.x,
	        y = options.y;
	    var popper = data.offsets.popper;

	    // Remove this legacy support in Popper.js v2

	    var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
	      return modifier.name === 'applyStyle';
	    }).gpuAcceleration;
	    if (legacyGpuAccelerationOption !== undefined) {
	      console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
	    }
	    var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

	    var offsetParent = getOffsetParent(data.instance.popper);
	    var offsetParentRect = getBoundingClientRect(offsetParent);

	    // Styles
	    var styles = {
	      position: popper.position
	    };

	    var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

	    var sideA = x === 'bottom' ? 'top' : 'bottom';
	    var sideB = y === 'right' ? 'left' : 'right';

	    // if gpuAcceleration is set to `true` and transform is supported,
	    //  we use `translate3d` to apply the position to the popper we
	    // automatically use the supported prefixed version if needed
	    var prefixedProperty = getSupportedPropertyName('transform');

	    // now, let's make a step back and look at this code closely (wtf?)
	    // If the content of the popper grows once it's been positioned, it
	    // may happen that the popper gets misplaced because of the new content
	    // overflowing its reference element
	    // To avoid this problem, we provide two options (x and y), which allow
	    // the consumer to define the offset origin.
	    // If we position a popper on top of a reference element, we can set
	    // `x` to `top` to make the popper grow towards its top instead of
	    // its bottom.
	    var left = void 0,
	        top = void 0;
	    if (sideA === 'bottom') {
	      // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
	      // and not the bottom of the html element
	      if (offsetParent.nodeName === 'HTML') {
	        top = -offsetParent.clientHeight + offsets.bottom;
	      } else {
	        top = -offsetParentRect.height + offsets.bottom;
	      }
	    } else {
	      top = offsets.top;
	    }
	    if (sideB === 'right') {
	      if (offsetParent.nodeName === 'HTML') {
	        left = -offsetParent.clientWidth + offsets.right;
	      } else {
	        left = -offsetParentRect.width + offsets.right;
	      }
	    } else {
	      left = offsets.left;
	    }
	    if (gpuAcceleration && prefixedProperty) {
	      styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
	      styles[sideA] = 0;
	      styles[sideB] = 0;
	      styles.willChange = 'transform';
	    } else {
	      // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
	      var invertTop = sideA === 'bottom' ? -1 : 1;
	      var invertLeft = sideB === 'right' ? -1 : 1;
	      styles[sideA] = top * invertTop;
	      styles[sideB] = left * invertLeft;
	      styles.willChange = sideA + ', ' + sideB;
	    }

	    // Attributes
	    var attributes = {
	      'x-placement': data.placement
	    };

	    // Update `data` attributes, styles and arrowStyles
	    data.attributes = _extends({}, attributes, data.attributes);
	    data.styles = _extends({}, styles, data.styles);
	    data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

	    return data;
	  }

	  /**
	   * Helper used to know if the given modifier depends from another one.<br />
	   * It checks if the needed modifier is listed and enabled.
	   * @method
	   * @memberof Popper.Utils
	   * @param {Array} modifiers - list of modifiers
	   * @param {String} requestingName - name of requesting modifier
	   * @param {String} requestedName - name of requested modifier
	   * @returns {Boolean}
	   */
	  function isModifierRequired(modifiers, requestingName, requestedName) {
	    var requesting = find(modifiers, function (_ref) {
	      var name = _ref.name;
	      return name === requestingName;
	    });

	    var isRequired = !!requesting && modifiers.some(function (modifier) {
	      return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
	    });

	    if (!isRequired) {
	      var _requesting = '`' + requestingName + '`';
	      var requested = '`' + requestedName + '`';
	      console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
	    }
	    return isRequired;
	  }

	  /**
	   * @function
	   * @memberof Modifiers
	   * @argument {Object} data - The data object generated by update method
	   * @argument {Object} options - Modifiers configuration and options
	   * @returns {Object} The data object, properly modified
	   */
	  function arrow(data, options) {
	    var _data$offsets$arrow;

	    // arrow depends on keepTogether in order to work
	    if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
	      return data;
	    }

	    var arrowElement = options.element;

	    // if arrowElement is a string, suppose it's a CSS selector
	    if (typeof arrowElement === 'string') {
	      arrowElement = data.instance.popper.querySelector(arrowElement);

	      // if arrowElement is not found, don't run the modifier
	      if (!arrowElement) {
	        return data;
	      }
	    } else {
	      // if the arrowElement isn't a query selector we must check that the
	      // provided DOM node is child of its popper node
	      if (!data.instance.popper.contains(arrowElement)) {
	        console.warn('WARNING: `arrow.element` must be child of its popper element!');
	        return data;
	      }
	    }

	    var placement = data.placement.split('-')[0];
	    var _data$offsets = data.offsets,
	        popper = _data$offsets.popper,
	        reference = _data$offsets.reference;

	    var isVertical = ['left', 'right'].indexOf(placement) !== -1;

	    var len = isVertical ? 'height' : 'width';
	    var sideCapitalized = isVertical ? 'Top' : 'Left';
	    var side = sideCapitalized.toLowerCase();
	    var altSide = isVertical ? 'left' : 'top';
	    var opSide = isVertical ? 'bottom' : 'right';
	    var arrowElementSize = getOuterSizes(arrowElement)[len];

	    //
	    // extends keepTogether behavior making sure the popper and its
	    // reference have enough pixels in conjunction
	    //

	    // top/left side
	    if (reference[opSide] - arrowElementSize < popper[side]) {
	      data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
	    }
	    // bottom/right side
	    if (reference[side] + arrowElementSize > popper[opSide]) {
	      data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
	    }
	    data.offsets.popper = getClientRect(data.offsets.popper);

	    // compute center of the popper
	    var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

	    // Compute the sideValue using the updated popper offsets
	    // take popper margin in account because we don't have this info available
	    var css = getStyleComputedProperty(data.instance.popper);
	    var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
	    var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
	    var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

	    // prevent arrowElement from being placed not contiguously to its popper
	    sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

	    data.arrowElement = arrowElement;
	    data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty$1(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty$1(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

	    return data;
	  }

	  /**
	   * Get the opposite placement variation of the given one
	   * @method
	   * @memberof Popper.Utils
	   * @argument {String} placement variation
	   * @returns {String} flipped placement variation
	   */
	  function getOppositeVariation(variation) {
	    if (variation === 'end') {
	      return 'start';
	    } else if (variation === 'start') {
	      return 'end';
	    }
	    return variation;
	  }

	  /**
	   * List of accepted placements to use as values of the `placement` option.<br />
	   * Valid placements are:
	   * - `auto`
	   * - `top`
	   * - `right`
	   * - `bottom`
	   * - `left`
	   *
	   * Each placement can have a variation from this list:
	   * - `-start`
	   * - `-end`
	   *
	   * Variations are interpreted easily if you think of them as the left to right
	   * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
	   * is right.<br />
	   * Vertically (`left` and `right`), `start` is top and `end` is bottom.
	   *
	   * Some valid examples are:
	   * - `top-end` (on top of reference, right aligned)
	   * - `right-start` (on right of reference, top aligned)
	   * - `bottom` (on bottom, centered)
	   * - `auto-end` (on the side with more space available, alignment depends by placement)
	   *
	   * @static
	   * @type {Array}
	   * @enum {String}
	   * @readonly
	   * @method placements
	   * @memberof Popper
	   */
	  var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

	  // Get rid of `auto` `auto-start` and `auto-end`
	  var validPlacements = placements.slice(3);

	  /**
	   * Given an initial placement, returns all the subsequent placements
	   * clockwise (or counter-clockwise).
	   *
	   * @method
	   * @memberof Popper.Utils
	   * @argument {String} placement - A valid placement (it accepts variations)
	   * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
	   * @returns {Array} placements including their variations
	   */
	  function clockwise(placement) {
	    var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	    var index = validPlacements.indexOf(placement);
	    var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
	    return counter ? arr.reverse() : arr;
	  }

	  var BEHAVIORS = {
	    FLIP: 'flip',
	    CLOCKWISE: 'clockwise',
	    COUNTERCLOCKWISE: 'counterclockwise'
	  };

	  /**
	   * @function
	   * @memberof Modifiers
	   * @argument {Object} data - The data object generated by update method
	   * @argument {Object} options - Modifiers configuration and options
	   * @returns {Object} The data object, properly modified
	   */
	  function flip(data, options) {
	    // if `inner` modifier is enabled, we can't use the `flip` modifier
	    if (isModifierEnabled(data.instance.modifiers, 'inner')) {
	      return data;
	    }

	    if (data.flipped && data.placement === data.originalPlacement) {
	      // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
	      return data;
	    }

	    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

	    var placement = data.placement.split('-')[0];
	    var placementOpposite = getOppositePlacement(placement);
	    var variation = data.placement.split('-')[1] || '';

	    var flipOrder = [];

	    switch (options.behavior) {
	      case BEHAVIORS.FLIP:
	        flipOrder = [placement, placementOpposite];
	        break;
	      case BEHAVIORS.CLOCKWISE:
	        flipOrder = clockwise(placement);
	        break;
	      case BEHAVIORS.COUNTERCLOCKWISE:
	        flipOrder = clockwise(placement, true);
	        break;
	      default:
	        flipOrder = options.behavior;
	    }

	    flipOrder.forEach(function (step, index) {
	      if (placement !== step || flipOrder.length === index + 1) {
	        return data;
	      }

	      placement = data.placement.split('-')[0];
	      placementOpposite = getOppositePlacement(placement);

	      var popperOffsets = data.offsets.popper;
	      var refOffsets = data.offsets.reference;

	      // using floor because the reference offsets may contain decimals we are not going to consider here
	      var floor = Math.floor;
	      var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

	      var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
	      var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
	      var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
	      var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

	      var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

	      // flip the variation if required
	      var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
	      var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

	      if (overlapsRef || overflowsBoundaries || flippedVariation) {
	        // this boolean to detect any flip loop
	        data.flipped = true;

	        if (overlapsRef || overflowsBoundaries) {
	          placement = flipOrder[index + 1];
	        }

	        if (flippedVariation) {
	          variation = getOppositeVariation(variation);
	        }

	        data.placement = placement + (variation ? '-' + variation : '');

	        // this object contains `position`, we want to preserve it along with
	        // any additional property we may add in the future
	        data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

	        data = runModifiers(data.instance.modifiers, data, 'flip');
	      }
	    });
	    return data;
	  }

	  /**
	   * @function
	   * @memberof Modifiers
	   * @argument {Object} data - The data object generated by update method
	   * @argument {Object} options - Modifiers configuration and options
	   * @returns {Object} The data object, properly modified
	   */
	  function keepTogether(data) {
	    var _data$offsets = data.offsets,
	        popper = _data$offsets.popper,
	        reference = _data$offsets.reference;

	    var placement = data.placement.split('-')[0];
	    var floor = Math.floor;
	    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
	    var side = isVertical ? 'right' : 'bottom';
	    var opSide = isVertical ? 'left' : 'top';
	    var measurement = isVertical ? 'width' : 'height';

	    if (popper[side] < floor(reference[opSide])) {
	      data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
	    }
	    if (popper[opSide] > floor(reference[side])) {
	      data.offsets.popper[opSide] = floor(reference[side]);
	    }

	    return data;
	  }

	  /**
	   * Converts a string containing value + unit into a px value number
	   * @function
	   * @memberof {modifiers~offset}
	   * @private
	   * @argument {String} str - Value + unit string
	   * @argument {String} measurement - `height` or `width`
	   * @argument {Object} popperOffsets
	   * @argument {Object} referenceOffsets
	   * @returns {Number|String}
	   * Value in pixels, or original string if no values were extracted
	   */
	  function toValue(str, measurement, popperOffsets, referenceOffsets) {
	    // separate value from unit
	    var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
	    var value = +split[1];
	    var unit = split[2];

	    // If it's not a number it's an operator, I guess
	    if (!value) {
	      return str;
	    }

	    if (unit.indexOf('%') === 0) {
	      var element = void 0;
	      switch (unit) {
	        case '%p':
	          element = popperOffsets;
	          break;
	        case '%':
	        case '%r':
	        default:
	          element = referenceOffsets;
	      }

	      var rect = getClientRect(element);
	      return rect[measurement] / 100 * value;
	    } else if (unit === 'vh' || unit === 'vw') {
	      // if is a vh or vw, we calculate the size based on the viewport
	      var size = void 0;
	      if (unit === 'vh') {
	        size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
	      } else {
	        size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
	      }
	      return size / 100 * value;
	    } else {
	      // if is an explicit pixel unit, we get rid of the unit and keep the value
	      // if is an implicit unit, it's px, and we return just the value
	      return value;
	    }
	  }

	  /**
	   * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
	   * @function
	   * @memberof {modifiers~offset}
	   * @private
	   * @argument {String} offset
	   * @argument {Object} popperOffsets
	   * @argument {Object} referenceOffsets
	   * @argument {String} basePlacement
	   * @returns {Array} a two cells array with x and y offsets in numbers
	   */
	  function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
	    var offsets = [0, 0];

	    // Use height if placement is left or right and index is 0 otherwise use width
	    // in this way the first offset will use an axis and the second one
	    // will use the other one
	    var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

	    // Split the offset string to obtain a list of values and operands
	    // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
	    var fragments = offset.split(/(\+|\-)/).map(function (frag) {
	      return frag.trim();
	    });

	    // Detect if the offset string contains a pair of values or a single one
	    // they could be separated by comma or space
	    var divider = fragments.indexOf(find(fragments, function (frag) {
	      return frag.search(/,|\s/) !== -1;
	    }));

	    if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
	      console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
	    }

	    // If divider is found, we divide the list of values and operands to divide
	    // them by ofset X and Y.
	    var splitRegex = /\s*,\s*|\s+/;
	    var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

	    // Convert the values with units to absolute pixels to allow our computations
	    ops = ops.map(function (op, index) {
	      // Most of the units rely on the orientation of the popper
	      var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
	      var mergeWithPrevious = false;
	      return op
	      // This aggregates any `+` or `-` sign that aren't considered operators
	      // e.g.: 10 + +5 => [10, +, +5]
	      .reduce(function (a, b) {
	        if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
	          a[a.length - 1] = b;
	          mergeWithPrevious = true;
	          return a;
	        } else if (mergeWithPrevious) {
	          a[a.length - 1] += b;
	          mergeWithPrevious = false;
	          return a;
	        } else {
	          return a.concat(b);
	        }
	      }, [])
	      // Here we convert the string values into number values (in px)
	      .map(function (str) {
	        return toValue(str, measurement, popperOffsets, referenceOffsets);
	      });
	    });

	    // Loop trough the offsets arrays and execute the operations
	    ops.forEach(function (op, index) {
	      op.forEach(function (frag, index2) {
	        if (isNumeric(frag)) {
	          offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
	        }
	      });
	    });
	    return offsets;
	  }

	  /**
	   * @function
	   * @memberof Modifiers
	   * @argument {Object} data - The data object generated by update method
	   * @argument {Object} options - Modifiers configuration and options
	   * @argument {Number|String} options.offset=0
	   * The offset value as described in the modifier description
	   * @returns {Object} The data object, properly modified
	   */
	  function offset$1(data, _ref) {
	    var offset = _ref.offset;
	    var placement = data.placement,
	        _data$offsets = data.offsets,
	        popper = _data$offsets.popper,
	        reference = _data$offsets.reference;

	    var basePlacement = placement.split('-')[0];

	    var offsets = void 0;
	    if (isNumeric(+offset)) {
	      offsets = [+offset, 0];
	    } else {
	      offsets = parseOffset(offset, popper, reference, basePlacement);
	    }

	    if (basePlacement === 'left') {
	      popper.top += offsets[0];
	      popper.left -= offsets[1];
	    } else if (basePlacement === 'right') {
	      popper.top += offsets[0];
	      popper.left += offsets[1];
	    } else if (basePlacement === 'top') {
	      popper.left += offsets[0];
	      popper.top -= offsets[1];
	    } else if (basePlacement === 'bottom') {
	      popper.left += offsets[0];
	      popper.top += offsets[1];
	    }

	    data.popper = popper;
	    return data;
	  }

	  /**
	   * @function
	   * @memberof Modifiers
	   * @argument {Object} data - The data object generated by `update` method
	   * @argument {Object} options - Modifiers configuration and options
	   * @returns {Object} The data object, properly modified
	   */
	  function preventOverflow(data, options) {
	    var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

	    // If offsetParent is the reference element, we really want to
	    // go one step up and use the next offsetParent as reference to
	    // avoid to make this modifier completely useless and look like broken
	    if (data.instance.reference === boundariesElement) {
	      boundariesElement = getOffsetParent(boundariesElement);
	    }

	    // NOTE: DOM access here
	    // resets the popper's position so that the document size can be calculated excluding
	    // the size of the popper element itself
	    var transformProp = getSupportedPropertyName('transform');
	    var popperStyles = data.instance.popper.style; // assignment to help minification
	    var top = popperStyles.top,
	        left = popperStyles.left,
	        transform = popperStyles[transformProp];

	    popperStyles.top = '';
	    popperStyles.left = '';
	    popperStyles[transformProp] = '';

	    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

	    // NOTE: DOM access here
	    // restores the original style properties after the offsets have been computed
	    popperStyles.top = top;
	    popperStyles.left = left;
	    popperStyles[transformProp] = transform;

	    options.boundaries = boundaries;

	    var order = options.priority;
	    var popper = data.offsets.popper;

	    var check = {
	      primary: function primary(placement) {
	        var value = popper[placement];
	        if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
	          value = Math.max(popper[placement], boundaries[placement]);
	        }
	        return defineProperty$1({}, placement, value);
	      },
	      secondary: function secondary(placement) {
	        var mainSide = placement === 'right' ? 'left' : 'top';
	        var value = popper[mainSide];
	        if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
	          value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
	        }
	        return defineProperty$1({}, mainSide, value);
	      }
	    };

	    order.forEach(function (placement) {
	      var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
	      popper = _extends({}, popper, check[side](placement));
	    });

	    data.offsets.popper = popper;

	    return data;
	  }

	  /**
	   * @function
	   * @memberof Modifiers
	   * @argument {Object} data - The data object generated by `update` method
	   * @argument {Object} options - Modifiers configuration and options
	   * @returns {Object} The data object, properly modified
	   */
	  function shift(data) {
	    var placement = data.placement;
	    var basePlacement = placement.split('-')[0];
	    var shiftvariation = placement.split('-')[1];

	    // if shift shiftvariation is specified, run the modifier
	    if (shiftvariation) {
	      var _data$offsets = data.offsets,
	          reference = _data$offsets.reference,
	          popper = _data$offsets.popper;

	      var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
	      var side = isVertical ? 'left' : 'top';
	      var measurement = isVertical ? 'width' : 'height';

	      var shiftOffsets = {
	        start: defineProperty$1({}, side, reference[side]),
	        end: defineProperty$1({}, side, reference[side] + reference[measurement] - popper[measurement])
	      };

	      data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
	    }

	    return data;
	  }

	  /**
	   * @function
	   * @memberof Modifiers
	   * @argument {Object} data - The data object generated by update method
	   * @argument {Object} options - Modifiers configuration and options
	   * @returns {Object} The data object, properly modified
	   */
	  function hide(data) {
	    if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
	      return data;
	    }

	    var refRect = data.offsets.reference;
	    var bound = find(data.instance.modifiers, function (modifier) {
	      return modifier.name === 'preventOverflow';
	    }).boundaries;

	    if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
	      // Avoid unnecessary DOM access if visibility hasn't changed
	      if (data.hide === true) {
	        return data;
	      }

	      data.hide = true;
	      data.attributes['x-out-of-boundaries'] = '';
	    } else {
	      // Avoid unnecessary DOM access if visibility hasn't changed
	      if (data.hide === false) {
	        return data;
	      }

	      data.hide = false;
	      data.attributes['x-out-of-boundaries'] = false;
	    }

	    return data;
	  }

	  /**
	   * @function
	   * @memberof Modifiers
	   * @argument {Object} data - The data object generated by `update` method
	   * @argument {Object} options - Modifiers configuration and options
	   * @returns {Object} The data object, properly modified
	   */
	  function inner(data) {
	    var placement = data.placement;
	    var basePlacement = placement.split('-')[0];
	    var _data$offsets = data.offsets,
	        popper = _data$offsets.popper,
	        reference = _data$offsets.reference;

	    var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

	    var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

	    popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

	    data.placement = getOppositePlacement(placement);
	    data.offsets.popper = getClientRect(popper);

	    return data;
	  }

	  /**
	   * Modifier function, each modifier can have a function of this type assigned
	   * to its `fn` property.<br />
	   * These functions will be called on each update, this means that you must
	   * make sure they are performant enough to avoid performance bottlenecks.
	   *
	   * @function ModifierFn
	   * @argument {dataObject} data - The data object generated by `update` method
	   * @argument {Object} options - Modifiers configuration and options
	   * @returns {dataObject} The data object, properly modified
	   */

	  /**
	   * Modifiers are plugins used to alter the behavior of your poppers.<br />
	   * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
	   * needed by the library.
	   *
	   * Usually you don't want to override the `order`, `fn` and `onLoad` props.
	   * All the other properties are configurations that could be tweaked.
	   * @namespace modifiers
	   */
	  var modifiers = {
	    /**
	     * Modifier used to shift the popper on the start or end of its reference
	     * element.<br />
	     * It will read the variation of the `placement` property.<br />
	     * It can be one either `-end` or `-start`.
	     * @memberof modifiers
	     * @inner
	     */
	    shift: {
	      /** @prop {number} order=100 - Index used to define the order of execution */
	      order: 100,
	      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	      enabled: true,
	      /** @prop {ModifierFn} */
	      fn: shift
	    },

	    /**
	     * The `offset` modifier can shift your popper on both its axis.
	     *
	     * It accepts the following units:
	     * - `px` or unit-less, interpreted as pixels
	     * - `%` or `%r`, percentage relative to the length of the reference element
	     * - `%p`, percentage relative to the length of the popper element
	     * - `vw`, CSS viewport width unit
	     * - `vh`, CSS viewport height unit
	     *
	     * For length is intended the main axis relative to the placement of the popper.<br />
	     * This means that if the placement is `top` or `bottom`, the length will be the
	     * `width`. In case of `left` or `right`, it will be the `height`.
	     *
	     * You can provide a single value (as `Number` or `String`), or a pair of values
	     * as `String` divided by a comma or one (or more) white spaces.<br />
	     * The latter is a deprecated method because it leads to confusion and will be
	     * removed in v2.<br />
	     * Additionally, it accepts additions and subtractions between different units.
	     * Note that multiplications and divisions aren't supported.
	     *
	     * Valid examples are:
	     * ```
	     * 10
	     * '10%'
	     * '10, 10'
	     * '10%, 10'
	     * '10 + 10%'
	     * '10 - 5vh + 3%'
	     * '-10px + 5vh, 5px - 6%'
	     * ```
	     * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
	     * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
	     * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
	     *
	     * @memberof modifiers
	     * @inner
	     */
	    offset: {
	      /** @prop {number} order=200 - Index used to define the order of execution */
	      order: 200,
	      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	      enabled: true,
	      /** @prop {ModifierFn} */
	      fn: offset$1,
	      /** @prop {Number|String} offset=0
	       * The offset value as described in the modifier description
	       */
	      offset: 0
	    },

	    /**
	     * Modifier used to prevent the popper from being positioned outside the boundary.
	     *
	     * A scenario exists where the reference itself is not within the boundaries.<br />
	     * We can say it has "escaped the boundaries" — or just "escaped".<br />
	     * In this case we need to decide whether the popper should either:
	     *
	     * - detach from the reference and remain "trapped" in the boundaries, or
	     * - if it should ignore the boundary and "escape with its reference"
	     *
	     * When `escapeWithReference` is set to`true` and reference is completely
	     * outside its boundaries, the popper will overflow (or completely leave)
	     * the boundaries in order to remain attached to the edge of the reference.
	     *
	     * @memberof modifiers
	     * @inner
	     */
	    preventOverflow: {
	      /** @prop {number} order=300 - Index used to define the order of execution */
	      order: 300,
	      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	      enabled: true,
	      /** @prop {ModifierFn} */
	      fn: preventOverflow,
	      /**
	       * @prop {Array} [priority=['left','right','top','bottom']]
	       * Popper will try to prevent overflow following these priorities by default,
	       * then, it could overflow on the left and on top of the `boundariesElement`
	       */
	      priority: ['left', 'right', 'top', 'bottom'],
	      /**
	       * @prop {number} padding=5
	       * Amount of pixel used to define a minimum distance between the boundaries
	       * and the popper. This makes sure the popper always has a little padding
	       * between the edges of its container
	       */
	      padding: 5,
	      /**
	       * @prop {String|HTMLElement} boundariesElement='scrollParent'
	       * Boundaries used by the modifier. Can be `scrollParent`, `window`,
	       * `viewport` or any DOM element.
	       */
	      boundariesElement: 'scrollParent'
	    },

	    /**
	     * Modifier used to make sure the reference and its popper stay near each other
	     * without leaving any gap between the two. Especially useful when the arrow is
	     * enabled and you want to ensure that it points to its reference element.
	     * It cares only about the first axis. You can still have poppers with margin
	     * between the popper and its reference element.
	     * @memberof modifiers
	     * @inner
	     */
	    keepTogether: {
	      /** @prop {number} order=400 - Index used to define the order of execution */
	      order: 400,
	      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	      enabled: true,
	      /** @prop {ModifierFn} */
	      fn: keepTogether
	    },

	    /**
	     * This modifier is used to move the `arrowElement` of the popper to make
	     * sure it is positioned between the reference element and its popper element.
	     * It will read the outer size of the `arrowElement` node to detect how many
	     * pixels of conjunction are needed.
	     *
	     * It has no effect if no `arrowElement` is provided.
	     * @memberof modifiers
	     * @inner
	     */
	    arrow: {
	      /** @prop {number} order=500 - Index used to define the order of execution */
	      order: 500,
	      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	      enabled: true,
	      /** @prop {ModifierFn} */
	      fn: arrow,
	      /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
	      element: '[x-arrow]'
	    },

	    /**
	     * Modifier used to flip the popper's placement when it starts to overlap its
	     * reference element.
	     *
	     * Requires the `preventOverflow` modifier before it in order to work.
	     *
	     * **NOTE:** this modifier will interrupt the current update cycle and will
	     * restart it if it detects the need to flip the placement.
	     * @memberof modifiers
	     * @inner
	     */
	    flip: {
	      /** @prop {number} order=600 - Index used to define the order of execution */
	      order: 600,
	      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	      enabled: true,
	      /** @prop {ModifierFn} */
	      fn: flip,
	      /**
	       * @prop {String|Array} behavior='flip'
	       * The behavior used to change the popper's placement. It can be one of
	       * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
	       * placements (with optional variations)
	       */
	      behavior: 'flip',
	      /**
	       * @prop {number} padding=5
	       * The popper will flip if it hits the edges of the `boundariesElement`
	       */
	      padding: 5,
	      /**
	       * @prop {String|HTMLElement} boundariesElement='viewport'
	       * The element which will define the boundaries of the popper position.
	       * The popper will never be placed outside of the defined boundaries
	       * (except if `keepTogether` is enabled)
	       */
	      boundariesElement: 'viewport'
	    },

	    /**
	     * Modifier used to make the popper flow toward the inner of the reference element.
	     * By default, when this modifier is disabled, the popper will be placed outside
	     * the reference element.
	     * @memberof modifiers
	     * @inner
	     */
	    inner: {
	      /** @prop {number} order=700 - Index used to define the order of execution */
	      order: 700,
	      /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
	      enabled: false,
	      /** @prop {ModifierFn} */
	      fn: inner
	    },

	    /**
	     * Modifier used to hide the popper when its reference element is outside of the
	     * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
	     * be used to hide with a CSS selector the popper when its reference is
	     * out of boundaries.
	     *
	     * Requires the `preventOverflow` modifier before it in order to work.
	     * @memberof modifiers
	     * @inner
	     */
	    hide: {
	      /** @prop {number} order=800 - Index used to define the order of execution */
	      order: 800,
	      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	      enabled: true,
	      /** @prop {ModifierFn} */
	      fn: hide
	    },

	    /**
	     * Computes the style that will be applied to the popper element to gets
	     * properly positioned.
	     *
	     * Note that this modifier will not touch the DOM, it just prepares the styles
	     * so that `applyStyle` modifier can apply it. This separation is useful
	     * in case you need to replace `applyStyle` with a custom implementation.
	     *
	     * This modifier has `850` as `order` value to maintain backward compatibility
	     * with previous versions of Popper.js. Expect the modifiers ordering method
	     * to change in future major versions of the library.
	     *
	     * @memberof modifiers
	     * @inner
	     */
	    computeStyle: {
	      /** @prop {number} order=850 - Index used to define the order of execution */
	      order: 850,
	      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	      enabled: true,
	      /** @prop {ModifierFn} */
	      fn: computeStyle,
	      /**
	       * @prop {Boolean} gpuAcceleration=true
	       * If true, it uses the CSS 3D transformation to position the popper.
	       * Otherwise, it will use the `top` and `left` properties
	       */
	      gpuAcceleration: true,
	      /**
	       * @prop {string} [x='bottom']
	       * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
	       * Change this if your popper should grow in a direction different from `bottom`
	       */
	      x: 'bottom',
	      /**
	       * @prop {string} [x='left']
	       * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
	       * Change this if your popper should grow in a direction different from `right`
	       */
	      y: 'right'
	    },

	    /**
	     * Applies the computed styles to the popper element.
	     *
	     * All the DOM manipulations are limited to this modifier. This is useful in case
	     * you want to integrate Popper.js inside a framework or view library and you
	     * want to delegate all the DOM manipulations to it.
	     *
	     * Note that if you disable this modifier, you must make sure the popper element
	     * has its position set to `absolute` before Popper.js can do its work!
	     *
	     * Just disable this modifier and define your own to achieve the desired effect.
	     *
	     * @memberof modifiers
	     * @inner
	     */
	    applyStyle: {
	      /** @prop {number} order=900 - Index used to define the order of execution */
	      order: 900,
	      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	      enabled: true,
	      /** @prop {ModifierFn} */
	      fn: applyStyle,
	      /** @prop {Function} */
	      onLoad: applyStyleOnLoad,
	      /**
	       * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
	       * @prop {Boolean} gpuAcceleration=true
	       * If true, it uses the CSS 3D transformation to position the popper.
	       * Otherwise, it will use the `top` and `left` properties
	       */
	      gpuAcceleration: undefined
	    }
	  };

	  /**
	   * The `dataObject` is an object containing all the information used by Popper.js.
	   * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
	   * @name dataObject
	   * @property {Object} data.instance The Popper.js instance
	   * @property {String} data.placement Placement applied to popper
	   * @property {String} data.originalPlacement Placement originally defined on init
	   * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
	   * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
	   * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
	   * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
	   * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
	   * @property {Object} data.boundaries Offsets of the popper boundaries
	   * @property {Object} data.offsets The measurements of popper, reference and arrow elements
	   * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
	   * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
	   * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
	   */

	  /**
	   * Default options provided to Popper.js constructor.<br />
	   * These can be overridden using the `options` argument of Popper.js.<br />
	   * To override an option, simply pass an object with the same
	   * structure of the `options` object, as the 3rd argument. For example:
	   * ```
	   * new Popper(ref, pop, {
	   *   modifiers: {
	   *     preventOverflow: { enabled: false }
	   *   }
	   * })
	   * ```
	   * @type {Object}
	   * @static
	   * @memberof Popper
	   */
	  var Defaults = {
	    /**
	     * Popper's placement.
	     * @prop {Popper.placements} placement='bottom'
	     */
	    placement: 'bottom',

	    /**
	     * Set this to true if you want popper to position it self in 'fixed' mode
	     * @prop {Boolean} positionFixed=false
	     */
	    positionFixed: false,

	    /**
	     * Whether events (resize, scroll) are initially enabled.
	     * @prop {Boolean} eventsEnabled=true
	     */
	    eventsEnabled: true,

	    /**
	     * Set to true if you want to automatically remove the popper when
	     * you call the `destroy` method.
	     * @prop {Boolean} removeOnDestroy=false
	     */
	    removeOnDestroy: false,

	    /**
	     * Callback called when the popper is created.<br />
	     * By default, it is set to no-op.<br />
	     * Access Popper.js instance with `data.instance`.
	     * @prop {onCreate}
	     */
	    onCreate: function onCreate() {},

	    /**
	     * Callback called when the popper is updated. This callback is not called
	     * on the initialization/creation of the popper, but only on subsequent
	     * updates.<br />
	     * By default, it is set to no-op.<br />
	     * Access Popper.js instance with `data.instance`.
	     * @prop {onUpdate}
	     */
	    onUpdate: function onUpdate() {},

	    /**
	     * List of modifiers used to modify the offsets before they are applied to the popper.
	     * They provide most of the functionalities of Popper.js.
	     * @prop {modifiers}
	     */
	    modifiers: modifiers
	  };

	  /**
	   * @callback onCreate
	   * @param {dataObject} data
	   */

	  /**
	   * @callback onUpdate
	   * @param {dataObject} data
	   */

	  // Utils
	  // Methods
	  var Popper = function () {
	    /**
	     * Creates a new Popper.js instance.
	     * @class Popper
	     * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
	     * @param {HTMLElement} popper - The HTML element used as the popper
	     * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
	     * @return {Object} instance - The generated Popper.js instance
	     */
	    function Popper(reference, popper) {
	      var _this = this;

	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      classCallCheck(this, Popper);

	      this.scheduleUpdate = function () {
	        return requestAnimationFrame(_this.update);
	      };

	      // make update() debounced, so that it only runs at most once-per-tick
	      this.update = debounce(this.update.bind(this));

	      // with {} we create a new object with the options inside it
	      this.options = _extends({}, Popper.Defaults, options);

	      // init state
	      this.state = {
	        isDestroyed: false,
	        isCreated: false,
	        scrollParents: []
	      };

	      // get reference and popper elements (allow jQuery wrappers)
	      this.reference = reference && reference.jquery ? reference[0] : reference;
	      this.popper = popper && popper.jquery ? popper[0] : popper;

	      // Deep merge modifiers options
	      this.options.modifiers = {};
	      Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
	        _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
	      });

	      // Refactoring modifiers' list (Object => Array)
	      this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
	        return _extends({
	          name: name
	        }, _this.options.modifiers[name]);
	      })
	      // sort the modifiers by order
	      .sort(function (a, b) {
	        return a.order - b.order;
	      });

	      // modifiers have the ability to execute arbitrary code when Popper.js get inited
	      // such code is executed in the same order of its modifier
	      // they could add new properties to their options configuration
	      // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
	      this.modifiers.forEach(function (modifierOptions) {
	        if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
	          modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
	        }
	      });

	      // fire the first update to position the popper in the right place
	      this.update();

	      var eventsEnabled = this.options.eventsEnabled;
	      if (eventsEnabled) {
	        // setup event listeners, they will take care of update the position in specific situations
	        this.enableEventListeners();
	      }

	      this.state.eventsEnabled = eventsEnabled;
	    }

	    // We can't use class properties because they don't get listed in the
	    // class prototype and break stuff like Sinon stubs


	    createClass(Popper, [{
	      key: 'update',
	      value: function update$$1() {
	        return update.call(this);
	      }
	    }, {
	      key: 'destroy',
	      value: function destroy$$1() {
	        return destroy.call(this);
	      }
	    }, {
	      key: 'enableEventListeners',
	      value: function enableEventListeners$$1() {
	        return enableEventListeners.call(this);
	      }
	    }, {
	      key: 'disableEventListeners',
	      value: function disableEventListeners$$1() {
	        return disableEventListeners.call(this);
	      }

	      /**
	       * Schedules an update. It will run on the next UI update available.
	       * @method scheduleUpdate
	       * @memberof Popper
	       */


	      /**
	       * Collection of utilities useful when writing custom modifiers.
	       * Starting from version 1.7, this method is available only if you
	       * include `popper-utils.js` before `popper.js`.
	       *
	       * **DEPRECATION**: This way to access PopperUtils is deprecated
	       * and will be removed in v2! Use the PopperUtils module directly instead.
	       * Due to the high instability of the methods contained in Utils, we can't
	       * guarantee them to follow semver. Use them at your own risk!
	       * @static
	       * @private
	       * @type {Object}
	       * @deprecated since version 1.8
	       * @member Utils
	       * @memberof Popper
	       */

	    }]);
	    return Popper;
	  }();

	  /**
	   * The `referenceObject` is an object that provides an interface compatible with Popper.js
	   * and lets you use it as replacement of a real DOM node.<br />
	   * You can use this method to position a popper relatively to a set of coordinates
	   * in case you don't have a DOM node to use as reference.
	   *
	   * ```
	   * new Popper(referenceObject, popperNode);
	   * ```
	   *
	   * NB: This feature isn't supported in Internet Explorer 10.
	   * @name referenceObject
	   * @property {Function} data.getBoundingClientRect
	   * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
	   * @property {number} data.clientWidth
	   * An ES6 getter that will return the width of the virtual reference element.
	   * @property {number} data.clientHeight
	   * An ES6 getter that will return the height of the virtual reference element.
	   */


	  Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
	  Popper.placements = placements;
	  Popper.Defaults = Defaults;

	  var clickOutMixin = {
	    data: function data() {
	      return {
	        listenForClickOut: false
	      };
	    },
	    watch: {
	      listenForClickOut: function listenForClickOut(newValue, oldValue) {
	        if (newValue !== oldValue) {
	          eventOff(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);

	          if (newValue) {
	            eventOn(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);
	          }
	        }
	      }
	    },
	    beforeCreate: function beforeCreate() {
	      // Declare non-reactive properties
	      this.clickOutElement = null;
	      this.clickOutEventName = null;
	    },
	    mounted: function mounted() {
	      if (!this.clickOutElement) {
	        this.clickOutElement = document;
	      }

	      if (!this.clickOutEventName) {
	        this.clickOutEventName = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click';
	      }

	      if (this.listenForClickOut) {
	        eventOn(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);
	      }
	    },
	    beforeDestroy: function beforeDestroy() {
	      eventOff(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);
	    },
	    methods: {
	      isClickOut: function isClickOut(evt) {
	        return !contains(this.$el, evt.target);
	      },
	      _clickOutHandler: function _clickOutHandler(evt) {
	        if (this.clickOutHandler && this.isClickOut(evt)) {
	          this.clickOutHandler(evt);
	        }
	      }
	    }
	  };

	  var focusInMixin = {
	    data: function data() {
	      return {
	        listenForFocusIn: false
	      };
	    },
	    watch: {
	      listenForFocusIn: function listenForFocusIn(newValue, oldValue) {
	        if (newValue !== oldValue) {
	          eventOff(this.focusInElement, 'focusin', this._focusInHandler, false);

	          if (newValue) {
	            eventOn(this.focusInElement, 'focusin', this._focusInHandler, false);
	          }
	        }
	      }
	    },
	    beforeCreate: function beforeCreate() {
	      // Declare non-reactive properties
	      this.focusInElement = null;
	    },
	    mounted: function mounted() {
	      if (!this.focusInElement) {
	        this.focusInElement = document;
	      }

	      if (this.listenForFocusIn) {
	        eventOn(this.focusInElement, 'focusin', this._focusInHandler, false);
	      }
	    },
	    beforeDestroy: function beforeDestroy() {
	      eventOff(this.focusInElement, 'focusin', this._focusInHandler, false);
	    },
	    methods: {
	      _focusInHandler: function _focusInHandler(evt) {
	        if (this.focusInHandler) {
	          this.focusInHandler(evt);
	        }
	      }
	    }
	  };

	  var BvEvent =
	  /*#__PURE__*/
	  function () {
	    function BvEvent(type) {
	      var eventInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      _classCallCheck(this, BvEvent);

	      // Start by emulating native Event constructor.
	      if (!type) {
	        /* istanbul ignore next */
	        throw new TypeError("Failed to construct '".concat(this.constructor.name, "'. 1 argument required, ").concat(arguments.length, " given."));
	      } // Assign defaults first, the eventInit,
	      // and the type last so it can't be overwritten.


	      assign(this, BvEvent.defaults(), eventInit, {
	        type: type
	      }); // Freeze some props as readonly, but leave them enumerable.

	      defineProperties(this, {
	        type: readonlyDescriptor(),
	        cancelable: readonlyDescriptor(),
	        nativeEvent: readonlyDescriptor(),
	        target: readonlyDescriptor(),
	        relatedTarget: readonlyDescriptor(),
	        vueTarget: readonlyDescriptor()
	      }); // Create a private variable using closure scoping.

	      var defaultPrevented = false; // Recreate preventDefault method. One way setter.

	      this.preventDefault = function preventDefault() {
	        if (this.cancelable) {
	          defaultPrevented = true;
	        }
	      }; // Create 'defaultPrevented' publicly accessible prop
	      // that can only be altered by the preventDefault method.


	      defineProperty(this, 'defaultPrevented', {
	        enumerable: true,
	        get: function get() {
	          return defaultPrevented;
	        }
	      });
	    }

	    _createClass(BvEvent, null, [{
	      key: "defaults",
	      value: function defaults() {
	        return {
	          type: '',
	          cancelable: true,
	          nativeEvent: null,
	          target: null,
	          relatedTarget: null,
	          vueTarget: null
	        };
	      }
	    }]);

	    return BvEvent;
	  }();

	  /**
	   * Log a warning message to the console with bootstrap-vue formatting sugar.
	   * @param {string} message
	   */

	  /* istanbul ignore next */
	  function warn(message) {
	    console.warn("[BootstrapVue warn]: ".concat(message));
	  }

	  function filterVisible(els) {
	    return (els || []).filter(isVisible);
	  } // Dropdown item CSS selectors
	  // TODO: .dropdown-form handling


	  var Selector = {
	    FORM_CHILD: '.dropdown form',
	    NAVBAR_NAV: '.navbar-nav',
	    ITEM_SELECTOR: '.dropdown-item:not(.disabled):not([disabled])' // Popper attachment positions

	  };
	  var AttachmentMap = {
	    // Dropup left align
	    TOP: 'top-start',
	    // Dropup right align
	    TOPEND: 'top-end',
	    // Dropdown left align
	    BOTTOM: 'bottom-start',
	    // Dropdown right align
	    BOTTOMEND: 'bottom-end',
	    // Dropright left align
	    RIGHT: 'right-start',
	    // Dropright right align
	    RIGHTEND: 'right-end',
	    // Dropleft left align
	    LEFT: 'left-start',
	    // Dropleft right align
	    LEFTEND: 'left-end' // @vue/component

	  };
	  var dropdownMixin = {
	    mixins: [clickOutMixin, focusInMixin],
	    provide: function provide() {
	      return {
	        bvDropdown: this
	      };
	    },
	    props: {
	      disabled: {
	        type: Boolean,
	        default: false
	      },
	      text: {
	        // Button label
	        type: String,
	        default: ''
	      },
	      html: {
	        // Button label
	        type: String
	      },
	      dropup: {
	        // place on top if possible
	        type: Boolean,
	        default: false
	      },
	      dropright: {
	        // place right if possible
	        type: Boolean,
	        default: false
	      },
	      dropleft: {
	        // place left if possible
	        type: Boolean,
	        default: false
	      },
	      right: {
	        // Right align menu (default is left align)
	        type: Boolean,
	        default: false
	      },
	      offset: {
	        // Number of pixels to offset menu, or a CSS unit value (i.e. 1px, 1rem, etc)
	        type: [Number, String],
	        default: 0
	      },
	      noFlip: {
	        // Disable auto-flipping of menu from bottom<=>top
	        type: Boolean,
	        default: false
	      },
	      popperOpts: {
	        // type: Object,
	        default: function _default() {}
	      }
	    },
	    data: function data() {
	      return {
	        visible: false,
	        inNavbar: null,
	        visibleChangePrevented: false
	      };
	    },
	    computed: {
	      toggler: function toggler() {
	        var toggle = this.$refs.toggle;
	        return toggle ? toggle.$el || toggle : null;
	      }
	    },
	    watch: {
	      visible: function visible(newValue, oldValue) {
	        if (this.visibleChangePrevented) {
	          this.visibleChangePrevented = false;
	          return;
	        }

	        if (newValue !== oldValue) {
	          var evtName = newValue ? 'show' : 'hide';
	          var bvEvt = new BvEvent(evtName, {
	            cancelable: true,
	            vueTarget: this,
	            target: this.$refs.menu,
	            relatedTarget: null
	          });
	          this.emitEvent(bvEvt);

	          if (bvEvt.defaultPrevented) {
	            // Reset value and exit if canceled
	            this.visibleChangePrevented = true;
	            this.visible = oldValue; // Just in case a child element triggereded this.hide(true)

	            this.$off('hidden', this.focusToggler);
	            return;
	          }

	          if (evtName === 'show') {
	            this.showMenu();
	          } else {
	            this.hideMenu();
	          }
	        }
	      },
	      disabled: function disabled(newValue, oldValue) {
	        if (newValue !== oldValue && newValue && this.visible) {
	          // Hide dropdown if disabled changes to true
	          this.visible = false;
	        }
	      }
	    },
	    created: function created() {
	      // Create non-reactive property
	      this._popper = null;
	    },
	    deactivated: function deactivated()
	    /* istanbul ignore next: not easy to test */
	    {
	      // In case we are inside a `<keep-alive>`
	      this.visible = false;
	      this.whileOpenListen(false);
	      this.removePopper();
	    },
	    beforeDestroy: function beforeDestroy()
	    /* istanbul ignore next: not easy to test */
	    {
	      this.visible = false;
	      this.whileOpenListen(false);
	      this.removePopper();
	    },
	    methods: {
	      // Event emitter
	      emitEvent: function emitEvent(bvEvt) {
	        var type = bvEvt.type;
	        this.$emit(type, bvEvt);
	        this.$root.$emit("bv::dropdown::".concat(type), bvEvt);
	      },
	      showMenu: function showMenu() {
	        var _this = this;

	        if (this.disabled) {
	          return;
	        } // Ensure other menus are closed


	        this.$root.$emit('bv::dropdown::shown', this); // Are we in a navbar ?

	        if (this.inNavbar === null && this.isNav) {
	          this.inNavbar = Boolean(closest('.navbar', this.$el));
	        } // Disable totally Popper.js for Dropdown in Navbar

	        /* istanbul ignore next: cant test popper in JSDOM */


	        if (!this.inNavbar) {
	          if (typeof Popper === 'undefined') {
	            warn('b-dropdown: Popper.js not found. Falling back to CSS positioning.');
	          } else {
	            // for dropup with alignment we use the parent element as popper container
	            var element = this.dropup && this.right || this.split ? this.$el : this.$refs.toggle; // Make sure we have a reference to an element, not a component!

	            element = element.$el || element; // Instantiate popper.js

	            this.createPopper(element);
	          }
	        }

	        this.whileOpenListen(true); // Wrap in nextTick to ensure menu is fully rendered/shown

	        this.$nextTick(function () {
	          // Focus on the menu container on show
	          _this.focusMenu(); // Emit the shown event


	          _this.$emit('shown');
	        });
	      },
	      hideMenu: function hideMenu() {
	        this.whileOpenListen(false);
	        this.$root.$emit('bv::dropdown::hidden', this);
	        this.$emit('hidden');
	        this.removePopper();
	      },
	      createPopper: function createPopper(element)
	      /* istanbul ignore next: cant test popper in JSDOM */
	      {
	        this.removePopper();
	        this._popper = new Popper(element, this.$refs.menu, this.getPopperConfig());
	      },
	      removePopper: function removePopper()
	      /* istanbul ignore next: cant test popper in JSDOM */
	      {
	        if (this._popper) {
	          // Ensure popper event listeners are removed cleanly
	          this._popper.destroy();
	        }

	        this._popper = null;
	      },
	      getPopperConfig: function getPopperConfig()
	      /* istanbul ignore next: can't test popper in JSDOM */
	      {
	        var placement = AttachmentMap.BOTTOM;

	        if (this.dropup) {
	          placement = this.right ? AttachmentMap.TOPEND : AttachmentMap.TOP;
	        } else if (this.dropright) {
	          placement = AttachmentMap.RIGHT;
	        } else if (this.dropleft) {
	          placement = AttachmentMap.LEFT;
	        } else if (this.right) {
	          placement = AttachmentMap.BOTTOMEND;
	        }

	        var popperConfig = {
	          placement: placement,
	          modifiers: {
	            offset: {
	              offset: this.offset || 0
	            },
	            flip: {
	              enabled: !this.noFlip
	            }
	          }
	        };

	        if (this.boundary) {
	          popperConfig.modifiers.preventOverflow = {
	            boundariesElement: this.boundary
	          };
	        }

	        return _objectSpread({}, popperConfig, this.popperOpts || {});
	      },
	      whileOpenListen: function whileOpenListen(open) {
	        // turn listeners on/off while open
	        if (open) {
	          // If another dropdown is opened
	          this.$root.$on('bv::dropdown::shown', this.rootCloseListener); // Hide the dropdown when clicked outside

	          this.listenForClickOut = true; // Hide the dropdown when it loses focus

	          this.listenForFocusIn = true;
	        } else {
	          this.$root.$off('bv::dropdown::shown', this.rootCloseListener);
	          this.listenForClickOut = false;
	          this.listenForFocusIn = false;
	        }
	      },
	      rootCloseListener: function rootCloseListener(vm) {
	        if (vm !== this) {
	          this.visible = false;
	        }
	      },
	      show: function show() {
	        // Public method to show dropdown
	        if (this.disabled) {
	          return;
	        }

	        this.visible = true;
	      },
	      hide: function hide() {
	        var refocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	        // Public method to hide dropdown
	        if (this.disabled) {
	          return;
	        }

	        this.visible = false;

	        if (refocus) {
	          // Child element is closing the dropdown on click
	          this.$once('hidden', this.focusToggler);
	        }
	      },
	      toggle: function toggle(evt) {
	        // Called only by a button that toggles the menu
	        evt = evt || {};
	        var type = evt.type;
	        var key = evt.keyCode;

	        if (type !== 'click' && !(type === 'keydown' && (key === KeyCodes.ENTER || key === KeyCodes.SPACE || key === KeyCodes.DOWN))) {
	          // We only toggle on Click, Enter, Space, and Arrow Down
	          return;
	        }

	        if (this.disabled) {
	          this.visible = false;
	          return;
	        }

	        this.$emit('toggle', evt);

	        if (evt.defaultPrevented) {
	          // Exit if canceled
	          return;
	        }

	        evt.preventDefault();
	        evt.stopPropagation(); // Toggle visibility

	        this.visible = !this.visible;
	      },
	      click: function click(evt) {
	        // Called only in split button mode, for the split button
	        if (this.disabled) {
	          this.visible = false;
	          return;
	        }

	        this.$emit('click', evt);
	      },
	      onKeydown: function onKeydown(evt)
	      /* istanbul ignore next: not easy to test */
	      {
	        // Called from dropdown menu context
	        var key = evt.keyCode;

	        if (key === KeyCodes.ESC) {
	          // Close on ESC
	          this.onEsc(evt);
	        } else if (key === KeyCodes.TAB) {
	          // Close on tab out
	          this.onTab(evt);
	        } else if (key === KeyCodes.DOWN) {
	          // Down Arrow
	          this.focusNext(evt, false);
	        } else if (key === KeyCodes.UP) {
	          // Up Arrow
	          this.focusNext(evt, true);
	        }
	      },
	      onEsc: function onEsc(evt)
	      /* istanbul ignore next: not easy to test */
	      {
	        if (this.visible) {
	          this.visible = false;
	          evt.preventDefault();
	          evt.stopPropagation(); // Return focus to original trigger button

	          this.$once('hidden', this.focusToggler);
	        }
	      },
	      onTab: function onTab(evt)
	      /* istanbul ignore next: not easy to test */
	      {// TODO: Need special handler for dealing with form inputs
	        // Tab, if in a text-like input, we should just focus next item in the dropdown
	        // Note: Inputs are in a special .dropdown-form container
	      },
	      onMouseOver: function onMouseOver(evt)
	      /* istanbul ignore next: not easy to test */
	      {// Removed mouseover focus handler
	      },
	      // Document click out listener
	      clickOutHandler: function clickOutHandler() {
	        if (this.visible) {
	          this.visible = false;
	        }
	      },
	      // Document focusin listener
	      focusInHandler: function focusInHandler(evt) {
	        // If focus leaves dropdown, hide it
	        if (this.visible && !contains(this.$refs.menu, evt.target) && !contains(this.$refs.toggle, evt.target)) {
	          this.visible = false;
	        }
	      },
	      // Keyboard nav
	      focusNext: function focusNext(evt, up) {
	        var _this2 = this;

	        if (!this.visible) {
	          return;
	        }

	        evt.preventDefault();
	        evt.stopPropagation();
	        this.$nextTick(function () {
	          var items = _this2.getItems();

	          if (items.length < 1) {
	            return;
	          }

	          var index = items.indexOf(evt.target);

	          if (up && index > 0) {
	            index--;
	          } else if (!up && index < items.length - 1) {
	            index++;
	          }

	          if (index < 0) {
	            index = 0;
	          }

	          _this2.focusItem(index, items);
	        });
	      },
	      focusItem: function focusItem(idx, items) {
	        var el = items.find(function (el, i) {
	          return i === idx;
	        });

	        if (el && getAttr(el, 'tabindex') !== '-1') {
	          el.focus();
	        }
	      },
	      getItems: function getItems() {
	        // Get all items
	        return filterVisible(selectAll(Selector.ITEM_SELECTOR, this.$refs.menu));
	      },
	      focusMenu: function focusMenu() {
	        this.$refs.menu.focus && this.$refs.menu.focus();
	      },
	      focusToggler: function focusToggler() {
	        var toggler = this.toggler;

	        if (toggler && toggler.focus) {
	          toggler.focus();
	        }
	      }
	    }
	  };

	  var BDropdown = {
	    name: 'BDropdown',
	    components: {
	      BButton: BButton
	    },
	    mixins: [idMixin, dropdownMixin],
	    props: {
	      toggleText: {
	        type: String,
	        default: 'Toggle Dropdown'
	      },
	      size: {
	        type: String,
	        default: null
	      },
	      variant: {
	        type: String,
	        default: null
	      },
	      menuClass: {
	        type: [String, Array],
	        default: null
	      },
	      toggleTag: {
	        type: String,
	        default: 'button'
	      },
	      toggleClass: {
	        type: [String, Array],
	        default: null
	      },
	      noCaret: {
	        type: Boolean,
	        default: false
	      },
	      split: {
	        type: Boolean,
	        default: false
	      },
	      splitHref: {
	        type: String // default: undefined

	      },
	      splitTo: {
	        type: [String, Object] // default: undefined

	      },
	      splitVariant: {
	        type: String,
	        default: null
	      },
	      role: {
	        type: String,
	        default: 'menu'
	      },
	      boundary: {
	        // String: `scrollParent`, `window` or `viewport`
	        // Object: HTML Element reference
	        type: [String, Object],
	        default: 'scrollParent'
	      }
	    },
	    computed: {
	      dropdownClasses: function dropdownClasses() {
	        // Position `static` is needed to allow menu to "breakout" of the scrollParent boundaries
	        // when boundary is anything other than `scrollParent`
	        // See https://github.com/twbs/bootstrap/issues/24251#issuecomment-341413786
	        var positionStatic = this.boundary !== 'scrollParent' || !this.boundary;
	        var direction = '';

	        if (this.dropup) {
	          direction = 'dropup';
	        } else if (this.dropright) {
	          direction = 'dropright';
	        } else if (this.dropleft) {
	          direction = 'dropleft';
	        }

	        return ['btn-group', 'b-dropdown', 'dropdown', direction, {
	          show: this.visible,
	          'position-static': positionStatic
	        }];
	      },
	      menuClasses: function menuClasses() {
	        return ['dropdown-menu', {
	          'dropdown-menu-right': this.right,
	          show: this.visible
	        }, this.menuClass];
	      },
	      toggleClasses: function toggleClasses() {
	        return ['dropdown-toggle', {
	          'dropdown-toggle-split': this.split,
	          'dropdown-toggle-no-caret': this.noCaret && !this.split
	        }, this.toggleClass];
	      }
	    },
	    render: function render(h) {
	      var split = h(false);

	      if (this.split) {
	        var btnProps = {
	          disabled: this.disabled,
	          variant: this.splitVariant || this.variant,
	          size: this.size // We add these as needed due to router-link issues with defined property with undefined/null values

	        };

	        if (this.splitTo) {
	          btnProps.to = this.splitTo;
	        }

	        if (this.splitHref) {
	          btnProps.href = this.splitHref;
	        }

	        split = h('b-button', {
	          ref: 'button',
	          props: btnProps,
	          attrs: {
	            id: this.safeId('_BV_button_')
	          },
	          on: {
	            click: this.click
	          }
	        }, [this.$slots['button-content'] || this.$slots.text || this.html || stripTags(this.text)]);
	      }

	      var toggle = h('b-button', {
	        ref: 'toggle',
	        class: this.toggleClasses,
	        props: {
	          variant: this.variant,
	          size: this.size,
	          disabled: this.disabled,
	          tag: this.toggleTag
	        },
	        attrs: {
	          id: this.safeId('_BV_toggle_'),
	          'aria-haspopup': 'true',
	          'aria-expanded': this.visible ? 'true' : 'false'
	        },
	        on: {
	          click: this.toggle,
	          // click
	          keydown: this.toggle // enter, space, down

	        }
	      }, [this.split ? h('span', {
	        class: ['sr-only']
	      }, [this.toggleText]) : this.$slots['button-content'] || this.$slots.text || this.html || stripTags(this.text)]);
	      var menu = h('div', {
	        ref: 'menu',
	        class: this.menuClasses,
	        attrs: {
	          role: this.role,
	          tabindex: '-1',
	          'aria-labelledby': this.safeId(this.split ? '_BV_button_' : '_BV_toggle_')
	        },
	        on: {
	          mouseover: this.onMouseOver,
	          keydown: this.onKeydown // tab, up, down, esc

	        }
	      }, [this.$slots.default]);
	      return h('div', {
	        attrs: {
	          id: this.safeId()
	        },
	        class: this.dropdownClasses
	      }, [split, toggle, menu]);
	    }
	  };

	  var props$n = propsFactory(); // @vue/component

	  var BDropdownItem = {
	    name: 'BDropdownItem',
	    inject: {
	      bvDropdown: {
	        default: null
	      }
	    },
	    props: props$n,
	    methods: {
	      closeDropdown: function closeDropdown() {
	        if (this.bvDropdown) {
	          this.bvDropdown.hide(true);
	        }
	      },
	      onClick: function onClick(evt) {
	        this.$emit('click', evt);
	        this.closeDropdown();
	      }
	    },
	    render: function render(h) {
	      return h(BLink, {
	        props: this.$props,
	        staticClass: 'dropdown-item',
	        attrs: {
	          role: 'menuitem'
	        },
	        on: {
	          click: this.onClick
	        }
	      }, this.$slots.default);
	    }
	  };

	  var props$o = {
	    active: {
	      type: Boolean,
	      default: false
	    },
	    activeClass: {
	      type: String,
	      default: 'active'
	    },
	    disabled: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  };
	  var BDropdownItemButton = {
	    name: 'BDropdownItemButton',
	    inject: {
	      bvDropdown: {
	        default: null
	      }
	    },
	    props: props$o,
	    methods: {
	      closeDropdown: function closeDropdown() {
	        if (this.bvDropdown) {
	          this.bvDropdown.hide(true);
	        }
	      },
	      onClick: function onClick(evt) {
	        this.$emit('click', evt);
	        this.closeDropdown();
	      }
	    },
	    render: function render(h) {
	      return h('button', {
	        staticClass: 'dropdown-item',
	        class: _defineProperty({}, this.activeClass, this.active),
	        attrs: {
	          role: 'menuitem',
	          type: 'button',
	          disabled: this.disabled
	        },
	        on: {
	          click: this.onClick
	        }
	      }, this.$slots.default);
	    }
	  };

	  var props$p = {
	    id: {
	      type: String,
	      default: null
	    },
	    tag: {
	      type: String,
	      default: 'h6'
	    } // @vue/component

	  };
	  var BDropdownHeader = {
	    name: 'BDropdownHeader',
	    functional: true,
	    props: props$p,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        staticClass: 'dropdown-header',
	        attrs: {
	          id: props.id || null
	        }
	      }), children);
	    }
	  };

	  var props$q = {
	    tag: {
	      type: String,
	      default: 'div'
	    } // @vue/component

	  };
	  var BDropdownDivider = {
	    name: 'BDropdownDivider',
	    functional: true,
	    props: props$q,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data;
	      return h(props.tag, mergeData(data, {
	        staticClass: 'dropdown-divider',
	        attrs: {
	          role: 'separator'
	        }
	      }));
	    }
	  };

	  var props$r = {
	    id: {
	      type: String,
	      default: null
	    },
	    inline: {
	      type: Boolean,
	      default: false
	    },
	    novalidate: {
	      type: Boolean,
	      default: false
	    },
	    validated: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  };
	  var BForm = {
	    name: 'BForm',
	    functional: true,
	    props: props$r,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h('form', mergeData(data, {
	        class: {
	          'form-inline': props.inline,
	          'was-validated': props.validated
	        },
	        attrs: {
	          id: props.id,
	          novalidate: props.novalidate
	        }
	      }), children);
	    }
	  };

	  var BDropdownForm = {
	    name: 'BDropdownForm',
	    functional: true,
	    props: _objectSpread({}, props$r),
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(BForm, mergeData(data, {
	        props: props,
	        staticClass: 'b-dropdown-form'
	      }), children);
	    }
	  };

	  var BDropdownText = {
	    name: 'BDropdownText',
	    functional: true,
	    props: {
	      tag: {
	        type: String,
	        default: 'p'
	      }
	    },
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        props: props,
	        staticClass: 'b-dropdown-text'
	      }), children);
	    }
	  };

	  var components$b = {
	    BDropdown: BDropdown,
	    BDd: BDropdown,
	    BDropdownItem: BDropdownItem,
	    BDdItem: BDropdownItem,
	    BDropdownItemButton: BDropdownItemButton,
	    BDropdownItemBtn: BDropdownItemButton,
	    BDdItemButton: BDropdownItemButton,
	    BDdItemBtn: BDropdownItemButton,
	    BDropdownHeader: BDropdownHeader,
	    BDdHeader: BDropdownHeader,
	    BDropdownDivider: BDropdownDivider,
	    BDdDivider: BDropdownDivider,
	    BDropdownForm: BDropdownForm,
	    BDdForm: BDropdownForm,
	    BDropdownText: BDropdownText,
	    BDdText: BDropdownText
	  };
	  var dropdownPlugin = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$b);
	    }
	  };

	  var props$s = {
	    type: {
	      type: String,
	      default: 'iframe',
	      validator: function validator(str) {
	        return arrayIncludes(['iframe', 'embed', 'video', 'object', 'img', 'b-img', 'b-img-lazy'], str);
	      }
	    },
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    aspect: {
	      type: String,
	      default: '16by9'
	    } // @vue/component

	  };
	  var BEmbed = {
	    name: 'BEmbed',
	    functional: true,
	    props: props$s,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, {
	        ref: data.ref,
	        staticClass: 'embed-responsive',
	        class: _defineProperty({}, "embed-responsive-".concat(props.aspect), Boolean(props.aspect))
	      }, [h(props.type, mergeData(data, {
	        ref: '',
	        staticClass: 'embed-responsive-item'
	      }), children)]);
	    }
	  };

	  var components$c = {
	    BEmbed: BEmbed
	  };
	  var index$a = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$c);
	    }
	  };

	  var props$t = {
	    id: {
	      type: String,
	      default: null
	    },
	    tag: {
	      type: String,
	      default: 'small'
	    },
	    textVariant: {
	      type: String,
	      default: 'muted'
	    },
	    inline: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  };
	  var BFormText = {
	    name: 'BFormText',
	    functional: true,
	    props: props$t,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        class: _defineProperty({
	          'form-text': !props.inline
	        }, "text-".concat(props.textVariant), Boolean(props.textVariant)),
	        attrs: {
	          id: props.id
	        }
	      }), children);
	    }
	  };

	  var props$u = {
	    id: {
	      type: String,
	      default: null
	    },
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    tooltip: {
	      type: Boolean,
	      default: false
	    },
	    forceShow: {
	      type: Boolean,
	      default: false
	    },
	    state: {
	      type: [Boolean, String],
	      default: null
	    } // @vue/component

	  };
	  var BFormInvalidFeedback = {
	    name: 'BFormInvalidFeedback',
	    functional: true,
	    props: props$u,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var show = props.forceShow === true || props.state === false || props.state === 'invalid';
	      return h(props.tag, mergeData(data, {
	        class: {
	          'invalid-feedback': !props.tooltip,
	          'invalid-tooltip': props.tooltip,
	          'd-block': show
	        },
	        attrs: {
	          id: props.id
	        }
	      }), children);
	    }
	  };

	  var props$v = {
	    id: {
	      type: String,
	      default: null
	    },
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    tooltip: {
	      type: Boolean,
	      default: false
	    },
	    forceShow: {
	      type: Boolean,
	      default: false
	    },
	    state: {
	      type: [Boolean, String],
	      default: null
	    } // @vue/component

	  };
	  var BFormValidFeedback = {
	    name: 'BFormValidFeedback',
	    functional: true,
	    props: props$v,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var show = props.forceShow === true || props.state === true || props.state === 'valid';
	      return h(props.tag, mergeData(data, {
	        class: {
	          'valid-feedback': !props.tooltip,
	          'valid-tooltip': props.tooltip,
	          'd-block': show
	        },
	        attrs: {
	          id: props.id
	        }
	      }), children);
	    }
	  };

	  var components$d = {
	    BForm: BForm,
	    BFormRow: BFormRow,
	    BFormText: BFormText,
	    BFormInvalidFeedback: BFormInvalidFeedback,
	    BFormFeedback: BFormInvalidFeedback,
	    BFormValidFeedback: BFormValidFeedback
	  };
	  var index$b = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$d);
	    }
	  };

	  /* Form control contextual state class computation
	   *
	   * Returned class is either 'is-valid' or 'is-invalid' based on the 'state' prop
	   * state can be one of five values:
	   *  - true or 'valid' for is-valid
	   *  - false or 'invalid' for is-invalid
	   *  - null (or empty string) for no contextual state
	   */
	  // @vue/component
	  var formStateMixin = {
	    props: {
	      state: {
	        // true/'valid', false/'invalid', '',null
	        // The order must be String first, then Boolean!
	        type: [String, Boolean],
	        default: null
	      }
	    },
	    computed: {
	      computedState: function computedState() {
	        var state = this.state;

	        if (state === '') {
	          return null;
	        } else if (state === true || state === 'valid') {
	          return true;
	        } else if (state === false || state === 'invalid') {
	          return false;
	        }

	        return null;
	      },
	      stateClass: function stateClass() {
	        var state = this.computedState;

	        if (state === true) {
	          return 'is-valid';
	        } else if (state === false) {
	          return 'is-invalid';
	        }

	        return null;
	      }
	    }
	  };

	  var SELECTOR = 'input:not(:disabled),textarea:not(:disabled),select:not(:disabled)'; // Breakpoint names for label-cols and label-align props

	  var BREAKPOINTS$1 = ['', 'sm', 'md', 'lg', 'xl']; // Memoize this function to return cached values to save time in computed functions

	  var makePropName = memoize(function () {
	    var breakpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    var prefix = arguments.length > 1 ? arguments[1] : undefined;
	    return "".concat(prefix).concat(upperFirst(breakpoint));
	  }); // Generate the labelCol breakpoint props

	  var bpLabelColProps = BREAKPOINTS$1.reduce(function (props, breakpoint) {
	    // label-cols, label-cols-sm, label-cols-md, ...
	    props[makePropName(breakpoint, 'labelCols')] = {
	      type: [Number, String, Boolean],
	      default: breakpoint ? false : null
	    };
	    return props;
	  }, create(null)); // Generate the labelAlign breakpoint props

	  var bpLabelAlignProps = BREAKPOINTS$1.reduce(function (props, breakpoint) {
	    // label-align, label-align-sm, label-align-md, ...
	    props[makePropName(breakpoint, 'labelAlign')] = {
	      type: String,
	      // left, right, center
	      default: null
	    };
	    return props;
	  }, create(null)); // render helper functions (here rather than polluting the instance with more methods)

	  function renderInvalidFeedback(h, ctx) {
	    var content = ctx.$slots['invalid-feedback'] || ctx.invalidFeedback;
	    var invalidFeedback = h(false);

	    if (content) {
	      invalidFeedback = h('b-form-invalid-feedback', {
	        props: {
	          id: ctx.invalidFeedbackId,
	          // If state is explicitly false, always show the feedback
	          state: ctx.computedState,
	          tooltip: ctx.tooltip
	        },
	        attrs: {
	          tabindex: content ? '-1' : null,
	          role: 'alert',
	          'aria-live': 'assertive',
	          'aria-atomic': 'true'
	        }
	      }, [content]);
	    }

	    return invalidFeedback;
	  }

	  function renderValidFeedback(h, ctx) {
	    var content = ctx.$slots['valid-feedback'] || ctx.validFeedback;
	    var validFeedback = h(false);

	    if (content) {
	      validFeedback = h('b-form-valid-feedback', {
	        props: {
	          id: ctx.validFeedbackId,
	          // If state is explicitly true, always show the feedback
	          state: ctx.computedState,
	          tooltip: ctx.tooltip
	        },
	        attrs: {
	          tabindex: '-1',
	          role: 'alert',
	          'aria-live': 'assertive',
	          'aria-atomic': 'true'
	        }
	      }, [content]);
	    }

	    return validFeedback;
	  }

	  function renderHelpText(h, ctx) {
	    // Form help text (description)
	    var content = ctx.$slots['description'] || ctx.description;
	    var description = h(false);

	    if (content) {
	      description = h('b-form-text', {
	        attrs: {
	          id: ctx.descriptionId,
	          tabindex: '-1'
	        }
	      }, [content]);
	    }

	    return description;
	  }

	  function renderLabel(h, ctx) {
	    // render label/legend inside b-col if necessary
	    var content = ctx.$slots['label'] || ctx.label;
	    var labelFor = ctx.labelFor;
	    var isLegend = !labelFor;
	    var isHorizontal = ctx.isHorizontal;
	    var labelTag = isLegend ? 'legend' : 'label';

	    if (!content && !isHorizontal) {
	      return h(false);
	    } else if (ctx.labelSrOnly) {
	      var label = h(false);

	      if (content) {
	        label = h(labelTag, {
	          class: 'sr-only',
	          attrs: {
	            id: ctx.labelId,
	            for: labelFor || null
	          }
	        }, [content]);
	      }

	      return h(isHorizontal ? 'b-col' : 'div', {
	        props: isHorizontal ? ctx.labelColProps : {}
	      }, [label]);
	    } else {
	      return h(isHorizontal ? 'b-col' : labelTag, {
	        on: isLegend ? {
	          click: ctx.legendClick
	        } : {},
	        props: isHorizontal ? _objectSpread({
	          tag: labelTag
	        }, ctx.labelColProps) : {},
	        attrs: {
	          id: ctx.labelId,
	          for: labelFor || null,
	          // We add a tab index to legend so that screen readers will properly read the aria-labelledby in IE.
	          tabindex: isLegend ? '-1' : null
	        },
	        class: [// When horizontal or if a legend is rendered, add col-form-label for correct sizing
	        // as Bootstrap has inconsitent font styling for legend in non-horiontal form-groups.
	        // See: https://github.com/twbs/bootstrap/issues/27805
	        isHorizontal || isLegend ? 'col-form-label' : '', // Emulate label padding top of 0 on legend when not horizontal
	        !isHorizontal && isLegend ? 'pt-0' : '', // If not horizontal and not a legend, we add d-block to label so that label-align works
	        !isHorizontal && !isLegend ? 'd-block' : '', ctx.labelSize ? "col-form-label-".concat(ctx.labelSize) : '', ctx.labelAlignClasses, ctx.labelClass]
	      }, [content]);
	    }
	  } // bFormGroup
	  // @vue/component


	  var BFormGroup = {
	    name: 'BFormGroup',
	    components: {
	      BFormRow: BFormRow,
	      BCol: BCol,
	      BFormInvalidFeedback: BFormInvalidFeedback,
	      BFormValidFeedback: BFormValidFeedback,
	      BFormText: BFormText
	    },
	    mixins: [idMixin, formStateMixin],
	    props: _objectSpread({
	      label: {
	        type: String,
	        default: null
	      },
	      labelFor: {
	        type: String,
	        default: null
	      },
	      labelSize: {
	        type: String,
	        default: null
	      },
	      labelSrOnly: {
	        type: Boolean,
	        default: false
	      },
	      labelClass: {
	        type: [String, Array, Object],
	        default: null
	      },
	      description: {
	        type: String,
	        default: null
	      },
	      invalidFeedback: {
	        type: String,
	        default: null
	      },
	      validFeedback: {
	        type: String,
	        default: null
	      },
	      tooltip: {
	        // Enable tooltip style feedback
	        type: Boolean,
	        default: false
	      },
	      validated: {
	        type: Boolean,
	        default: false
	      },
	      disabled: {
	        type: Boolean,
	        default: false
	      }
	    }, bpLabelColProps, bpLabelAlignProps, {
	      horizontal: {
	        // Deprecated
	        type: Boolean,
	        default: false
	      },
	      breakpoint: {
	        // Deprecated (ignored if horizontal is not true)
	        type: String,
	        default: null // legacy value 'sm'

	      }
	    }),
	    computed: {
	      labelColProps: function labelColProps() {
	        var _this = this;

	        var props = {};

	        if (this.horizontal) {
	          // Deprecated setting of horizontal/breakpoint props
	          warn("b-form-group: Props 'horizontal' and 'breakpoint' are deprecated. Use 'label-cols(-{breakpoint})' props instead."); // Legacy default is breakpoint sm and cols 3

	          var bp = this.breakpoint || 'sm';
	          var cols = parseInt(this.labelCols, 10) || 3;
	          props[bp] = cols > 0 ? cols : 3; // We then return the single breakpoint prop for legacy compatability

	          return props;
	        }

	        BREAKPOINTS$1.forEach(function (breakpoint) {
	          // Grab the value if the label column breakpoint prop
	          var propVal = _this[makePropName(breakpoint, 'labelCols')]; // Handle case where the prop's value is an empty string, which represents true


	          propVal = propVal === '' ? true : propVal || false;

	          if (typeof propVal !== 'boolean') {
	            // Convert to column size to number
	            propVal = parseInt(propVal, 10) || 0; // Ensure column size is greater than 0

	            propVal = propVal > 0 ? propVal : false;
	          }

	          if (propVal) {
	            // Add the prop to the list of props to give to b-col.
	            // if breakpoint is '' (labelCols=true), then we use the col prop to make equal width at xs
	            var bColPropName = breakpoint || (typeof propVal === 'boolean' ? 'col' : 'cols'); // Add it to the props

	            props[bColPropName] = propVal;
	          }
	        });
	        return props;
	      },
	      labelAlignClasses: function labelAlignClasses() {
	        var _this2 = this;

	        var classes = [];
	        BREAKPOINTS$1.forEach(function (breakpoint) {
	          // assemble the label column breakpoint align classes
	          var propVal = _this2[makePropName(breakpoint, 'labelAlign')] || null;

	          if (propVal) {
	            var className = breakpoint ? "text-".concat(breakpoint, "-").concat(propVal) : "text-".concat(propVal);
	            classes.push(className);
	          }
	        });
	        return classes;
	      },
	      isHorizontal: function isHorizontal() {
	        // Determine if the resultant form-group will be rendered
	        // horizontal (meaning it has label-col breakpoints)
	        return keys(this.labelColProps).length > 0;
	      },
	      labelId: function labelId() {
	        return this.$slots['label'] || this.label ? this.safeId('_BV_label_') : null;
	      },
	      descriptionId: function descriptionId() {
	        return this.$slots['description'] || this.description ? this.safeId('_BV_description_') : null;
	      },
	      hasInvalidFeedback: function hasInvalidFeedback() {
	        // used for computing aria-describedby
	        var $slots = this.$slots;
	        return this.computedState === false && ($slots['invalid-feedback'] || this.invalidFeedback);
	      },
	      invalidFeedbackId: function invalidFeedbackId() {
	        return this.hasInvalidFeedback ? this.safeId('_BV_feedback_invalid_') : null;
	      },
	      hasValidFeedback: function hasValidFeedback() {
	        // used for computing aria-describedby
	        return this.computedState === true && (this.$slots['valid-feedback'] || this.validFeedback);
	      },
	      validFeedbackId: function validFeedbackId() {
	        return this.hasValidFeedback ? this.safeId('_BV_feedback_valid_') : null;
	      },
	      describedByIds: function describedByIds() {
	        // Screen readers will read out any content linked to by aria-describedby
	        // even if the content is hidden with 'display: none', hence we only include
	        // feedback IDs if the form-group's state is explicitly valid or invalid.
	        return [this.descriptionId, this.invalidFeedbackId, this.validFeedbackId].filter(function (i) {
	          return i;
	        }).join(' ') || null;
	      }
	    },
	    watch: {
	      describedByIds: function describedByIds(add, remove) {
	        if (add !== remove) {
	          this.setInputDescribedBy(add, remove);
	        }
	      }
	    },
	    mounted: function mounted() {
	      var _this3 = this;

	      this.$nextTick(function () {
	        // Set the adia-describedby IDs on the input specified by label-for
	        // We do this in a nextTick to ensure the children have finished rendering
	        _this3.setInputDescribedBy(_this3.describedByIds);
	      });
	    },
	    methods: {
	      legendClick: function legendClick(evt) {
	        if (this.labelFor) {
	          // don't do anything if labelFor is set
	          return;
	        }

	        var tagName = evt.target ? evt.target.tagName : '';

	        if (/^(input|select|textarea|label|button|a)$/i.test(tagName)) {
	          // If clicked an interactive element inside legend, we just let the default happen
	          return;
	        }

	        var inputs = selectAll(SELECTOR, this.$refs.content).filter(isVisible);

	        if (inputs && inputs.length === 1 && inputs[0].focus) {
	          // if only a single input, focus it, emulating label behaviour
	          inputs[0].focus();
	        }
	      },
	      setInputDescribedBy: function setInputDescribedBy(add, remove) {
	        // Sets the `aria-describedby` attribute on the input if label-for is set.
	        // Optionally accepts a string of IDs to remove as the second parameter
	        if (this.labelFor && typeof document !== 'undefined') {
	          var input = select("#".concat(this.labelFor), this.$refs.content);

	          if (input) {
	            var adb = 'aria-describedby';
	            var ids = (getAttr(input, adb) || '').split(/\s+/);
	            remove = (remove || '').split(/\s+/); // Update ID list, preserving any original IDs

	            ids = ids.filter(function (id) {
	              return !arrayIncludes(remove, id);
	            }).concat(add || '').join(' ').trim();

	            if (ids) {
	              setAttr(input, adb, ids);
	            } else {
	              // No IDs, so remove the attribute
	              removeAttr(input, adb);
	            }
	          }
	        }
	      }
	    },
	    render: function render(h) {
	      var isFieldset = !this.labelFor;
	      var isHorizontal = this.isHorizontal; // Generate the label

	      var label = renderLabel(h, this); // Generate the content

	      var content = h(isHorizontal ? 'b-col' : 'div', {
	        ref: 'content',
	        attrs: {
	          tabindex: isFieldset ? '-1' : null,
	          role: isFieldset ? 'group' : null,
	          'aria-labelledby': isFieldset ? this.labelId : null,
	          'aria-describedby': isFieldset ? this.ariaDescribedBy : null
	        }
	      }, [this.$slots['default'] || h(false), renderInvalidFeedback(h, this), renderValidFeedback(h, this), renderHelpText(h, this)]); // Create the form-group

	      var data = {
	        staticClass: 'form-group',
	        class: [this.validated ? 'was-validated' : null, this.stateClass],
	        attrs: {
	          id: this.safeId(),
	          disabled: isFieldset ? this.disabled : null,
	          role: isFieldset ? null : 'group',
	          'aria-invalid': this.computedState === false ? 'true' : null,
	          'aria-labelledby': this.labelId || null,
	          'aria-describedby': this.describedByIds || null
	        } // Return it wrapped in a form-group.
	        // Note: fieldsets do not support adding `row` or `form-row` directly to them
	        // due to browser specific render issues, so we move the form-row to an
	        // inner wrapper div when horizontal and using a fieldset

	      };
	      return h(isFieldset ? 'fieldset' : isHorizontal ? 'b-form-row' : 'div', data, isHorizontal && isFieldset ? [h('b-form-row', {}, [label, content])] : [label, content]);
	    }
	  };

	  var components$e = {
	    BFormGroup: BFormGroup,
	    BFormFieldset: BFormGroup
	  };
	  var index$c = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$e);
	    }
	  };

	  // @vue/component
	  var formRadioCheckMixin = {
	    model: {
	      prop: 'checked',
	      event: 'input'
	    },
	    props: {
	      value: {// Value when checked
	        // type: Object,
	        // default: undefined
	      },
	      checked: {// This is the v-model
	        // type: Object,
	        // default: undefined
	      },
	      inline: {
	        type: Boolean,
	        default: false
	      },
	      plain: {
	        type: Boolean,
	        default: false
	      },
	      button: {
	        // Only applicable in standalone mode (non group)
	        type: Boolean,
	        default: false
	      },
	      buttonVariant: {
	        // Only applicable when rendered with button style
	        type: String,
	        default: null
	      }
	    },
	    data: function data() {
	      return {
	        localChecked: this.is_Group ? this.bvGroup.checked : this.checked,
	        hasFocus: false
	      };
	    },
	    computed: {
	      computedLocalChecked: {
	        get: function get() {
	          return this.is_Group ? this.bvGroup.localChecked : this.localChecked;
	        },
	        set: function set(val) {
	          if (this.is_Group) {
	            this.bvGroup.localChecked = val;
	          } else {
	            this.localChecked = val;
	          }
	        }
	      },
	      is_Group: function is_Group() {
	        // Is this check/radio a child of check-group or radio-group?
	        return Boolean(this.bvGroup);
	      },
	      is_BtnMode: function is_BtnMode() {
	        // Support button style in single input mode
	        return this.is_Group ? this.bvGroup.buttons : this.button;
	      },
	      is_Plain: function is_Plain() {
	        return this.is_BtnMode ? false : this.is_Group ? this.bvGroup.plain : this.plain;
	      },
	      is_Custom: function is_Custom() {
	        return this.is_BtnMode ? false : !this.is_Plain;
	      },
	      is_Switch: function is_Switch() {
	        // Custom switch styling (checkboxes only)
	        return this.is_BtnMode || this.is_Radio || this.is_Plain ? false : this.is_Group ? this.bvGroup.switches : this.switch;
	      },
	      is_Inline: function is_Inline() {
	        return this.is_Group ? this.bvGroup.inline : this.inline;
	      },
	      is_Disabled: function is_Disabled() {
	        // Child can be disabled while parent isn't, but is always disabled if group is
	        return this.is_Group ? this.bvGroup.disabled || this.disabled : this.disabled;
	      },
	      is_Required: function is_Required() {
	        // Required only works when a name is provided for the input(s)
	        // Child can only be required when parent is
	        // Groups will always have a name (either user supplied or auto generated)
	        return Boolean(this.get_Name && (this.bvGroup.is_Group ? this.bvGroup.required : this.required));
	      },
	      get_Name: function get_Name() {
	        // Group name preferred over local name
	        return (this.is_Group ? this.bvGroup.groupName : this.name) || null;
	      },
	      get_Form: function get_Form() {
	        return (this.is_Group ? this.bvGroup.form : this.form) || null;
	      },
	      get_Size: function get_Size() {
	        return (this.is_Group ? this.bvGroup.size : this.size) || '';
	      },
	      get_State: function get_State() {
	        return this.is_Group ? this.bvGroup.computedState : this.computedState;
	      },
	      get_ButtonVariant: function get_ButtonVariant() {
	        // Local variant preferred over group variant
	        if (this.buttonVariant) {
	          return this.buttonVariant;
	        } else if (this.is_Group && this.bvGroup.buttonVariant) {
	          return this.bvGroup.buttonVariant;
	        } // default variant


	        return 'secondary';
	      },
	      buttonClasses: function buttonClasses() {
	        // Same for radio & check
	        return ['btn', "btn-".concat(this.get_ButtonVariant), this.get_Size ? "btn-".concat(this.get_Size) : '', // 'disabled' class makes "button" look disabled
	        this.is_Disabled ? 'disabled' : '', // 'active' class makes "button" look pressed
	        this.is_Checked ? 'active' : '', // Focus class makes button look focused
	        this.hasFocus ? 'focus' : ''];
	      }
	    },
	    watch: {
	      checked: function checked(newVal, oldVal) {
	        this.computedLocalChecked = newVal;
	      }
	    },
	    methods: {
	      handleFocus: function handleFocus(evt) {
	        // When in buttons mode, we need to add 'focus' class to label when input focused
	        // As it is the hidden input which has actual focus
	        if (evt.target) {
	          if (evt.type === 'focus') {
	            this.hasFocus = true;
	          } else if (evt.type === 'blur') {
	            this.hasFocus = false;
	          }
	        }
	      },
	      // Convenience methods for focusing the input
	      focus: function focus() {
	        if (!this.is_Disabled && this.$refs.input && this.$refs.input.focus) {
	          this.$refs.input.focus();
	        }
	      },
	      blur: function blur() {
	        if (!this.is_Disabled && this.$refs.input && this.$refs.input.blur) {
	          this.$refs.input.blur();
	        }
	      }
	    },
	    render: function render(h) {
	      var defaultSlot = this.$slots.default; // Generate the input element

	      var on = {
	        change: this.handleChange
	      };

	      if (this.is_BtnMode) {
	        // Handlers for focus styling when in button mode
	        on.focus = on.blur = this.handleFocus;
	      }

	      var input = h('input', {
	        ref: 'input',
	        key: 'input',
	        on: on,
	        class: {
	          'form-check-input': this.is_Plain,
	          'custom-control-input': this.is_Custom,
	          'is-valid': this.get_State === true && !this.is_BtnMode,
	          'is-invalid': this.get_State === false && !this.is_BtnMode
	        },
	        directives: [{
	          name: 'model',
	          rawName: 'v-model',
	          value: this.computedLocalChecked,
	          expression: 'computedLocalChecked'
	        }],
	        attrs: {
	          id: this.safeId(),
	          type: this.is_Radio ? 'radio' : 'checkbox',
	          name: this.get_Name,
	          form: this.get_Form,
	          disabled: this.is_Disabled,
	          required: this.is_Required,
	          autocomplete: 'off',
	          'aria-required': this.is_Required || null
	        },
	        domProps: {
	          value: this.value,
	          checked: this.is_Checked
	        }
	      });

	      if (this.is_BtnMode) {
	        // Button mode
	        var button = h('label', {
	          class: this.buttonClasses
	        }, [input, defaultSlot]);

	        if (!this.is_Group) {
	          // Standalone button mode, so wrap in 'btn-group-toggle'
	          // and flag it as inline-block to mimic regular buttons
	          button = h('div', {
	            class: ['btn-group-toggle', 'd-inline-block']
	          }, [button]);
	        }

	        return button;
	      } else {
	        // Not button mode
	        var label = h('label', {
	          class: {
	            'form-check-label': this.is_Plain,
	            'custom-control-label': this.is_Custom
	          },
	          attrs: {
	            for: this.safeId()
	          }
	        }, defaultSlot); // Wrap it in a div

	        return h('div', {
	          class: _defineProperty({
	            'form-check': this.is_Plain,
	            'form-check-inline': this.is_Plain && this.is_Inline,
	            'custom-control': this.is_Custom,
	            'custom-control-inline': this.is_Custom && this.is_Inline,
	            'custom-checkbox': this.is_Custom && this.is_Check && !this.is_Switch,
	            'custom-switch': this.is_Switch,
	            'custom-radio': this.is_Custom && this.is_Radio
	          }, "form-control-".concat(this.get_Size), Boolean(this.get_Size && !this.is_BtnMode))
	        }, [input, label]);
	      }
	    }
	  };

	  // @vue/component
	  var formMixin = {
	    props: {
	      name: {
	        type: String // default: undefined

	      },
	      id: {
	        type: String // default: undefined

	      },
	      disabled: {
	        type: Boolean
	      },
	      required: {
	        type: Boolean,
	        default: false
	      },
	      form: {
	        type: String,
	        default: null
	      }
	    }
	  };

	  // @vue/component
	  var formSizeMixin = {
	    props: {
	      size: {
	        type: String,
	        default: null
	      }
	    },
	    computed: {
	      sizeFormClass: function sizeFormClass() {
	        return [this.size ? "form-control-".concat(this.size) : null];
	      },
	      sizeBtnClass: function sizeBtnClass() {
	        return [this.size ? "btn-".concat(this.size) : null];
	      }
	    }
	  };

	  function isDate(obj) {
	    return obj instanceof Date;
	  }
	  /**
	   * Check if two values are loosely equal - that is,
	   * if they are plain objects, do they have the same shape?
	   * Returns boolean true or false
	   */


	  function looseEqual(a, b) {
	    if (a === b) {
	      return true;
	    }

	    var aValidType = isDate(a);
	    var bValidType = isDate(b);

	    if (aValidType || bValidType) {
	      return aValidType && bValidType ? a.getTime() === b.getTime() : false;
	    }

	    aValidType = isArray(a);
	    bValidType = isArray(b);

	    if (aValidType || bValidType) {
	      return aValidType && bValidType ? a.length === b.length && a.every(function (e, i) {
	        return looseEqual(e, b[i]);
	      }) : false;
	    }

	    aValidType = isObject(a);
	    bValidType = isObject(b);

	    if (aValidType || bValidType) {
	      /* istanbul ignore if: this if will probably never be called */
	      if (!aValidType || !bValidType) {
	        return false;
	      }

	      var aKeysCount = keys(a).length;
	      var bKeysCount = keys(b).length;

	      if (aKeysCount !== bKeysCount) {
	        return false;
	      }

	      for (var key in a) {
	        var aHasKey = a.hasOwnProperty(key);
	        var bHasKey = b.hasOwnProperty(key);

	        if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
	          return false;
	        }
	      }
	    }

	    return String(a) === String(b);
	  }

	  function looseIndexOf (arr, val) {
	    // Assumes that the first argument is an array
	    for (var i = 0; i < arr.length; i++) {
	      if (looseEqual(arr[i], val)) {
	        return i;
	      }
	    }

	    return -1;
	  }

	  var BFormCheckbox = {
	    name: 'BFormCheckbox',
	    mixins: [formRadioCheckMixin, // Includes shared render function
	    idMixin, formMixin, formSizeMixin, formStateMixin],
	    inject: {
	      bvGroup: {
	        from: 'bvCheckGroup',
	        default: false
	      }
	    },
	    props: {
	      value: {
	        // type: [Object, Boolean],
	        default: true
	      },
	      uncheckedValue: {
	        // type: [Object, Boolean],
	        // Not applicable in multi-check mode
	        default: false
	      },
	      indeterminate: {
	        // Not applicable in multi-check mode
	        type: Boolean,
	        default: false
	      },
	      switch: {
	        // Custom switch styling
	        type: Boolean,
	        default: false
	      },
	      checked: {
	        // v-model
	        type: [String, Number, Object, Array, Boolean],
	        default: null
	      }
	    },
	    computed: {
	      is_Checked: function is_Checked() {
	        var checked = this.computedLocalChecked;
	        var value = this.value;

	        if (isArray(checked)) {
	          return looseIndexOf(checked, value) > -1;
	        } else {
	          return looseEqual(checked, value);
	        }
	      },
	      is_Radio: function is_Radio() {
	        return false;
	      },
	      is_Check: function is_Check() {
	        return true;
	      }
	    },
	    watch: {
	      computedLocalChecked: function computedLocalChecked(newVal, oldVal) {
	        this.$emit('input', newVal);

	        if (this.$refs && this.$refs.input) {
	          this.$emit('update:indeterminate', this.$refs.input.indeterminate);
	        }
	      },
	      indeterminate: function indeterminate(newVal, oldVal) {
	        this.setIndeterminate(newVal);
	      }
	    },
	    mounted: function mounted() {
	      // Set initial indeterminate state
	      this.setIndeterminate(this.indeterminate);
	    },
	    methods: {
	      handleChange: function handleChange(_ref) {
	        var _ref$target = _ref.target,
	            checked = _ref$target.checked,
	            indeterminate = _ref$target.indeterminate;
	        var localChecked = this.computedLocalChecked;
	        var value = this.value;
	        var isArr = isArray(localChecked);
	        var uncheckedValue = isArr ? null : this.uncheckedValue; // Update computedLocalChecked

	        if (isArr) {
	          var idx = looseIndexOf(localChecked, value);

	          if (checked && idx < 0) {
	            // Add value to array
	            localChecked = localChecked.concat(value);
	          } else if (!checked && idx > -1) {
	            // Remove value from array
	            localChecked = localChecked.slice(0, idx).concat(localChecked.slice(idx + 1));
	          }
	        } else {
	          localChecked = checked ? value : uncheckedValue;
	        }

	        this.computedLocalChecked = localChecked; // Change is only emitted on user interaction

	        this.$emit('change', checked ? value : uncheckedValue); // If this is a child of form-checkbox-group, we emit a change event on it as well

	        if (this.is_Group) {
	          this.bvGroup.$emit('change', localChecked);
	        }

	        this.$emit('update:indeterminate', indeterminate);
	      },
	      setIndeterminate: function setIndeterminate(state) {
	        // Indeterminate only supported in single checkbox mode
	        if (isArray(this.computedLocalChecked)) {
	          state = false;
	        }

	        if (this.$refs && this.$refs.input) {
	          this.$refs.input.indeterminate = state; // Emit update event to prop

	          this.$emit('update:indeterminate', state);
	        }
	      }
	    }
	  };

	  function isObject$1(obj) {
	    return obj && {}.toString.call(obj) === '[object Object]';
	  } // @vue/component


	  var formOptionsMixin = {
	    props: {
	      options: {
	        type: [Array, Object],
	        default: function _default() {
	          return [];
	        }
	      },
	      valueField: {
	        type: String,
	        default: 'value'
	      },
	      textField: {
	        type: String,
	        default: 'text'
	      },
	      htmlField: {
	        type: String,
	        default: 'html'
	      },
	      disabledField: {
	        type: String,
	        default: 'disabled'
	      }
	    },
	    computed: {
	      formOptions: function formOptions() {
	        var options = this.options;
	        var valueField = this.valueField;
	        var textField = this.textField;
	        var htmlField = this.htmlField;
	        var disabledField = this.disabledField;

	        if (isArray(options)) {
	          // Normalize flat-ish arrays to Array of Objects
	          return options.map(function (option) {
	            if (isObject$1(option)) {
	              var value = option[valueField];
	              var text = String(option[textField]);
	              return {
	                value: typeof value === 'undefined' ? text : value,
	                text: stripTags(text),
	                html: option[htmlField],
	                disabled: Boolean(option[disabledField])
	              };
	            }

	            return {
	              value: option,
	              text: stripTags(String(option)),
	              disabled: false
	            };
	          });
	        } else {
	          // options is Object
	          // Normalize Objects to Array of Objects
	          return keys(options).map(function (key) {
	            var option = options[key] || {};

	            if (isObject$1(option)) {
	              var value = option[valueField];
	              var text = option[textField];
	              return {
	                value: typeof value === 'undefined' ? key : value,
	                text: typeof text === 'undefined' ? stripTags(String(key)) : stripTags(String(text)),
	                html: option[htmlField],
	                disabled: Boolean(option[disabledField])
	              };
	            }

	            return {
	              value: key,
	              text: stripTags(String(option)),
	              disabled: false
	            };
	          });
	        }
	      }
	    }
	  };

	  var formRadioCheckGroupMixin = {
	    model: {
	      prop: 'checked',
	      event: 'input'
	    },
	    props: {
	      validated: {
	        type: Boolean,
	        default: false
	      },
	      ariaInvalid: {
	        type: [Boolean, String],
	        default: false
	      },
	      stacked: {
	        type: Boolean,
	        default: false
	      },
	      plain: {
	        type: Boolean,
	        default: false
	      },
	      buttons: {
	        // Render as button style
	        type: Boolean,
	        default: false
	      },
	      buttonVariant: {
	        // Only applicable when rendered with button style
	        type: String,
	        default: 'secondary'
	      }
	    },
	    computed: {
	      inline: function inline() {
	        return !this.stacked;
	      },
	      groupName: function groupName() {
	        // Checks/Radios tied to the same model must have the same name,
	        // especially for ARIA accessibility.
	        return this.name || this.safeId();
	      },
	      groupClasses: function groupClasses() {
	        if (this.buttons) {
	          return ['btn-group-toggle', this.inline ? 'btn-group' : 'btn-group-vertical', this.size ? "btn-group-".concat(this.size) : '', this.validated ? "was-validated" : ''];
	        }

	        return [this.validated ? "was-validated" : ''];
	      },
	      computedAriaInvalid: function computedAriaInvalid() {
	        var ariaInvalid = this.ariaInvalid;

	        if (ariaInvalid === true || ariaInvalid === 'true' || ariaInvalid === '') {
	          return 'true';
	        }

	        return this.computedState === false ? 'true' : null;
	      }
	    },
	    watch: {
	      checked: function checked(newVal, oldVal) {
	        this.localChecked = newVal;
	      },
	      localChecked: function localChecked(newVal, oldVal) {
	        this.$emit('input', newVal);
	      }
	    },
	    render: function render(h) {
	      var _this = this;

	      var $slots = this.$slots;
	      var inputs = this.formOptions.map(function (option, idx) {
	        var uid = "_BV_option_".concat(idx, "_");
	        return h(_this.is_RadioGroup ? 'b-form-radio' : 'b-form-checkbox', {
	          key: uid,
	          props: {
	            id: _this.safeId(uid),
	            value: option.value,
	            // Individual radios or checks can be disabled in a group
	            disabled: option.disabled || false // We don't need to include these, since the input's will know they are inside here
	            // name: this.groupName,
	            // form: this.form || null,
	            // required: Boolean(this.name && this.required)

	          }
	        }, [h('span', {
	          domProps: htmlOrText(option.html, option.text)
	        })]);
	      });
	      return h('div', {
	        class: this.groupClasses,
	        attrs: {
	          id: this.safeId(),
	          role: this.is_RadioGroup ? 'radiogroup' : 'group',
	          // Tabindex to allow group to be focused if needed
	          tabindex: '-1',
	          'aria-required': this.required ? 'true' : null,
	          'aria-invalid': this.computedAriaInvalid
	        }
	      }, [$slots.first, inputs, $slots.default]);
	    }
	  };

	  var BFormCheckboxGroup = {
	    name: 'BFormCheckboxGroup',
	    components: {
	      BFormCheckbox: BFormCheckbox
	    },
	    mixins: [idMixin, formMixin, formRadioCheckGroupMixin, // Includes render function
	    formOptionsMixin, formSizeMixin, formStateMixin],
	    provide: function provide() {
	      return {
	        bvCheckGroup: this
	      };
	    },
	    props: {
	      switches: {
	        // Custom switch styling
	        type: Boolean,
	        default: false
	      },
	      checked: {
	        type: [String, Number, Object, Array, Boolean],
	        default: null
	      }
	    },
	    data: function data() {
	      return {
	        localChecked: this.checked || []
	      };
	    },
	    computed: {
	      is_RadioGroup: function is_RadioGroup() {
	        return false;
	      }
	    }
	  };

	  var components$f = {
	    BFormCheckbox: BFormCheckbox,
	    BCheckbox: BFormCheckbox,
	    BCheck: BFormCheckbox,
	    BFormCheckboxGroup: BFormCheckboxGroup,
	    BCheckboxGroup: BFormCheckboxGroup,
	    BCheckGroup: BFormCheckboxGroup
	  };
	  var index$d = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$f);
	    }
	  };

	  var BFormRadio = {
	    name: 'BFormRadio',
	    mixins: [idMixin, formRadioCheckMixin, // Includes shared render function
	    formMixin, formSizeMixin, formStateMixin],
	    inject: {
	      bvGroup: {
	        from: 'bvRadioGroup',
	        default: false
	      }
	    },
	    props: {
	      checked: {
	        // v-model
	        type: [String, Object, Number, Boolean],
	        default: null
	      }
	    },
	    computed: {
	      // Radio Groups can only have a single value, so determining if checked is simple
	      is_Checked: function is_Checked() {
	        return looseEqual(this.value, this.computedLocalChecked);
	      },
	      // Flags for form-radio-check mixin
	      is_Radio: function is_Radio() {
	        return true;
	      },
	      is_Check: function is_Check() {
	        return false;
	      }
	    },
	    watch: {
	      // Radio Groups can only have a single value, so our watchers are simple
	      computedLocalChecked: function computedLocalChecked(newVal, oldVal) {
	        this.$emit('input', this.computedLocalChecked);
	      }
	    },
	    methods: {
	      handleChange: function handleChange(_ref) {
	        var checked = _ref.target.checked;
	        var value = this.value;
	        this.computedLocalChecked = value; // Change is only emitted on user interaction

	        this.$emit('change', checked ? value : null); // If this is a child of form-radio-group, we emit a change event on it as well

	        if (this.is_Group) {
	          this.bvGroup.$emit('change', checked ? value : null);
	        }
	      }
	    }
	  };

	  var BFormRadioGroup = {
	    name: 'BFormRadioGroup',
	    components: {
	      BFormRadio: BFormRadio
	    },
	    mixins: [idMixin, formMixin, formRadioCheckGroupMixin, // Includes render function
	    formOptionsMixin, formSizeMixin, formStateMixin],
	    provide: function provide() {
	      return {
	        bvRadioGroup: this
	      };
	    },
	    props: {
	      checked: {
	        type: [String, Object, Number, Boolean],
	        default: null
	      }
	    },
	    data: function data() {
	      return {
	        localChecked: this.checked
	      };
	    },
	    computed: {
	      is_RadioGroup: function is_RadioGroup() {
	        return true;
	      }
	    }
	  };

	  var components$g = {
	    BFormRadio: BFormRadio,
	    BRadio: BFormRadio,
	    BFormRadioGroup: BFormRadioGroup,
	    BRadioGroup: BFormRadioGroup
	  };
	  var index$e = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$g);
	    }
	  };

	  // @vue/component
	  var formTextMixin = {
	    model: {
	      prop: 'value',
	      event: 'update'
	    },
	    props: {
	      value: {
	        type: [String, Number],
	        default: ''
	      },
	      ariaInvalid: {
	        type: [Boolean, String],
	        default: false
	      },
	      readonly: {
	        type: Boolean,
	        default: false
	      },
	      plaintext: {
	        type: Boolean,
	        default: false
	      },
	      autocomplete: {
	        type: String,
	        default: null
	      },
	      placeholder: {
	        type: String,
	        default: null
	      },
	      formatter: {
	        type: Function,
	        default: null
	      },
	      trim: {
	        type: Boolean,
	        default: false
	      },
	      number: {
	        type: Boolean,
	        default: false
	      },
	      lazyFormatter: {
	        type: Boolean,
	        value: false
	      }
	    },
	    data: function data() {
	      return {
	        localValue: this.stringifyValue(this.value)
	      };
	    },
	    computed: {
	      computedClass: function computedClass() {
	        return [{
	          // Range input needs class custom-range
	          'custom-range': this.type === 'range',
	          // plaintext not supported by type=range or type=color
	          'form-control-plaintext': this.plaintext && this.type !== 'range' && this.type !== 'color',
	          // form-control not used by type=range or plaintext. Always used by type=color
	          'form-control': !this.plaintext && this.type !== 'range' || this.type === 'color'
	        }, this.sizeFormClass, this.stateClass];
	      },
	      computedAriaInvalid: function computedAriaInvalid() {
	        if (!this.ariaInvalid || this.ariaInvalid === 'false') {
	          // this.ariaInvalid is null or false or 'false'
	          return this.computedState === false ? 'true' : null;
	        }

	        if (this.ariaInvalid === true) {
	          // User wants explicit aria-invalid=true
	          return 'true';
	        } // Most likely a string value (which could be the string 'true')


	        return this.ariaInvalid;
	      }
	    },
	    watch: {
	      value: function value(newVal, oldVal) {
	        if (newVal !== oldVal && newVal !== this.localValue) {
	          this.localValue = this.stringifyValue(newVal);
	        }
	      }
	    },
	    mounted: function mounted() {
	      var value = this.stringifyValue(this.value);

	      if (value !== this.localValue) {
	        /* istanbul ignore next */
	        this.localValue = value;
	      }
	    },
	    methods: {
	      stringifyValue: function stringifyValue(value) {
	        return value === null || typeof value === 'undefined' ? '' : String(value);
	      },
	      getFormatted: function getFormatted(value, event) {
	        var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	        value = this.stringifyValue(value);

	        if ((!this.lazyFormatter || force) && typeof this.formatter === 'function') {
	          value = this.formatter(value, event);
	        }

	        return value;
	      },
	      updateValue: function updateValue(value) {
	        value = this.stringifyValue(value);

	        if (this.localValue !== value) {
	          // keep the input set to the value before modifiers
	          this.localValue = value;

	          if (this.number) {
	            // Emulate .number modifier behaviour
	            var num = parseFloat(value);
	            value = isNaN(num) ? value : num;
	          } else if (this.trim) {
	            // Emulate .trim modifier behaviour
	            value = value.trim();
	          } // Update the v-model


	          this.$emit('update', value);
	        }
	      },
	      onInput: function onInput(evt) {
	        // evt.target.composing is set by Vue
	        // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js

	        /* istanbul ignore if: hard to test composition events */
	        if (evt.target.composing) {
	          return;
	        }

	        var formatted = this.getFormatted(evt.target.value, evt);

	        if (formatted === false || evt.defaultPrevented) {
	          evt.preventDefault();
	          return;
	        }

	        this.updateValue(formatted);
	        this.$emit('input', formatted);
	      },
	      onChange: function onChange(evt) {
	        // evt.target.composing is set by Vue
	        // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js

	        /* istanbul ignore if: hard to test composition events */
	        if (evt.target.composing) {
	          return;
	        }

	        var formatted = this.getFormatted(evt.target.value, evt);

	        if (formatted === false) {
	          return;
	        }

	        this.updateValue(formatted);
	        this.$emit('change', formatted);
	      },
	      onBlur: function onBlur(evt) {
	        // lazy formatter
	        if (this.lazyFormatter) {
	          var formatted = this.getFormatted(evt.target.value, evt, true);

	          if (formatted === false) {
	            return;
	          }

	          this.updateValue(formatted);
	        } // Emit native blur event


	        this.$emit('blur', evt);
	      },
	      focus: function focus() {
	        // For external handler that may want a focus method
	        if (!this.disabled) {
	          this.$el.focus();
	        }
	      },
	      blur: function blur() {
	        // For external handler that may want a blur method
	        if (!this.disabled) {
	          this.$el.blur();
	        }
	      }
	    }
	  };

	  // @vue/component
	  var formSelectionMixin = {
	    computed: {
	      selectionStart: {
	        // Expose selectionStart for formatters, etc
	        cache: false,
	        get: function get()
	        /* istanbul ignore next */
	        {
	          return this.$refs.input.selectionStart;
	        },
	        set: function set(val)
	        /* istanbul ignore next */
	        {
	          this.$refs.input.selectionStart = val;
	        }
	      },
	      selectionEnd: {
	        // Expose selectionEnd for formatters, etc
	        cache: false,
	        get: function get()
	        /* istanbul ignore next */
	        {
	          return this.$refs.input.selectionEnd;
	        },
	        set: function set(val)
	        /* istanbul ignore next */
	        {
	          this.$refs.input.selectionEnd = val;
	        }
	      },
	      selectionDirection: {
	        // Expose selectionDirection for formatters, etc
	        cache: false,
	        get: function get()
	        /* istanbul ignore next */
	        {
	          return this.$refs.input.selectionDirection;
	        },
	        set: function set(val)
	        /* istanbul ignore next */
	        {
	          this.$refs.input.selectionDirection = val;
	        }
	      }
	    },
	    methods: {
	      select: function select()
	      /* istanbul ignore next */
	      {
	        var _this$$refs$input;

	        // For external handler that may want a select() method
	        (_this$$refs$input = this.$refs.input).select.apply(_this$$refs$input, arguments);
	      },
	      setSelectionRange: function setSelectionRange()
	      /* istanbul ignore next */
	      {
	        var _this$$refs$input2;

	        // For external handler that may want a setSelectionRange(a,b,c) method
	        (_this$$refs$input2 = this.$refs.input).setSelectionRange.apply(_this$$refs$input2, arguments);
	      },
	      setRangeText: function setRangeText()
	      /* istanbul ignore next */
	      {
	        var _this$$refs$input3;

	        // For external handler that may want a setRangeText(a,b,c) method
	        (_this$$refs$input3 = this.$refs.input).setRangeText.apply(_this$$refs$input3, arguments);
	      }
	    }
	  };

	  // @vue/component
	  var formValidityMixin = {
	    computed: {
	      validity: {
	        // Expose validity property
	        cache: false,
	        get: function get()
	        /* istanbul ignore next */
	        {
	          return this.$refs.input.validity;
	        }
	      },
	      validationMessage: {
	        // Expose validationMessage property
	        cache: false,
	        get: function get()
	        /* istanbul ignore next */
	        {
	          return this.$refs.input.validationMessage;
	        }
	      },
	      willValidate: {
	        // Expose willValidate property
	        cache: false,
	        get: function get()
	        /* istanbul ignore next */
	        {
	          return this.$refs.input.willValidate;
	        }
	      }
	    },
	    methods: {
	      setCustomValidity: function setCustomValidity()
	      /* istanbul ignore next */
	      {
	        var _this$$refs$input;

	        // For external handler that may want a setCustomValidity(...) method
	        return (_this$$refs$input = this.$refs.input).setCustomValidity.apply(_this$$refs$input, arguments);
	      },
	      checkValidity: function checkValidity()
	      /* istanbul ignore next */
	      {
	        var _this$$refs$input2;

	        // For external handler that may want a checkValidity(...) method
	        return (_this$$refs$input2 = this.$refs.input).checkValidity.apply(_this$$refs$input2, arguments);
	      },
	      reportValidity: function reportValidity()
	      /* istanbul ignore next */
	      {
	        var _this$$refs$input3;

	        // For external handler that may want a reportValidity(...) method
	        return (_this$$refs$input3 = this.$refs.input).reportValidity.apply(_this$$refs$input3, arguments);
	      }
	    }
	  };

	  var TYPES = ['text', 'password', 'email', 'number', 'url', 'tel', 'search', 'range', 'color', 'date', 'time', 'datetime', 'datetime-local', 'month', 'week']; // @vue/component

	  var BFormInput = {
	    name: 'BFormInput',
	    mixins: [idMixin, formMixin, formSizeMixin, formStateMixin, formTextMixin, formSelectionMixin, formValidityMixin],
	    props: {
	      // value prop defined in form-text mixin
	      // value: { },
	      type: {
	        type: String,
	        default: 'text',
	        validator: function validator(type) {
	          return arrayIncludes(TYPES, type);
	        }
	      },
	      noWheel: {
	        // Disable mousewheel to prevent wheel from changing values (i.e. number/date).
	        type: Boolean,
	        default: false
	      },
	      min: {
	        type: [String, Number],
	        default: null
	      },
	      max: {
	        type: [String, Number],
	        default: null
	      },
	      step: {
	        type: [String, Number],
	        default: null
	      },
	      list: {
	        type: String,
	        default: null
	      }
	    },
	    computed: {
	      localType: function localType() {
	        // We only allow certain types
	        return arrayIncludes(TYPES, this.type) ? this.type : 'text';
	      }
	    },
	    watch: {
	      noWheel: function noWheel(newVal) {
	        this.setWheelStopper(newVal);
	      }
	    },
	    mounted: function mounted() {
	      this.setWheelStopper(this.noWheel);
	    },
	    deactivated: function deactivated() {
	      // Turn off listeners when keep-alive component deactivated

	      /* istanbul ignore next */
	      this.setWheelStopper(false);
	    },
	    activated: function activated() {
	      // Turn on listeners (if no-wheel) when keep-alive component activated

	      /* istanbul ignore next */
	      this.setWheelStopper(this.noWheel);
	    },
	    beforeDestroy: function beforeDestroy() {
	      /* istanbul ignore next */
	      this.setWheelStopper(false);
	    },
	    methods: {
	      setWheelStopper: function setWheelStopper(on) {
	        var input = this.$el; // We use native events, so that we don't interfere with propgation

	        if (on) {
	          eventOn(input, 'focus', this.onWheelFocus);
	          eventOn(input, 'blur', this.onWheelBlur);
	        } else {
	          eventOff(input, 'focus', this.onWheelFocus);
	          eventOff(input, 'blur', this.onWheelBlur);
	          eventOff(document, 'wheel', this.stopWheel);
	        }
	      },
	      onWheelFocus: function onWheelFocus(evt) {
	        eventOn(document, 'wheel', this.stopWheel);
	      },
	      onWheelBlur: function onWheelBlur(evt) {
	        eventOff(document, 'wheel', this.stopWheel);
	      },
	      stopWheel: function stopWheel(evt) {
	        evt.preventDefault();
	        this.$el.blur();
	      }
	    },
	    render: function render(h) {
	      var self = this;
	      return h('input', {
	        ref: 'input',
	        class: self.computedClass,
	        directives: [{
	          name: 'model',
	          rawName: 'v-model',
	          value: self.localValue,
	          expression: 'localValue'
	        }],
	        attrs: {
	          id: self.safeId(),
	          name: self.name,
	          form: self.form || null,
	          type: self.localType,
	          disabled: self.disabled,
	          placeholder: self.placeholder,
	          required: self.required,
	          autocomplete: self.autocomplete || null,
	          readonly: self.readonly || self.plaintext,
	          min: self.min,
	          max: self.max,
	          step: self.step,
	          list: self.localType !== 'password' ? self.list : null,
	          'aria-required': self.required ? 'true' : null,
	          'aria-invalid': self.computedAriaInvalid
	        },
	        domProps: {
	          value: self.localValue
	        },
	        on: _objectSpread({}, self.$listeners, {
	          input: self.onInput,
	          change: self.onChange,
	          blur: self.onBlur
	        })
	      });
	    }
	  };

	  var components$h = {
	    BFormInput: BFormInput,
	    BInput: BFormInput
	  };
	  var index$f = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$h);
	    }
	  };

	  var BFormTextarea = {
	    name: 'BFormTextarea',
	    mixins: [idMixin, formMixin, formSizeMixin, formStateMixin, formTextMixin, formSelectionMixin, formValidityMixin],
	    props: {
	      rows: {
	        type: [Number, String],
	        default: 2
	      },
	      maxRows: {
	        type: [Number, String],
	        default: null
	      },
	      wrap: {
	        // 'soft', 'hard' or 'off'. Browser default is 'soft'
	        type: String,
	        default: 'soft'
	      },
	      noResize: {
	        // Disable the resize handle of textarea
	        type: Boolean,
	        default: false
	      },
	      noAutoShrink: {
	        // When in auto resize mode, disable shrinking to content height
	        type: Boolean,
	        default: false
	      }
	    },
	    data: function data() {
	      return {
	        dontResize: true
	      };
	    },
	    computed: {
	      computedStyle: function computedStyle() {
	        var styles = {
	          // Setting `noResize` to true will disable the ability for the user to
	          // manually resize the textarea. We also disable when in auto resize mode
	          resize: !this.computedRows || this.noResize ? 'none' : null
	        };

	        if (!this.computedRows) {
	          // The computed height for auto resize.
	          // We avoid setting the style to null, which can override user manual resize.
	          styles.height = this.computedHeight;
	        }

	        return styles;
	      },
	      computedMinRows: function computedMinRows() {
	        // Ensure rows is at least 2 and positive (2 is the native textarea value).
	        // A value of 1 can cause issues in some browsers, and most browsers only support
	        // 2 as the smallest value.
	        return Math.max(parseInt(this.rows, 10) || 2, 2);
	      },
	      computedMaxRows: function computedMaxRows() {
	        return Math.max(this.computedMinRows, parseInt(this.maxRows, 10) || 0);
	      },
	      computedRows: function computedRows() {
	        // This is used to set the attribute 'rows' on the textarea.
	        // If auto-resize is enabled, then we return null as we use CSS to control height.
	        return this.computedMinRows === this.computedMaxRows ? this.computedMinRows : null;
	      },
	      computedHeight: function computedHeight()
	      /* istanbul ignore next: can't test getComputedProperties */
	      {
	        // We compare `computedRows` and `localValue` to `true`, a value
	        // they both can't have at any time, to ensure reactivity
	        if (this.$isServer || this.dontResize || this.computedRows === true || this.localValue === true) {
	          return null;
	        }

	        var el = this.$el; // Element must be visible (not hidden) and in document
	        // *Must* be checked after above checks

	        if (!isVisible(el)) {
	          return null;
	        } // Remember old height (includes `px` units) and reset it temporarily to `auto`


	        var oldHeight = el.style.height;
	        el.style.height = 'auto'; // Get current computed styles

	        var computedStyle = getCS(el); // Height of one line of text in px

	        var lineHeight = parseFloat(computedStyle.lineHeight); // Minimum height for min rows (browser dependant)

	        var minHeight = parseInt(computedStyle.height, 10) || lineHeight * this.computedMinRows; // Calculate height of content

	        var offset = (parseFloat(computedStyle.borderTopWidth) || 0) + (parseFloat(computedStyle.borderBottomWidth) || 0) + (parseFloat(computedStyle.paddingTop) || 0) + (parseFloat(computedStyle.paddingBottom) || 0); // Calculate content height in "rows"

	        var contentRows = Math.max((el.scrollHeight - offset) / lineHeight, 2); // Calculate number of rows to display (limited within min/max rows)

	        var rows = Math.min(Math.max(contentRows, this.computedMinRows), this.computedMaxRows); // Calculate the required height of the textarea including border and padding (in pixels)

	        var height = Math.max(Math.ceil(rows * lineHeight + offset), minHeight); // Place old height back on element, just in case this computed prop returns the same value

	        el.style.height = oldHeight; // Value of previous height (without px units appended)

	        var oldHeightPx = parseFloat(oldHeight) || 0;

	        if (this.noAutoShrink && oldHeightPx > height) {
	          // Computed height remains the larger of oldHeight and new height
	          // When height is `sticky` (no-auto-shrink is true)
	          return oldHeight;
	        } // Return the new computed height in px units


	        return "".concat(height, "px");
	      }
	    },
	    mounted: function mounted() {
	      var _this = this;

	      // Enable opt-in resizing once mounted
	      this.$nextTick(function () {
	        _this.dontResize = false;
	      });
	    },
	    activated: function activated() {
	      var _this2 = this;

	      // If we are being re-activated in <keep-alive>, enable opt-in resizing
	      this.$nextTick(function () {
	        _this2.dontResize = false;
	      });
	    },
	    deactivated: function deactivated() {
	      // If we are in a deactivated <keep-alive>, disable opt-in resizing
	      this.dontResize = true;
	    },
	    beforeDestroy: function beforeDestroy() {
	      /* istanbul ignore next */
	      this.dontResize = true;
	    },
	    render: function render(h) {
	      // Using self instead of this helps reduce code size during minification
	      var self = this;
	      return h('textarea', {
	        ref: 'input',
	        class: self.computedClass,
	        style: self.computedStyle,
	        directives: [{
	          name: 'model',
	          rawName: 'v-model',
	          value: self.localValue,
	          expression: 'localValue'
	        }],
	        attrs: {
	          id: self.safeId(),
	          name: self.name,
	          form: self.form || null,
	          disabled: self.disabled,
	          placeholder: self.placeholder,
	          required: self.required,
	          autocomplete: self.autocomplete || null,
	          readonly: self.readonly || self.plaintext,
	          rows: self.computedRows,
	          wrap: self.wrap || null,
	          'aria-required': self.required ? 'true' : null,
	          'aria-invalid': self.computedAriaInvalid
	        },
	        domProps: {
	          value: self.localValue
	        },
	        on: _objectSpread({}, self.$listeners, {
	          input: self.onInput,
	          change: self.onChange,
	          blur: self.onBlur
	        })
	      });
	    }
	  };

	  var components$i = {
	    BFormTextarea: BFormTextarea,
	    BTextarea: BFormTextarea
	  };
	  var index$g = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$i);
	    }
	  };

	  // @vue/component
	  var formCustomMixin = {
	    props: {
	      plain: {
	        type: Boolean,
	        default: false
	      }
	    },
	    computed: {
	      custom: function custom() {
	        return !this.plain;
	      }
	    }
	  };

	  var BFormFile = {
	    name: 'BFormFile',
	    mixins: [idMixin, formMixin, formStateMixin, formCustomMixin],
	    props: {
	      value: {
	        // type: Object,
	        default: null
	      },
	      accept: {
	        type: String,
	        default: ''
	      },
	      // Instruct input to capture from camera
	      capture: {
	        type: Boolean,
	        default: false
	      },
	      placeholder: {
	        type: String,
	        default: 'No file chosen' // Chrome default file prompt

	      },
	      browseText: {
	        type: String,
	        default: null
	      },
	      dropPlaceholder: {
	        type: String,
	        default: null
	      },
	      multiple: {
	        type: Boolean,
	        default: false
	      },
	      directory: {
	        type: Boolean,
	        default: false
	      },
	      noTraverse: {
	        type: Boolean,
	        default: false
	      },
	      noDrop: {
	        type: Boolean,
	        default: false
	      }
	    },
	    data: function data() {
	      return {
	        selectedFile: null,
	        dragging: false,
	        hasFocus: false
	      };
	    },
	    computed: {
	      selectLabel: function selectLabel() {
	        // Draging active
	        if (this.dragging && this.dropPlaceholder) {
	          return this.dropPlaceholder;
	        } // No file chosen


	        if (!this.selectedFile || this.selectedFile.length === 0) {
	          return this.placeholder;
	        } // Multiple files


	        if (this.multiple) {
	          return this.selectedFile.map(function (file) {
	            return file.name;
	          }).join(', ');
	        } // Single file


	        return this.selectedFile.name;
	      }
	    },
	    watch: {
	      selectedFile: function selectedFile(newVal, oldVal) {
	        // The following test is needed when the file input is "reset" or the
	        // exact same file(s) are selected to prevent an infinite loop.
	        // When in `multiple` mode we need to check for two empty arrays or
	        // two arrays with identical files
	        if (newVal === oldVal || isArray(newVal) && isArray(oldVal) && newVal.length === oldVal.length && newVal.every(function (v, i) {
	          return v === oldVal[i];
	        })) {
	          return;
	        }

	        if (!newVal && this.multiple) {
	          this.$emit('input', []);
	        } else {
	          this.$emit('input', newVal);
	        }
	      },
	      value: function value(newVal) {
	        if (!newVal || isArray(newVal) && newVal.length === 0) {
	          this.reset();
	        }
	      }
	    },
	    methods: {
	      focusHandler: function focusHandler(evt) {
	        // Bootstrap v4 doesn't have focus styling for custom file input
	        // Firefox has a '[type=file]:focus ~ sibling' selector issue,
	        // so we add a 'focus' class to get around these bugs
	        if (this.plain || evt.type === 'focusout') {
	          this.hasFocus = false;
	        } else {
	          // Add focus styling for custom file input
	          this.hasFocus = true;
	        }
	      },
	      reset: function reset() {
	        try {
	          // Wrapped in try in case IE 11 craps out
	          this.$refs.input.value = '';
	        } catch (e) {} // IE 11 doesn't support setting `input.value` to '' or null
	        // So we use this little extra hack to reset the value, just in case.
	        // This also appears to work on modern browsers as well.


	        this.$refs.input.type = '';
	        this.$refs.input.type = 'file';
	        this.selectedFile = this.multiple ? [] : null;
	      },
	      onFileChange: function onFileChange(evt) {
	        var _this = this;

	        // Always emit original event
	        this.$emit('change', evt); // Check if special `items` prop is available on event (drop mode)
	        // Can be disabled by setting no-traverse

	        var items = evt.dataTransfer && evt.dataTransfer.items;

	        if (items && !this.noTraverse) {
	          /* istanbul ignore next: not supported in JSDOM */
	          var queue = [];

	          for (var i = 0; i < items.length; i++) {
	            var item = items[i].webkitGetAsEntry();

	            if (item) {
	              queue.push(this.traverseFileTree(item));
	            }
	          }

	          Promise.all(queue).then(function (filesArr) {
	            _this.setFiles(from(filesArr));
	          });
	          return;
	        } // Normal handling


	        this.setFiles(evt.target.files || evt.dataTransfer.files);
	      },
	      setFiles: function setFiles() {
	        var files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	        if (!files) {
	          /* istanbul ignore next: this will probably not happen */
	          this.selectedFile = null;
	        } else if (this.multiple) {
	          // Convert files to array
	          var filesArray = [];

	          for (var i = 0; i < files.length; i++) {
	            filesArray.push(files[i]);
	          } // Return file(s) as array


	          this.selectedFile = filesArray;
	        } else {
	          // Return single file object
	          this.selectedFile = files[0] || null;
	        }
	      },
	      onReset: function onReset() {
	        // Triggered when the parent form (if any) is reset
	        this.selectedFile = this.multiple ? [] : null;
	      },
	      onDragover: function onDragover(evt) {
	        evt.preventDefault();
	        evt.stopPropagation();

	        if (this.noDrop || !this.custom) {
	          return;
	        }

	        this.dragging = true;
	        evt.dataTransfer.dropEffect = 'copy';
	      },
	      onDragleave: function onDragleave(evt) {
	        evt.preventDefault();
	        evt.stopPropagation();
	        this.dragging = false;
	      },
	      onDrop: function onDrop(evt) {
	        evt.preventDefault();
	        evt.stopPropagation();

	        if (this.noDrop) {
	          return;
	        }

	        this.dragging = false;

	        if (evt.dataTransfer.files && evt.dataTransfer.files.length > 0) {
	          this.onFileChange(evt);
	        }
	      },
	      traverseFileTree: function traverseFileTree(item, path)
	      /* istanbul ignore next: not supported in JSDOM */
	      {
	        var _this2 = this;

	        // Based on http://stackoverflow.com/questions/3590058
	        return new Promise(function (resolve) {
	          path = path || '';

	          if (item.isFile) {
	            // Get file
	            item.file(function (file) {
	              file.$path = path; // Inject $path to file obj

	              resolve(file);
	            });
	          } else if (item.isDirectory) {
	            // Get folder contents
	            item.createReader().readEntries(function (entries) {
	              var queue = [];

	              for (var i = 0; i < entries.length; i++) {
	                queue.push(_this2.traverseFileTree(entries[i], path + item.name + '/'));
	              }

	              Promise.all(queue).then(function (filesArr) {
	                resolve(from(filesArr));
	              });
	            });
	          }
	        });
	      }
	    },
	    render: function render(h) {
	      // Form Input
	      var input = h('input', {
	        ref: 'input',
	        class: [{
	          'form-control-file': this.plain,
	          'custom-file-input': this.custom,
	          focus: this.custom && this.hasFocus
	        }, this.stateClass],
	        attrs: {
	          type: 'file',
	          id: this.safeId(),
	          name: this.name,
	          disabled: this.disabled,
	          required: this.required,
	          form: this.form || null,
	          capture: this.capture || null,
	          accept: this.accept || null,
	          multiple: this.multiple,
	          webkitdirectory: this.directory,
	          'aria-required': this.required ? 'true' : null
	        },
	        on: {
	          change: this.onFileChange,
	          focusin: this.focusHandler,
	          focusout: this.focusHandler,
	          reset: this.onReset
	        }
	      });

	      if (this.plain) {
	        return input;
	      } // Overlay Labels


	      var label = h('label', {
	        class: ['custom-file-label', this.dragging ? 'dragging' : null],
	        attrs: {
	          for: this.safeId(),
	          'data-browse': this.browseText || null
	        }
	      }, this.selectLabel); // Return rendered custom file input

	      return h('div', {
	        class: ['custom-file', 'b-form-file', this.stateClass],
	        attrs: {
	          id: this.safeId('_BV_file_outer_')
	        },
	        on: {
	          dragover: this.onDragover,
	          dragleave: this.onDragleave,
	          drop: this.onDrop
	        }
	      }, [input, label]);
	    }
	  };

	  var components$j = {
	    BFormFile: BFormFile,
	    BFile: BFormFile
	  };
	  var index$h = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$j);
	    }
	  };

	  var BFormSelect = {
	    name: 'BFormSelect',
	    mixins: [idMixin, formMixin, formSizeMixin, formStateMixin, formCustomMixin, formOptionsMixin],
	    props: {
	      value: {// type: Object,
	        // default: undefined
	      },
	      multiple: {
	        type: Boolean,
	        default: false
	      },
	      selectSize: {
	        // Browsers default size to 0, which shows 4 rows in most browsers in multiple mode
	        // Size of 1 can bork out Firefox
	        type: Number,
	        default: 0
	      },
	      ariaInvalid: {
	        type: [Boolean, String],
	        default: false
	      }
	    },
	    data: function data() {
	      return {
	        localValue: this.value
	      };
	    },
	    computed: {
	      computedSelectSize: function computedSelectSize() {
	        // Custom selects with a size of zero causes the arrows to be hidden,
	        // so dont render the size attribute in this case
	        return !this.plain && this.selectSize === 0 ? null : this.selectSize;
	      },
	      inputClass: function inputClass() {
	        return [this.plain ? 'form-control' : 'custom-select', this.size && this.plain ? "form-control-".concat(this.size) : null, this.size && !this.plain ? "custom-select-".concat(this.size) : null, this.stateClass];
	      },
	      computedAriaInvalid: function computedAriaInvalid() {
	        if (this.ariaInvalid === true || this.ariaInvalid === 'true') {
	          return 'true';
	        }

	        return this.stateClass === 'is-invalid' ? 'true' : null;
	      }
	    },
	    watch: {
	      value: function value(newVal, oldVal) {
	        this.localValue = newVal;
	      },
	      localValue: function localValue(newVal, oldVal) {
	        this.$emit('input', this.localValue);
	      }
	    },
	    methods: {
	      focus: function focus() {
	        this.$refs.input.focus();
	      },
	      blur: function blur() {
	        this.$refs.input.blur();
	      }
	    },
	    render: function render(h) {
	      var _this = this;

	      var $slots = this.$slots;
	      var options = this.formOptions.map(function (option, index) {
	        return h('option', {
	          key: "option_".concat(index, "_opt"),
	          attrs: {
	            disabled: Boolean(option.disabled)
	          },
	          domProps: _objectSpread({}, htmlOrText(option.html, option.text), {
	            value: option.value
	          })
	        });
	      });
	      return h('select', {
	        ref: 'input',
	        class: this.inputClass,
	        directives: [{
	          name: 'model',
	          rawName: 'v-model',
	          value: this.localValue,
	          expression: 'localValue'
	        }],
	        attrs: {
	          id: this.safeId(),
	          name: this.name,
	          form: this.form || null,
	          multiple: this.multiple || null,
	          size: this.computedSelectSize,
	          disabled: this.disabled,
	          required: this.required,
	          'aria-required': this.required ? 'true' : null,
	          'aria-invalid': this.computedAriaInvalid
	        },
	        on: {
	          change: function change(evt) {
	            var target = evt.target;
	            var selectedVal = from(target.options).filter(function (o) {
	              return o.selected;
	            }).map(function (o) {
	              return '_value' in o ? o._value : o.value;
	            });
	            _this.localValue = target.multiple ? selectedVal : selectedVal[0];

	            _this.$nextTick(function () {
	              _this.$emit('change', _this.localValue);
	            });
	          }
	        }
	      }, [$slots.first, options, $slots.default]);
	    }
	  };

	  var components$k = {
	    BFormSelect: BFormSelect,
	    BSelect: BFormSelect
	  };
	  var index$i = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$k);
	    }
	  };

	  var components$l = {
	    BImg: BImg,
	    BImgLazy: BImgLazy
	  };
	  var index$j = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$l);
	    }
	  };

	  var props$w = {
	    fluid: {
	      type: Boolean,
	      default: false
	    },
	    containerFluid: {
	      type: Boolean,
	      default: false
	    },
	    header: {
	      type: String,
	      default: null
	    },
	    headerHtml: {
	      type: String,
	      default: null
	    },
	    headerTag: {
	      type: String,
	      default: 'h1'
	    },
	    headerLevel: {
	      type: [Number, String],
	      default: '3'
	    },
	    lead: {
	      type: String,
	      default: null
	    },
	    leadHtml: {
	      type: String,
	      default: null
	    },
	    leadTag: {
	      type: String,
	      default: 'p'
	    },
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    bgVariant: {
	      type: String,
	      default: null
	    },
	    borderVariant: {
	      type: String,
	      default: null
	    },
	    textVariant: {
	      type: String,
	      default: null
	    } // @vue/component

	  };
	  var BJumbotron = {
	    name: 'BJumbotron',
	    functional: true,
	    props: props$w,
	    render: function render(h, _ref) {
	      var _class2;

	      var props = _ref.props,
	          data = _ref.data,
	          slots = _ref.slots;
	      // The order of the conditionals matter.
	      // We are building the component markup in order.
	      var childNodes = [];
	      var $slots = slots(); // Header

	      if (props.header || $slots.header || props.headerHtml) {
	        childNodes.push(h(props.headerTag, {
	          class: _defineProperty({}, "display-".concat(props.headerLevel), Boolean(props.headerLevel))
	        }, $slots.header || props.headerHtml || stripTags(props.header)));
	      } // Lead


	      if (props.lead || $slots.lead || props.leadHtml) {
	        childNodes.push(h(props.leadTag, {
	          staticClass: 'lead'
	        }, $slots.lead || props.leadHtml || stripTags(props.lead)));
	      } // Default slot


	      if ($slots.default) {
	        childNodes.push($slots.default);
	      } // If fluid, wrap content in a container/container-fluid


	      if (props.fluid) {
	        // Children become a child of a container
	        childNodes = [h(Container, {
	          props: {
	            fluid: props.containerFluid
	          }
	        }, childNodes)];
	      } // Return the jumbotron


	      return h(props.tag, mergeData(data, {
	        staticClass: 'jumbotron',
	        class: (_class2 = {
	          'jumbotron-fluid': props.fluid
	        }, _defineProperty(_class2, "text-".concat(props.textVariant), Boolean(props.textVariant)), _defineProperty(_class2, "bg-".concat(props.bgVariant), Boolean(props.bgVariant)), _defineProperty(_class2, "border-".concat(props.borderVariant), Boolean(props.borderVariant)), _defineProperty(_class2, "border", Boolean(props.borderVariant)), _class2)
	      }), childNodes);
	    }
	  };

	  var components$m = {
	    BJumbotron: BJumbotron
	  };
	  var index$k = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$m);
	    }
	  };

	  var components$n = {
	    BLink: BLink
	  };
	  var index$l = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$n);
	    }
	  };

	  var props$x = {
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    flush: {
	      type: Boolean,
	      default: false
	    },
	    horizontal: {
	      type: [Boolean, String],
	      default: false
	    } // @vue/component

	  };
	  var BListGroup = {
	    name: 'BListGroup',
	    functional: true,
	    props: props$x,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var horizontal = props.horizontal === '' ? true : props.horizontal;
	      horizontal = props.flush ? false : horizontal;
	      var componentData = {
	        staticClass: 'list-group',
	        class: _defineProperty({
	          'list-group-flush': props.flush,
	          'list-group-horizontal': horizontal === true
	        }, "list-group-horizontal-".concat(horizontal), typeof horizontal === 'string')
	      };
	      return h(props.tag, mergeData(data, componentData), children);
	    }
	  };

	  var actionTags = ['a', 'router-link', 'button', 'b-link'];
	  var linkProps$2 = propsFactory();
	  delete linkProps$2.href.default;
	  delete linkProps$2.to.default;
	  var props$y = _objectSpread({
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    action: {
	      type: Boolean,
	      default: null
	    },
	    button: {
	      type: Boolean,
	      default: null
	    },
	    variant: {
	      type: String,
	      default: null
	    }
	  }, linkProps$2); // @vue/component

	  var BListGroupItem = {
	    name: 'BListGroupItem',
	    functional: true,
	    props: props$y,
	    render: function render(h, _ref) {
	      var _class;

	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var tag = props.button ? 'button' : !props.href && !props.to ? props.tag : BLink;
	      var isAction = Boolean(props.href || props.to || props.action || props.button || arrayIncludes(actionTags, props.tag));
	      var attrs = {};
	      var itemProps = {};

	      if (tag === 'button') {
	        if (!data.attrs || !data.attrs.type) {
	          // Add a type for button is one not provided in passed attributes
	          attrs.type = 'button';
	        }

	        if (props.disabled) {
	          // Set disabled attribute if button and disabled
	          attrs.disabled = true;
	        }
	      } else {
	        itemProps = pluckProps(linkProps$2, props);
	      }

	      var componentData = {
	        attrs: attrs,
	        props: itemProps,
	        staticClass: 'list-group-item',
	        class: (_class = {}, _defineProperty(_class, "list-group-item-".concat(props.variant), Boolean(props.variant)), _defineProperty(_class, 'list-group-item-action', isAction), _defineProperty(_class, "active", props.active), _defineProperty(_class, "disabled", props.disabled), _class)
	      };
	      return h(tag, mergeData(data, componentData), children);
	    }
	  };

	  var components$o = {
	    BListGroup: BListGroup,
	    BListGroupItem: BListGroupItem
	  };
	  var index$m = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$o);
	    }
	  };

	  var props$z = {
	    tag: {
	      type: String,
	      default: 'div'
	    }
	  };
	  var BMediaBody = {
	    name: 'BMediaBody',
	    functional: true,
	    props: props$z,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        staticClass: 'media-body'
	      }), children);
	    }
	  };

	  var props$A = {
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    verticalAlign: {
	      type: String,
	      default: 'top'
	    } // @vue/component

	  };
	  var BMediaAside = {
	    name: 'BMediaAside',
	    functional: true,
	    props: props$A,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        staticClass: 'd-flex',
	        class: _defineProperty({}, "align-self-".concat(props.verticalAlign), props.verticalAlign)
	      }), children);
	    }
	  };

	  var props$B = {
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    rightAlign: {
	      type: Boolean,
	      default: false
	    },
	    verticalAlign: {
	      type: String,
	      default: 'top'
	    },
	    noBody: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  };
	  var BMedia = {
	    name: 'BMedia',
	    functional: true,
	    props: props$B,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          slots = _ref.slots,
	          children = _ref.children;
	      var childNodes = props.noBody ? children : [];
	      var $slots = slots();

	      if (!props.noBody) {
	        if ($slots.aside && !props.rightAlign) {
	          childNodes.push(h(BMediaAside, {
	            staticClass: 'mr-3',
	            props: {
	              verticalAlign: props.verticalAlign
	            }
	          }, $slots.aside));
	        }

	        childNodes.push(h(BMediaBody, $slots.default));

	        if ($slots.aside && props.rightAlign) {
	          childNodes.push(h(BMediaAside, {
	            staticClass: 'ml-3',
	            props: {
	              verticalAlign: props.verticalAlign
	            }
	          }, $slots.aside));
	        }
	      }

	      return h(props.tag, mergeData(data, {
	        staticClass: 'media'
	      }), childNodes);
	    }
	  };

	  var components$p = {
	    BMedia: BMedia,
	    BMediaAside: BMediaAside,
	    BMediaBody: BMediaBody
	  };
	  var index$n = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$p);
	    }
	  };

	  var Selector$1 = {
	    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
	    STICKY_CONTENT: '.sticky-top',
	    NAVBAR_TOGGLER: '.navbar-toggler' // ObserveDom config

	  };
	  var OBSERVER_CONFIG = {
	    subtree: true,
	    childList: true,
	    characterData: true,
	    attributes: true,
	    attributeFilter: ['style', 'class'] // modal wrapper ZINDEX offset incrememnt

	  };
	  var ZINDEX_OFFSET = 2000; // Modal open count helpers

	  function getModalOpenCount() {
	    return parseInt(getAttr(document.body, 'data-modal-open-count') || 0, 10);
	  }

	  function setModalOpenCount(count) {
	    setAttr(document.body, 'data-modal-open-count', String(count));
	    return count;
	  }

	  function incrementModalOpenCount() {
	    return setModalOpenCount(getModalOpenCount() + 1);
	  }

	  function decrementModalOpenCount() {
	    return setModalOpenCount(Math.max(getModalOpenCount() - 1, 0));
	  } // Returns the current visible modal highest z-index


	  function getModalMaxZIndex() {
	    return selectAll('div.modal')
	    /* find all modals that are in document */
	    .filter(isVisible)
	    /* filter only visible ones */
	    .map(function (m) {
	      return m.parentElement;
	    })
	    /* select the outer div */
	    .reduce(function (max, el) {
	      /* compute the highest z-index */
	      return Math.max(max, parseInt(el.style.zIndex || 0, 10));
	    }, 0);
	  } // Returns the next z-index to be used by a modal to ensure proper stacking
	  // regardless of document order. Increments by 2000


	  function getModalNextZIndex() {
	    return getModalMaxZIndex() + ZINDEX_OFFSET;
	  } // @vue/component


	  var BModal = {
	    name: 'BModal',
	    components: {
	      BButton: BButton,
	      BButtonClose: BButtonClose
	    },
	    mixins: [idMixin, listenOnRootMixin],
	    model: {
	      prop: 'visible',
	      event: 'change'
	    },
	    props: {
	      title: {
	        type: String,
	        default: ''
	      },
	      titleHtml: {
	        type: String
	      },
	      titleTag: {
	        type: String,
	        default: 'h5'
	      },
	      size: {
	        type: String,
	        default: 'md'
	      },
	      centered: {
	        type: Boolean,
	        default: false
	      },
	      scrollable: {
	        type: Boolean,
	        default: false
	      },
	      buttonSize: {
	        type: String,
	        default: ''
	      },
	      noStacking: {
	        type: Boolean,
	        default: false
	      },
	      noFade: {
	        type: Boolean,
	        default: false
	      },
	      noCloseOnBackdrop: {
	        type: Boolean,
	        default: false
	      },
	      noCloseOnEsc: {
	        type: Boolean,
	        default: false
	      },
	      noEnforceFocus: {
	        type: Boolean,
	        default: false
	      },
	      headerBgVariant: {
	        type: String,
	        default: null
	      },
	      headerBorderVariant: {
	        type: String,
	        default: null
	      },
	      headerTextVariant: {
	        type: String,
	        default: null
	      },
	      headerCloseVariant: {
	        type: String,
	        default: null
	      },
	      headerClass: {
	        type: [String, Array],
	        default: null
	      },
	      bodyBgVariant: {
	        type: String,
	        default: null
	      },
	      bodyTextVariant: {
	        type: String,
	        default: null
	      },
	      modalClass: {
	        type: [String, Array],
	        default: null
	      },
	      dialogClass: {
	        type: [String, Array],
	        default: null
	      },
	      contentClass: {
	        type: [String, Array],
	        default: null
	      },
	      bodyClass: {
	        type: [String, Array],
	        default: null
	      },
	      footerBgVariant: {
	        type: String,
	        default: null
	      },
	      footerBorderVariant: {
	        type: String,
	        default: null
	      },
	      footerTextVariant: {
	        type: String,
	        default: null
	      },
	      footerClass: {
	        type: [String, Array],
	        default: null
	      },
	      hideHeader: {
	        type: Boolean,
	        default: false
	      },
	      hideFooter: {
	        type: Boolean,
	        default: false
	      },
	      hideHeaderClose: {
	        type: Boolean,
	        default: false
	      },
	      hideBackdrop: {
	        type: Boolean,
	        default: false
	      },
	      okOnly: {
	        type: Boolean,
	        default: false
	      },
	      okDisabled: {
	        type: Boolean,
	        default: false
	      },
	      cancelDisabled: {
	        type: Boolean,
	        default: false
	      },
	      visible: {
	        type: Boolean,
	        default: false
	      },
	      returnFocus: {
	        // type: Object,
	        default: null
	      },
	      headerCloseLabel: {
	        type: String,
	        default: 'Close'
	      },
	      cancelTitle: {
	        type: String,
	        default: 'Cancel'
	      },
	      cancelTitleHtml: {
	        type: String
	      },
	      okTitle: {
	        type: String,
	        default: 'OK'
	      },
	      okTitleHtml: {
	        type: String
	      },
	      cancelVariant: {
	        type: String,
	        default: 'secondary'
	      },
	      okVariant: {
	        type: String,
	        default: 'primary'
	      },
	      lazy: {
	        type: Boolean,
	        default: false
	      },
	      busy: {
	        type: Boolean,
	        default: false
	      }
	    },
	    data: function data() {
	      return {
	        is_hidden: this.lazy || false,
	        // for lazy modals
	        is_visible: false,
	        // controls modal visible state
	        is_transitioning: false,
	        // Used for style control
	        is_show: false,
	        // Used for style control
	        is_block: false,
	        // Used for style control
	        is_opening: false,
	        // Semaphore for previnting incorrect modal open counts
	        is_closing: false,
	        // Semapbore for preventing incorrect modal open counts
	        scrollbarWidth: 0,
	        zIndex: ZINDEX_OFFSET,
	        // z-index for modal stacking
	        isTop: true,
	        // If the modal is the topmost opened modal
	        isBodyOverflowing: false,
	        return_focus: this.returnFocus || null
	      };
	    },
	    computed: {
	      contentClasses: function contentClasses() {
	        return ['modal-content', this.contentClass];
	      },
	      modalClasses: function modalClasses() {
	        return [{
	          fade: !this.noFade,
	          show: this.is_show,
	          'd-block': this.is_block
	        }, this.modalClass];
	      },
	      dialogClasses: function dialogClasses() {
	        var _ref;

	        return [(_ref = {}, _defineProperty(_ref, "modal-".concat(this.size), Boolean(this.size)), _defineProperty(_ref, 'modal-dialog-centered', this.centered), _defineProperty(_ref, 'modal-dialog-scrollable', this.scrollable), _ref), this.dialogClass];
	      },
	      backdropClasses: function backdropClasses() {
	        return {
	          fade: !this.noFade,
	          show: this.is_show || this.noFade
	        };
	      },
	      headerClasses: function headerClasses() {
	        var _ref2;

	        return [(_ref2 = {}, _defineProperty(_ref2, "bg-".concat(this.headerBgVariant), Boolean(this.headerBgVariant)), _defineProperty(_ref2, "text-".concat(this.headerTextVariant), Boolean(this.headerTextVariant)), _defineProperty(_ref2, "border-".concat(this.headerBorderVariant), Boolean(this.headerBorderVariant)), _ref2), this.headerClass];
	      },
	      bodyClasses: function bodyClasses() {
	        var _ref3;

	        return [(_ref3 = {}, _defineProperty(_ref3, "bg-".concat(this.bodyBgVariant), Boolean(this.bodyBgVariant)), _defineProperty(_ref3, "text-".concat(this.bodyTextVariant), Boolean(this.bodyTextVariant)), _ref3), this.bodyClass];
	      },
	      footerClasses: function footerClasses() {
	        var _ref4;

	        return [(_ref4 = {}, _defineProperty(_ref4, "bg-".concat(this.footerBgVariant), Boolean(this.footerBgVariant)), _defineProperty(_ref4, "text-".concat(this.footerTextVariant), Boolean(this.footerTextVariant)), _defineProperty(_ref4, "border-".concat(this.footerBorderVariant), Boolean(this.footerBorderVariant)), _ref4), this.footerClass];
	      },
	      modalOuterStyle: function modalOuterStyle() {
	        return {
	          // We only set these styles on the stacked modals (ones with next z-index > 0).
	          position: 'absolute',
	          zIndex: this.zIndex
	        };
	      }
	    },
	    watch: {
	      visible: function visible(newVal, oldVal) {
	        if (newVal === oldVal) {
	          return;
	        }

	        this[newVal ? 'show' : 'hide']();
	      }
	    },
	    created: function created() {
	      // create non-reactive property
	      this._observer = null;
	    },
	    mounted: function mounted() {
	      // Listen for events from others to either open or close ourselves
	      // And listen to all modals to enable/disable enforce focus
	      this.listenOnRoot('bv::show::modal', this.showHandler);
	      this.listenOnRoot('bv::modal::shown', this.shownHandler);
	      this.listenOnRoot('bv::hide::modal', this.hideHandler);
	      this.listenOnRoot('bv::modal::hidden', this.hiddenHandler);
	      this.listenOnRoot('bv::toggle::modal', this.toggleHandler); // Listen for bv:modal::show events, and close ourselves if the opening modal not us

	      this.listenOnRoot('bv::modal::show', this.modalListener); // Initially show modal?

	      if (this.visible === true) {
	        this.show();
	      }
	    },
	    beforeDestroy: function beforeDestroy()
	    /* instanbul ignore next */
	    {
	      // Ensure everything is back to normal
	      if (this._observer) {
	        this._observer.disconnect();

	        this._observer = null;
	      } // Ensure our root "once" listener is gone


	      this.$root.$off('bv::modal::hidden', this.doShow);
	      this.setEnforceFocus(false);
	      this.setResizeEvent(false);

	      if (this.is_visible) {
	        this.is_visible = false;
	        this.is_show = false;
	        this.is_transitioning = false;
	        var count = decrementModalOpenCount();

	        if (count === 0) {
	          // Re-adjust body/navbar/fixed padding/margins (as we were the last modal open)
	          this.setModalOpenClass(false);
	          this.resetScrollbar();
	          this.resetDialogAdjustments();
	        }
	      }
	    },
	    methods: {
	      // Public Methods
	      show: function show() {
	        if (this.is_visible || this.is_opening) {
	          // if already open, on in the process of opening, do nothing
	          return;
	        }

	        if (this.is_closing) {
	          // if we are in the process of closing, wait until hidden before re-opening
	          this.$once('hidden', this.show);
	          return;
	        }

	        this.is_opening = true;
	        var showEvt = new BvEvent('show', {
	          cancelable: true,
	          vueTarget: this,
	          target: this.$refs.modal,
	          modalId: this.safeId(),
	          relatedTarget: null
	        });
	        this.emitEvent(showEvt); // Don't show if canceled

	        if (showEvt.defaultPrevented || this.is_visible) {
	          this.is_opening = false;
	          return;
	        }

	        if (!this.noStacking) {
	          // Find the z-index to use
	          this.zIndex = getModalNextZIndex(); // Show the modal

	          this.doShow();
	          return;
	        }

	        if (hasClass(document.body, 'modal-open')) {
	          // If another modal is already open, wait for it to close
	          this.$root.$once('bv::modal::hidden', this.doShow);
	          return;
	        } // Show the modal


	        this.doShow();
	      },
	      hide: function hide(trigger) {
	        if (!this.is_visible || this.is_closing) {
	          return;
	        }

	        this.is_closing = true;
	        var hideEvt = new BvEvent('hide', {
	          cancelable: true,
	          vueTarget: this,
	          target: this.$refs.modal,
	          modalId: this.safeId(),
	          // this could be the trigger element/component reference
	          relatedTarget: null,
	          isOK: trigger || null,
	          trigger: trigger || null,
	          cancel: function cancel() {
	            // Backwards compatibility
	            warn('b-modal: evt.cancel() is deprecated. Please use evt.preventDefault().');
	            this.preventDefault();
	          }
	        });

	        if (trigger === 'ok') {
	          this.$emit('ok', hideEvt);
	        } else if (trigger === 'cancel') {
	          this.$emit('cancel', hideEvt);
	        }

	        this.emitEvent(hideEvt); // Hide if not canceled

	        if (hideEvt.defaultPrevented || !this.is_visible) {
	          this.is_closing = false;
	          return;
	        } // stop observing for content changes


	        if (this._observer) {
	          this._observer.disconnect();

	          this._observer = null;
	        }

	        this.is_visible = false;
	        this.$emit('change', false);
	      },
	      // Public method to toggle modal visibility
	      toggle: function toggle(triggerEl) {
	        if (triggerEl) {
	          this.return_focus = triggerEl;
	        }

	        if (this.is_visible) {
	          this.hide('toggle');
	        } else {
	          this.show();
	        }
	      },
	      // Private method to finish showing modal
	      doShow: function doShow() {
	        var _this = this;

	        // Place modal in DOM if lazy
	        this.is_hidden = false;
	        this.$nextTick(function () {
	          // We do this in nextTick to ensure the modal is in DOM first before we show it
	          _this.is_visible = true;
	          _this.is_opening = false;

	          _this.$emit('change', true); // Observe changes in modal content and adjust if necessary


	          _this._observer = observeDOM(_this.$refs.content, _this.adjustDialog.bind(_this), OBSERVER_CONFIG);
	        });
	      },
	      // Transition Handlers
	      onBeforeEnter: function onBeforeEnter() {
	        this.getScrollbarWidth();
	        this.is_transitioning = true;
	        this.checkScrollbar();
	        var count = incrementModalOpenCount();

	        if (count === 1) {
	          this.setScrollbar();
	        }

	        this.adjustDialog();
	        this.setModalOpenClass(true);
	        this.setResizeEvent(true);
	      },
	      onEnter: function onEnter() {
	        this.is_block = true;
	      },
	      onAfterEnter: function onAfterEnter() {
	        var _this2 = this;

	        this.is_show = true;
	        this.is_transitioning = false;
	        this.$nextTick(function () {
	          var shownEvt = new BvEvent('shown', {
	            cancelable: false,
	            vueTarget: _this2,
	            target: _this2.$refs.modal,
	            modalId: _this2.safeId(),
	            relatedTarget: null
	          });

	          _this2.emitEvent(shownEvt);

	          _this2.focusFirst();

	          _this2.setEnforceFocus(true);
	        });
	      },
	      onBeforeLeave: function onBeforeLeave() {
	        this.is_transitioning = true;
	        this.setResizeEvent(false);
	      },
	      onLeave: function onLeave() {
	        // Remove the 'show' class
	        this.is_show = false;
	      },
	      onAfterLeave: function onAfterLeave() {
	        var _this3 = this;

	        this.is_block = false;
	        this.resetDialogAdjustments();
	        this.is_transitioning = false;
	        var count = decrementModalOpenCount();

	        if (count === 0) {
	          this.resetScrollbar();
	          this.setModalOpenClass(false);
	        }

	        this.setEnforceFocus(false);
	        this.$nextTick(function () {
	          _this3.is_hidden = _this3.lazy || false;
	          _this3.zIndex = ZINDEX_OFFSET;

	          _this3.returnFocusTo();

	          _this3.is_closing = false;
	          var hiddenEvt = new BvEvent('hidden', {
	            cancelable: false,
	            vueTarget: _this3,
	            target: _this3.lazy ? null : _this3.$refs.modal,
	            modalId: _this3.safeId(),
	            relatedTarget: null
	          });

	          _this3.emitEvent(hiddenEvt);
	        });
	      },
	      // Event emitter
	      emitEvent: function emitEvent(bvEvt) {
	        var type = bvEvt.type;
	        this.$emit(type, bvEvt);
	        this.$root.$emit("bv::modal::".concat(type), bvEvt, this.safeId());
	      },
	      // UI Event Handlers
	      onClickOut: function onClickOut(evt) {
	        // Do nothing if not visible, backdrop click disabled, or element that generated
	        // click event is no longer in document
	        if (!this.is_visible || this.noCloseOnBackdrop || !contains(document, evt.target)) {
	          return;
	        } // If backdrop clicked, hide modal


	        if (!contains(this.$refs.content, evt.target)) {
	          this.hide('backdrop');
	        }
	      },
	      onEsc: function onEsc(evt) {
	        // If ESC pressed, hide modal
	        if (evt.keyCode === KeyCodes.ESC && this.is_visible && !this.noCloseOnEsc) {
	          this.hide('esc');
	        }
	      },
	      // Document focusin listener
	      focusHandler: function focusHandler(evt) {
	        // If focus leaves modal, bring it back
	        var modal = this.$refs.modal;

	        if (!this.noEnforceFocus && this.isTop && this.is_visible && modal && document !== evt.target && !contains(modal, evt.target)) {
	          modal.focus({
	            preventScroll: true
	          });
	        }
	      },
	      // Turn on/off focusin listener
	      setEnforceFocus: function setEnforceFocus(on) {
	        var options = {
	          passive: true,
	          capture: false
	        };

	        if (on) {
	          eventOn(document, 'focusin', this.focusHandler, options);
	        } else {
	          eventOff(document, 'focusin', this.focusHandler, options);
	        }
	      },
	      // Resize Listener
	      setResizeEvent: function setResizeEvent(on)
	      /* istanbul ignore next: can't easily test in JSDOM */
	      {
	        var _this4 = this;
	        ['resize', 'orientationchange'].forEach(function (evtName) {
	          var options = {
	            passive: true,
	            capture: false
	          };

	          if (on) {
	            eventOn(window, evtName, _this4.adjustDialog, options);
	          } else {
	            eventOff(window, evtName, _this4.adjustDialog, options);
	          }
	        });
	      },
	      // Root Listener handlers
	      showHandler: function showHandler(id, triggerEl) {
	        if (id === this.id) {
	          this.return_focus = triggerEl || null;
	          this.show();
	        }
	      },
	      hideHandler: function hideHandler(id) {
	        if (id === this.id) {
	          this.hide('event');
	        }
	      },
	      toggleHandler: function toggleHandler(id, triggerEl) {
	        if (id === this.id) {
	          this.toggle(triggerEl);
	        }
	      },
	      shownHandler: function shownHandler() {
	        this.setTop();
	      },
	      hiddenHandler: function hiddenHandler() {
	        this.setTop();
	      },
	      setTop: function setTop() {
	        // Determine if we are the topmost visible modal
	        this.isTop = this.zIndex >= getModalMaxZIndex();
	      },
	      modalListener: function modalListener(bvEvt) {
	        // If another modal opens, close this one
	        if (this.noStacking && bvEvt.vueTarget !== this) {
	          this.hide();
	        }
	      },
	      // Focus control handlers
	      focusFirst: function focusFirst() {
	        // Don't try and focus if we are SSR
	        if (typeof document === 'undefined') {
	          return;
	        }

	        var modal = this.$refs.modal;
	        var activeElement = document.activeElement;

	        if (activeElement && contains(modal, activeElement)) {
	          // If activeElement is child of modal or is modal, no need to change focus
	          return;
	        }

	        if (modal) {
	          // make sure top of modal is showing (if longer than the viewport) and
	          // focus the modal content wrapper
	          this.$nextTick(function () {
	            modal.scrollTop = 0;
	            modal.focus();
	          });
	        }
	      },
	      returnFocusTo: function returnFocusTo() {
	        // Prefer returnFocus prop over event specified return_focus value
	        var el = this.returnFocus || this.return_focus || null;

	        if (typeof el === 'string') {
	          // CSS Selector
	          el = select(el);
	        }

	        if (el) {
	          el = el.$el || el;

	          if (isVisible(el)) {
	            el.focus();
	          }
	        }
	      },
	      // Utility methods
	      getScrollbarWidth: function getScrollbarWidth() {
	        var scrollDiv = document.createElement('div');
	        scrollDiv.className = 'modal-scrollbar-measure';
	        document.body.appendChild(scrollDiv);
	        this.scrollbarWidth = getBCR(scrollDiv).width - scrollDiv.clientWidth;
	        document.body.removeChild(scrollDiv);
	      },
	      setModalOpenClass: function setModalOpenClass(open) {
	        if (open) {
	          addClass(document.body, 'modal-open');
	        } else {
	          removeClass(document.body, 'modal-open');
	        }
	      },
	      adjustDialog: function adjustDialog() {
	        if (!this.is_visible) {
	          return;
	        }

	        var modal = this.$refs.modal;
	        var isModalOverflowing = modal.scrollHeight > document.documentElement.clientHeight;

	        if (!this.isBodyOverflowing && isModalOverflowing) {
	          modal.style.paddingLeft = "".concat(this.scrollbarWidth, "px");
	        } else {
	          modal.style.paddingLeft = '';
	        }

	        if (this.isBodyOverflowing && !isModalOverflowing) {
	          modal.style.paddingRight = "".concat(this.scrollbarWidth, "px");
	        } else {
	          modal.style.paddingRight = '';
	        }
	      },
	      resetDialogAdjustments: function resetDialogAdjustments() {
	        var modal = this.$refs.modal;

	        if (modal) {
	          modal.style.paddingLeft = '';
	          modal.style.paddingRight = '';
	        }
	      },
	      checkScrollbar: function checkScrollbar()
	      /* istanbul ignore next: getBCR can't be tested in JSDOM */
	      {
	        var _getBCR = getBCR(document.body),
	            left = _getBCR.left,
	            right = _getBCR.right,
	            height = _getBCR.height; // Extra check for body.height needed for stacked modals


	        this.isBodyOverflowing = left + right < window.innerWidth || height > window.innerHeight;
	      },
	      setScrollbar: function setScrollbar() {
	        /* istanbul ignore if: get Computed Style can't be tested in JSDOM */
	        if (this.isBodyOverflowing) {
	          // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
	          //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
	          var body = document.body;
	          var scrollbarWidth = this.scrollbarWidth;
	          body._paddingChangedForModal = [];
	          body._marginChangedForModal = []; // Adjust fixed content padding

	          selectAll(Selector$1.FIXED_CONTENT).forEach(function (el) {
	            var actualPadding = el.style.paddingRight;
	            var calculatedPadding = getCS(el).paddingRight || 0;
	            setAttr(el, 'data-padding-right', actualPadding);
	            el.style.paddingRight = "".concat(parseFloat(calculatedPadding) + scrollbarWidth, "px");

	            body._paddingChangedForModal.push(el);
	          }); // Adjust sticky content margin

	          selectAll(Selector$1.STICKY_CONTENT).forEach(function (el) {
	            var actualMargin = el.style.marginRight;
	            var calculatedMargin = getCS(el).marginRight || 0;
	            setAttr(el, 'data-margin-right', actualMargin);
	            el.style.marginRight = "".concat(parseFloat(calculatedMargin) - scrollbarWidth, "px");

	            body._marginChangedForModal.push(el);
	          }); // Adjust navbar-toggler margin

	          selectAll(Selector$1.NAVBAR_TOGGLER).forEach(function (el) {
	            var actualMargin = el.style.marginRight;
	            var calculatedMargin = getCS(el).marginRight || 0;
	            setAttr(el, 'data-margin-right', actualMargin);
	            el.style.marginRight = "".concat(parseFloat(calculatedMargin) + scrollbarWidth, "px");

	            body._marginChangedForModal.push(el);
	          }); // Adjust body padding

	          var actualPadding = body.style.paddingRight;
	          var calculatedPadding = getCS(body).paddingRight;
	          setAttr(body, 'data-padding-right', actualPadding);
	          body.style.paddingRight = "".concat(parseFloat(calculatedPadding) + scrollbarWidth, "px");
	        }
	      },
	      resetScrollbar: function resetScrollbar() {
	        var body = document.body;

	        if (body._paddingChangedForModal) {
	          // Restore fixed content padding
	          body._paddingChangedForModal.forEach(function (el) {
	            if (hasAttr(el, 'data-padding-right')) {
	              el.style.paddingRight = getAttr(el, 'data-padding-right') || '';
	              removeAttr(el, 'data-padding-right');
	            }
	          });
	        }

	        if (body._marginChangedForModal) {
	          // Restore sticky content and navbar-toggler margin
	          body._marginChangedForModal.forEach(function (el) {
	            if (hasAttr(el, 'data-margin-right')) {
	              el.style.marginRight = getAttr(el, 'data-margin-right') || '';
	              removeAttr(el, 'data-margin-right');
	            }
	          });
	        }

	        body._paddingChangedForModal = null;
	        body._marginChangedForModal = null; // Restore body padding

	        if (hasAttr(body, 'data-padding-right')) {
	          body.style.paddingRight = getAttr(body, 'data-padding-right') || '';
	          removeAttr(body, 'data-padding-right');
	        }
	      }
	    },
	    render: function render(h) {
	      var _this5 = this;

	      var $slots = this.$slots; // Modal Header

	      var header = h(false);

	      if (!this.hideHeader) {
	        var modalHeader = $slots['modal-header'];

	        if (!modalHeader) {
	          var closeButton = h(false);

	          if (!this.hideHeaderClose) {
	            closeButton = h('b-button-close', {
	              props: {
	                disabled: this.is_transitioning,
	                ariaLabel: this.headerCloseLabel,
	                textVariant: this.headerCloseVariant || this.headerTextVariant
	              },
	              on: {
	                click: function click(evt) {
	                  _this5.hide('headerclose');
	                }
	              }
	            }, [$slots['modal-header-close']]);
	          }

	          modalHeader = [h(this.titleTag, {
	            class: ['modal-title']
	          }, [$slots['modal-title'] || this.titleHtml || stripTags(this.title)]), closeButton];
	        }

	        header = h('header', {
	          ref: 'header',
	          staticClass: 'modal-header',
	          class: this.headerClasses,
	          attrs: {
	            id: this.safeId('__BV_modal_header_')
	          }
	        }, [modalHeader]);
	      } // Modal Body


	      var body = h('div', {
	        ref: 'body',
	        staticClass: 'modal-body',
	        class: this.bodyClasses,
	        attrs: {
	          id: this.safeId('__BV_modal_body_')
	        }
	      }, [$slots.default]); // Modal Footer

	      var footer = h(false);

	      if (!this.hideFooter) {
	        var modalFooter = $slots['modal-footer'];

	        if (!modalFooter) {
	          var cancelButton = h(false);

	          if (!this.okOnly) {
	            cancelButton = h('b-button', {
	              props: {
	                variant: this.cancelVariant,
	                size: this.buttonSize,
	                disabled: this.cancelDisabled || this.busy || this.is_transitioning
	              },
	              on: {
	                click: function click(evt) {
	                  _this5.hide('cancel');
	                }
	              }
	            }, [$slots['modal-cancel'] || this.cancelTitleHtml || stripTags(this.cancelTitle)]);
	          }

	          var okButton = h('b-button', {
	            props: {
	              variant: this.okVariant,
	              size: this.buttonSize,
	              disabled: this.okDisabled || this.busy || this.is_transitioning
	            },
	            on: {
	              click: function click(evt) {
	                _this5.hide('ok');
	              }
	            }
	          }, [$slots['modal-ok'] || this.okTitleHtml || stripTags(this.okTitle)]);
	          modalFooter = [cancelButton, okButton];
	        }

	        footer = h('footer', {
	          ref: 'footer',
	          staticClass: 'modal-footer',
	          class: this.footerClasses,
	          attrs: {
	            id: this.safeId('__BV_modal_footer_')
	          }
	        }, [modalFooter]);
	      } // Assemble Modal Content


	      var modalContent = h('div', {
	        ref: 'content',
	        class: this.contentClasses,
	        attrs: {
	          role: 'document',
	          id: this.safeId('__BV_modal_content_'),
	          'aria-labelledby': this.hideHeader ? null : this.safeId('__BV_modal_header_'),
	          'aria-describedby': this.safeId('__BV_modal_body_')
	        }
	      }, [header, body, footer]); // Modal Dialog wrapper

	      var modalDialog = h('div', {
	        staticClass: 'modal-dialog',
	        class: this.dialogClasses
	      }, [modalContent]); // Modal

	      var modal = h('div', {
	        ref: 'modal',
	        staticClass: 'modal',
	        class: this.modalClasses,
	        directives: [{
	          name: 'show',
	          rawName: 'v-show',
	          value: this.is_visible,
	          expression: 'is_visible'
	        }],
	        attrs: {
	          id: this.safeId(),
	          role: 'dialog',
	          tabindex: '-1',
	          'aria-hidden': this.is_visible ? null : 'true',
	          'aria-modal': this.is_visible ? 'true' : null
	        },
	        on: {
	          keydown: this.onEsc,
	          click: this.onClickOut
	        }
	      }, [modalDialog]); // Wrap modal in transition

	      modal = h('transition', {
	        props: {
	          enterClass: '',
	          enterToClass: '',
	          enterActiveClass: '',
	          leaveClass: '',
	          leaveActiveClass: '',
	          leaveToClass: ''
	        },
	        on: {
	          'before-enter': this.onBeforeEnter,
	          enter: this.onEnter,
	          'after-enter': this.onAfterEnter,
	          'before-leave': this.onBeforeLeave,
	          leave: this.onLeave,
	          'after-leave': this.onAfterLeave
	        }
	      }, [modal]); // Modal Backdrop

	      var backdrop = h(false);

	      if (!this.hideBackdrop && (this.is_visible || this.is_transitioning)) {
	        backdrop = h('div', {
	          staticClass: 'modal-backdrop',
	          class: this.backdropClasses,
	          attrs: {
	            id: this.safeId('__BV_modal_backdrop_')
	          }
	        }, [$slots['modal-backdrop']]);
	      } // Tab trap to prevent page from scrolling to next element in tab index during enforce focus tab cycle


	      var tabTrap = h(false);

	      if (this.is_visible && this.isTop && !this.noEnforceFocus) {
	        tabTrap = h('div', {
	          attrs: {
	            tabindex: '0'
	          }
	        });
	      } // Assemble modal and backdrop in an outer div needed for lazy modals


	      var outer = h(false);

	      if (!this.is_hidden) {
	        outer = h('div', {
	          key: 'modal-outer',
	          style: this.modalOuterStyle,
	          attrs: {
	            id: this.safeId('__BV_modal_outer_')
	          }
	        }, [modal, tabTrap, backdrop]);
	      } // Wrap in DIV to maintain thi.$el reference for hide/show method aceess


	      return h('div', {}, [outer]);
	    }
	  };

	  var listenTypes$1 = {
	    click: true
	  };
	  var bModal = {
	    // eslint-disable-next-line no-shadow-restricted-names
	    bind: function bind(el, binding, vnode) {
	      bindTargets(vnode, binding, listenTypes$1, function (_ref) {
	        var targets = _ref.targets,
	            vnode = _ref.vnode;
	        targets.forEach(function (target) {
	          vnode.context.$root.$emit('bv::show::modal', target, vnode.elm);
	        });
	      });

	      if (el.tagName !== 'BUTTON') {
	        // If element is not a button, we add `role="button"` for accessibility
	        setAttr(el, 'role', 'button');
	      }
	    },
	    unbind: function unbind(el, binding, vnode) {
	      unbindTargets(vnode, binding, listenTypes$1);

	      if (el.tagName !== 'BUTTON') {
	        // If element is not a button, we add `role="button"` for accessibility
	        removeAttr(el, 'role', 'button');
	      }
	    }
	  };

	  var directives$1 = {
	    bModal: bModal
	  };
	  var modalDirectivePlugin = {
	    install: function install(Vue) {
	      registerDirectives(Vue, directives$1);
	    }
	  };

	  var components$q = {
	    BModal: BModal
	  };
	  var index$o = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$q);
	      Vue.use(modalDirectivePlugin);
	    }
	  };

	  var props$C = {
	    tag: {
	      type: String,
	      default: 'ul'
	    },
	    fill: {
	      type: Boolean,
	      default: false
	    },
	    justified: {
	      type: Boolean,
	      default: false
	    },
	    tabs: {
	      type: Boolean,
	      default: false
	    },
	    pills: {
	      type: Boolean,
	      default: false
	    },
	    vertical: {
	      type: Boolean,
	      default: false
	    },
	    isNavBar: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  };
	  var BNav = {
	    name: 'BNav',
	    functional: true,
	    props: props$C,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;

	      if (props.isNavBar) {
	        /* istanbul ignore next */
	        warn("b-nav: Prop 'is-nav-bar' is deprecated. Please use component '<b-navbar-nav>' instead.");
	      }

	      return h(props.tag, mergeData(data, {
	        class: {
	          nav: !props.isNavBar,
	          'navbar-nav': props.isNavBar,
	          'nav-tabs': props.tabs && !props.isNavBar,
	          'nav-pills': props.pills && !props.isNavBar,
	          'flex-column': props.vertical && !props.isNavBar,
	          'nav-fill': props.fill,
	          'nav-justified': props.justified
	        }
	      }), children);
	    }
	  };

	  var props$D = propsFactory(); // @vue/component

	  var BNavItem = {
	    name: 'BNavItem',
	    functional: true,
	    props: _objectSpread({}, props$D, {
	      linkAttrs: {
	        type: Object,
	        default: function _default() {
	          return {};
	        }
	      },
	      linkClasses: {
	        type: [String, Object, Array],
	        default: null
	      }
	    }),
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          listeners = _ref.listeners,
	          children = _ref.children;
	      // We transfer the listeners to the link
	      delete data.on;
	      return h('li', mergeData(data, {
	        staticClass: 'nav-item'
	      }), [h(BLink, {
	        staticClass: 'nav-link',
	        class: props.linkClasses,
	        attrs: props.linkAttrs,
	        props: props,
	        on: listeners
	      }, children)]);
	    }
	  };

	  var props$E = {
	    tag: {
	      type: String,
	      default: 'span'
	    } // @vue/component

	  };
	  var BNavText = {
	    name: 'BNavText',
	    functional: true,
	    props: props$E,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        staticClass: 'navbar-text'
	      }), children);
	    }
	  };

	  var BNavForm = {
	    name: 'BNavForm',
	    functional: true,
	    props: {
	      id: {
	        type: String,
	        default: null
	      }
	    },
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(BForm, mergeData(data, {
	        attrs: {
	          id: props.id
	        },
	        props: {
	          inline: true
	        }
	      }), children);
	    }
	  };

	  var BNavItemDropdown = {
	    name: 'BNavItemDropdown',
	    mixins: [idMixin, dropdownMixin],
	    props: {
	      noCaret: {
	        type: Boolean,
	        default: false
	      },
	      extraToggleClasses: {
	        // Extra Toggle classes
	        type: String,
	        default: ''
	      },
	      extraMenuClasses: {
	        // Extra Menu classes
	        type: String,
	        default: ''
	      },
	      role: {
	        type: String,
	        default: 'menu'
	      }
	    },
	    computed: {
	      isNav: function isNav() {
	        // Signal to dropdown mixin that we are in a navbar
	        return true;
	      },
	      dropdownClasses: function dropdownClasses() {
	        return ['nav-item', 'b-nav-dropdown', 'dropdown', this.dropup ? 'dropup' : '', this.visible ? 'show' : ''];
	      },
	      toggleClasses: function toggleClasses() {
	        return ['nav-link', this.noCaret ? '' : 'dropdown-toggle', this.disabled ? 'disabled' : '', this.extraToggleClasses ? this.extraToggleClasses : ''];
	      },
	      menuClasses: function menuClasses() {
	        return ['dropdown-menu', this.right ? 'dropdown-menu-right' : 'dropdown-menu-left', this.visible ? 'show' : '', this.extraMenuClasses ? this.extraMenuClasses : ''];
	      }
	    },
	    render: function render(h) {
	      var button = h('a', {
	        class: this.toggleClasses,
	        ref: 'toggle',
	        attrs: {
	          href: '#',
	          id: this.safeId('_BV_button_'),
	          disabled: this.disabled,
	          'aria-haspopup': 'true',
	          'aria-expanded': this.visible ? 'true' : 'false'
	        },
	        on: {
	          click: this.toggle,
	          keydown: this.toggle // space, enter, down

	        }
	      }, [this.$slots['button-content'] || this.$slots.text || h('span', {
	        domProps: htmlOrText(this.html, this.text)
	      })]);
	      var menu = h('div', {
	        class: this.menuClasses,
	        ref: 'menu',
	        attrs: {
	          tabindex: '-1',
	          'aria-labelledby': this.safeId('_BV_button_')
	        },
	        on: {
	          mouseover: this.onMouseOver,
	          keydown: this.onKeydown // tab, up, down, esc

	        }
	      }, [this.$slots.default]);
	      return h('li', {
	        attrs: {
	          id: this.safeId()
	        },
	        class: this.dropdownClasses
	      }, [button, menu]);
	    }
	  };

	  var components$r = {
	    BNav: BNav,
	    BNavItem: BNavItem,
	    BNavText: BNavText,
	    BNavForm: BNavForm,
	    BNavItemDropdown: BNavItemDropdown,
	    BNavItemDd: BNavItemDropdown,
	    BNavDropdown: BNavItemDropdown,
	    BNavDd: BNavItemDropdown
	  };
	  var navPlugin = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$r);
	      Vue.use(dropdownPlugin);
	    }
	  };

	  var props$F = {
	    tag: {
	      type: String,
	      default: 'nav'
	    },
	    type: {
	      type: String,
	      default: 'light'
	    },
	    variant: {
	      type: String
	    },
	    toggleable: {
	      type: [Boolean, String],
	      default: false
	    },
	    fixed: {
	      type: String
	    },
	    sticky: {
	      type: Boolean,
	      default: false
	    },
	    print: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  };
	  var BNavbar = {
	    name: 'BNavbar',
	    functional: true,
	    props: props$F,
	    render: function render(h, _ref) {
	      var _class;

	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var breakpoint = '';

	      if (props.toggleable && typeof props.toggleable === 'string' && props.toggleable !== 'xs') {
	        breakpoint = "navbar-expand-".concat(props.toggleable);
	      } else if (props.toggleable === false) {
	        breakpoint = 'navbar-expand';
	      }

	      return h(props.tag, mergeData(data, {
	        staticClass: 'navbar',
	        class: (_class = {
	          'd-print': props.print,
	          'sticky-top': props.sticky
	        }, _defineProperty(_class, "navbar-".concat(props.type), Boolean(props.type)), _defineProperty(_class, "bg-".concat(props.variant), Boolean(props.variant)), _defineProperty(_class, "fixed-".concat(props.fixed), Boolean(props.fixed)), _defineProperty(_class, "".concat(breakpoint), Boolean(breakpoint)), _class),
	        attrs: {
	          role: props.tag === 'nav' ? null : 'navigation'
	        }
	      }), children);
	    }
	  };

	  var props$G = {
	    tag: {
	      type: String,
	      default: 'ul'
	    },
	    fill: {
	      type: Boolean,
	      default: false
	    },
	    justified: {
	      type: Boolean,
	      default: false
	    } // @vue/component

	  };
	  var BNavbarNav = {
	    name: 'BNavbarNav',
	    functional: true,
	    props: props$G,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      return h(props.tag, mergeData(data, {
	        staticClass: 'navbar-nav',
	        class: {
	          'nav-fill': props.fill,
	          'nav-justified': props.justified
	        }
	      }), children);
	    }
	  };

	  var linkProps$3 = propsFactory();
	  linkProps$3.href.default = undefined;
	  linkProps$3.to.default = undefined;
	  var props$H = _objectSpread({}, linkProps$3, {
	    tag: {
	      type: String,
	      default: 'div'
	    } // @vue/component

	  });
	  var BNavbarBrand = {
	    name: 'BNavbarBrand',
	    functional: true,
	    props: props$H,
	    render: function render(h, _ref) {
	      var props = _ref.props,
	          data = _ref.data,
	          children = _ref.children;
	      var isLink = Boolean(props.to || props.href);
	      var tag = isLink ? BLink : props.tag;
	      return h(tag, mergeData(data, {
	        staticClass: 'navbar-brand',
	        props: isLink ? pluckProps(linkProps$3, props) : {}
	      }), children);
	    }
	  };

	  var BNavbarToggle = {
	    name: 'BNavbarToggle',
	    mixins: [listenOnRootMixin],
	    props: {
	      label: {
	        type: String,
	        default: 'Toggle navigation'
	      },
	      target: {
	        type: String,
	        required: true
	      }
	    },
	    data: function data() {
	      return {
	        toggleState: false
	      };
	    },
	    created: function created() {
	      this.listenOnRoot('bv::collapse::state', this.handleStateEvt);
	    },
	    methods: {
	      onClick: function onClick(evt) {
	        this.$emit('click', evt);
	        /* istanbul ignore next */

	        if (!evt.defaultPrevented) {
	          this.$root.$emit('bv::toggle::collapse', this.target);
	        }
	      },
	      handleStateEvt: function handleStateEvt(id, state) {
	        if (id === this.target) {
	          this.toggleState = state;
	        }
	      }
	    },
	    render: function render(h) {
	      return h('button', {
	        class: ['navbar-toggler'],
	        attrs: {
	          type: 'button',
	          'aria-label': this.label,
	          'aria-controls': this.target,
	          'aria-expanded': this.toggleState ? 'true' : 'false'
	        },
	        on: {
	          click: this.onClick
	        }
	      }, [this.$slots.default || h('span', {
	        class: ['navbar-toggler-icon']
	      })]);
	    }
	  };

	  var components$s = {
	    BNavbar: BNavbar,
	    BNavbarNav: BNavbarNav,
	    BNavbarBrand: BNavbarBrand,
	    BNavbarToggle: BNavbarToggle,
	    BNavToggle: BNavbarToggle
	  };
	  var index$p = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$s);
	      Vue.use(navPlugin);
	      Vue.use(collapsePlugin);
	      Vue.use(dropdownPlugin);
	    }
	  };

	  /**
	   * @param {number} length
	   * @return {Array}
	   */
	  var range = (function (length) {
	    return Array.apply(null, {
	      length: length
	    });
	  });

	  /**
	   * Convert a value to a string that can be rendered.
	   */

	  var toString = (function (val) {
	    var spaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
	    return val === null || val === undefined ? '' : isArray(val) || isPlainObject(val) && val.toString === Object.prototype.toString ? JSON.stringify(val, null, spaces) : String(val);
	  });

	  /*
	   * Comon props, computed, data, render function, and methods for b-pagination and b-pagination-nav
	   */

	  var ELLIPSIS_THRESHOLD = 3; // Default # of buttons limit

	  var DEFAULT_LIMIT = 5; // Make an array of N to N+X

	  function makePageArray(startNum, numPages) {
	    return range(numPages).map(function (value, index) {
	      return {
	        number: index + startNum,
	        classes: null
	      };
	    });
	  } // Sanitize the provided Limit value (converting to a number)


	  function sanitizeLimit(value) {
	    var limit = parseInt(value, 10) || 1;
	    return limit < 1 ? DEFAULT_LIMIT : limit;
	  } // Sanitize the provided numberOfPages value (converting to a number)


	  function sanitizeNumPages(value) {
	    var num = parseInt(value, 10) || 1;
	    return num < 1 ? 1 : num;
	  } // Sanitize the provided current page number (converting to a number)


	  function sanitizeCurPage(value, numPages) {
	    var page = parseInt(value, 10) || 1;
	    return page > numPages ? numPages : page < 1 ? 1 : page;
	  } // Links don't normally respond to SPACE, so we add that functionality via this handler


	  function onSpaceKey(evt) {
	    if (evt.keyCode === KeyCodes.SPACE) {
	      evt.preventDefault(); // Stop page from scrolling

	      evt.stopImmediatePropagation();
	      evt.stopPropagation(); // Trigger the click event on the link

	      evt.currentTarget.click();
	      return false;
	    }
	  } // Props object


	  var props$I = {
	    disabled: {
	      type: Boolean,
	      default: false
	    },
	    value: {
	      type: [Number, String],
	      default: 1,
	      validator: function validator(value) {
	        var num = parseInt(value, 10);
	        /* istanbul ignore if */

	        if (isNaN(num) || num < 1) {
	          warn('pagination: v-model value must be a number greater than 0');
	          return false;
	        }

	        return true;
	      }
	    },
	    limit: {
	      type: [Number, String],
	      default: DEFAULT_LIMIT,
	      validator: function validator(value) {
	        var num = parseInt(value, 10);
	        /* istanbul ignore if */

	        if (isNaN(num) || num < 1) {
	          warn('pagination: prop "limit" must be a number greater than 0');
	          return false;
	        }

	        return true;
	      }
	    },
	    size: {
	      type: String,
	      default: 'md'
	    },
	    align: {
	      type: String,
	      default: 'left'
	    },
	    hideGotoEndButtons: {
	      type: Boolean,
	      default: false
	    },
	    ariaLabel: {
	      type: String,
	      default: 'Pagination'
	    },
	    labelFirstPage: {
	      type: String,
	      default: 'Go to first page'
	    },
	    firstText: {
	      type: String,
	      default: '«'
	    },
	    labelPrevPage: {
	      type: String,
	      default: 'Go to previous page'
	    },
	    prevText: {
	      type: String,
	      default: '‹'
	    },
	    labelNextPage: {
	      type: String,
	      default: 'Go to next page'
	    },
	    nextText: {
	      type: String,
	      default: '›'
	    },
	    labelLastPage: {
	      type: String,
	      default: 'Go to last page'
	    },
	    lastText: {
	      type: String,
	      default: '»'
	    },
	    labelPage: {
	      type: String,
	      default: 'Go to page'
	    },
	    hideEllipsis: {
	      type: Boolean,
	      default: false
	    },
	    ellipsisText: {
	      type: String,
	      default: '…'
	    } // @vue/component

	  };
	  var paginationMixin = {
	    components: {
	      BLink: BLink
	    },
	    props: props$I,
	    data: function data() {
	      return {
	        currentPage: 1,
	        localNumPages: 1,
	        localLimit: DEFAULT_LIMIT
	      };
	    },
	    computed: {
	      btnSize: function btnSize() {
	        return this.size ? "pagination-".concat(this.size) : '';
	      },
	      alignment: function alignment() {
	        if (this.align === 'center') {
	          return 'justify-content-center';
	        } else if (this.align === 'end' || this.align === 'right') {
	          return 'justify-content-end';
	        }

	        return '';
	      },
	      paginationParams: function paginationParams() {
	        // Determine if we should show the the ellipsis
	        var limit = this.limit;
	        var numPages = this.localNumPages;
	        var curPage = this.currentPage;
	        var hideEllipsis = this.hideEllipsis;
	        var showFirstDots = false;
	        var showLastDots = false;
	        var numLinks = limit;
	        var startNum = 1;

	        if (numPages <= limit) {
	          // Special Case: Less pages available than the limit of displayed pages
	          numLinks = numPages;
	        } else if (curPage < limit - 1 && limit > ELLIPSIS_THRESHOLD) {
	          // We are near the beginning of the page list
	          if (!hideEllipsis) {
	            showLastDots = true;
	            numLinks = limit - 1;
	          }
	        } else if (numPages - curPage + 2 < limit && limit > ELLIPSIS_THRESHOLD) {
	          // We are near the end of the list
	          if (!hideEllipsis) {
	            numLinks = limit - 1;
	            showFirstDots = true;
	          }

	          startNum = numPages - numLinks + 1;
	        } else {
	          // We are somewhere in the middle of the page list
	          if (limit > ELLIPSIS_THRESHOLD && !hideEllipsis) {
	            numLinks = limit - 2;
	            showFirstDots = showLastDots = true;
	          }

	          startNum = curPage - Math.floor(numLinks / 2);
	        } // Sanity checks


	        if (startNum < 1) {
	          startNum = 1;
	        } else if (startNum > numPages - numLinks) {
	          startNum = numPages - numLinks + 1;
	        }

	        return {
	          showFirstDots: showFirstDots,
	          showLastDots: showLastDots,
	          numLinks: numLinks,
	          startNum: startNum
	        };
	      },
	      pageList: function pageList() {
	        // Generates the pageList array
	        var _this$paginationParam = this.paginationParams,
	            numLinks = _this$paginationParam.numLinks,
	            startNum = _this$paginationParam.startNum; // Generate list of page numbers

	        var pages = makePageArray(startNum, numLinks); // We limit to a total of 3 page buttons on XS screens
	        // So add classes to page links to hide them for XS breakpoint
	        // Note: Ellipsis will also be hidden on XS screens
	        // TODO: Make this visual limit configurable based on breakpoint(s)

	        if (pages.length > 3) {
	          var idx = this.currentPage - startNum;

	          if (idx === 0) {
	            // Keep leftmost 3 buttons visible when current page is first page
	            for (var i = 3; i < pages.length; i++) {
	              pages[i].classes = 'd-none d-sm-flex';
	            }
	          } else if (idx === pages.length - 1) {
	            // Keep rightmost 3 buttons visible when current page is last page
	            for (var _i = 0; _i < pages.length - 3; _i++) {
	              pages[_i].classes = 'd-none d-sm-flex';
	            }
	          } else {
	            // Hide all except current page, current page - 1 and current page + 1
	            for (var _i2 = 0; _i2 < idx - 1; _i2++) {
	              // hide some left button(s)
	              pages[_i2].classes = 'd-none d-sm-flex';
	            }

	            for (var _i3 = pages.length - 1; _i3 > idx + 1; _i3--) {
	              // hide some right button(s)
	              pages[_i3].classes = 'd-none d-sm-flex';
	            }
	          }
	        }

	        return pages;
	      }
	    },
	    watch: {
	      value: function value(newValue, oldValue) {
	        if (newValue !== oldValue) {
	          this.currentPage = sanitizeCurPage(newValue, this.localNumPages);
	        }
	      },
	      currentPage: function currentPage(newValue, oldValue) {
	        if (newValue !== oldValue) {
	          this.$emit('input', newValue);
	        }
	      },
	      numberOfPages: function numberOfPages(newValue, oldValue) {
	        if (newValue !== oldValue) {
	          this.localNumPages = sanitizeNumPages(newValue);
	        }
	      },
	      limit: function limit(newValue, oldValue) {
	        if (newValue !== oldValue) {
	          this.localLimit = sanitizeLimit(newValue);
	        }
	      }
	    },
	    created: function created() {
	      // Set our default values in data
	      this.localLimit = sanitizeLimit(this.limit);
	      this.localNumPages = sanitizeNumPages(this.numberOfPages);
	      this.currentPage = sanitizeCurPage(this.value, this.localNumPages);
	    },
	    methods: {
	      getButtons: function getButtons() {
	        // Return only buttons that are visible
	        return selectAll('a.page-link', this.$el).filter(function (btn) {
	          return isVisible(btn);
	        });
	      },
	      setBtnFocus: function setBtnFocus(btn) {
	        btn.focus();
	      },
	      focusCurrent: function focusCurrent() {
	        var _this = this;

	        // We do this in next tick to ensure buttons have finished rendering
	        this.$nextTick(function () {
	          var btn = _this.getButtons().find(function (el) {
	            return parseInt(getAttr(el, 'aria-posinset'), 10) === _this.currentPage;
	          });

	          if (btn && btn.focus) {
	            _this.setBtnFocus(btn);
	          } else {
	            // Fallback if current page is not in button list
	            _this.focusFirst();
	          }
	        });
	      },
	      focusFirst: function focusFirst() {
	        var _this2 = this;

	        // We do this in next tick to ensure buttons have finished rendering
	        this.$nextTick(function () {
	          var btn = _this2.getButtons().find(function (el) {
	            return !isDisabled(el);
	          });

	          if (btn && btn.focus && btn !== document.activeElement) {
	            _this2.setBtnFocus(btn);
	          }
	        });
	      },
	      focusLast: function focusLast() {
	        var _this3 = this;

	        // We do this in next tick to ensure buttons have finished rendering
	        this.$nextTick(function () {
	          var btn = _this3.getButtons().reverse().find(function (el) {
	            return !isDisabled(el);
	          });

	          if (btn && btn.focus && btn !== document.activeElement) {
	            _this3.setBtnFocus(btn);
	          }
	        });
	      },
	      focusPrev: function focusPrev() {
	        var _this4 = this;

	        // We do this in next tick to ensure buttons have finished rendering
	        this.$nextTick(function () {
	          var buttons = _this4.getButtons();

	          var idx = buttons.indexOf(document.activeElement);

	          if (idx > 0 && !isDisabled(buttons[idx - 1]) && buttons[idx - 1].focus) {
	            _this4.setBtnFocus(buttons[idx - 1]);
	          }
	        });
	      },
	      focusNext: function focusNext() {
	        var _this5 = this;

	        // We do this in next tick to ensure buttons have finished rendering
	        this.$nextTick(function () {
	          var buttons = _this5.getButtons();

	          var idx = buttons.indexOf(document.activeElement);
	          var cnt = buttons.length - 1;

	          if (idx < cnt && !isDisabled(buttons[idx + 1]) && buttons[idx + 1].focus) {
	            _this5.setBtnFocus(buttons[idx + 1]);
	          }
	        });
	      }
	    },
	    render: function render(h) {
	      var _this6 = this;

	      var buttons = [];
	      var numberOfPages = this.localNumPages;
	      var disabled = this.disabled;
	      var _this$paginationParam2 = this.paginationParams,
	          showFirstDots = _this$paginationParam2.showFirstDots,
	          showLastDots = _this$paginationParam2.showLastDots; // Helper function

	      var isActivePage = function isActivePage(pageNum) {
	        return pageNum === _this6.currentPage;
	      }; // Factory function for prev/next/first/last buttons


	      var makeEndBtn = function makeEndBtn(linkTo, ariaLabel, btnSlot, btnText, pageTest, key) {
	        var button;
	        var btnContent = btnSlot || toString(btnText) || h(false);
	        var attrs = {
	          role: 'none presentation',
	          'aria-hidden': disabled ? 'true' : null
	        };

	        if (disabled || isActivePage(pageTest) || linkTo < 1 || linkTo > numberOfPages) {
	          button = h('li', {
	            key: key,
	            attrs: attrs,
	            staticClass: 'page-item',
	            class: ['disabled']
	          }, [h('span', {
	            staticClass: 'page-link'
	          }, [btnContent])]);
	        } else {
	          button = h('li', {
	            key: key,
	            attrs: attrs,
	            staticClass: 'page-item'
	          }, [h('b-link', {
	            staticClass: 'page-link',
	            props: _this6.linkProps(linkTo),
	            attrs: {
	              role: 'menuitem',
	              tabindex: '-1',
	              'aria-label': ariaLabel,
	              'aria-controls': _this6.ariaControls || null
	            },
	            on: {
	              click: function click(evt) {
	                _this6.onClick(linkTo, evt);
	              },
	              keydown: onSpaceKey
	            }
	          }, [btnContent])]);
	        }

	        return button;
	      }; // Ellipsis factory


	      var makeEllipsis = function makeEllipsis(isLast) {
	        return h('li', {
	          key: "elipsis-".concat(isLast ? 'last' : 'first'),
	          staticClass: 'page-item',
	          class: ['disabled', 'd-none', 'd-sm-flex'],
	          attrs: {
	            role: 'separator'
	          }
	        }, [h('div', {
	          staticClass: 'page-link'
	        }, [_this6.$slots['ellipsis-text'] || toString(_this6.ellipsisText) || h(false)])]);
	      }; // Goto First Page button bookend


	      buttons.push(this.hideGotoEndButtons ? h(false) : makeEndBtn(1, this.labelFirstPage, this.$slots['first-text'], this.firstText, 1, 'bookend-goto-first')); // Goto Previous page button bookend

	      buttons.push(makeEndBtn(this.currentPage - 1, this.labelPrevPage, this.$slots['prev-text'], this.prevText, 1, 'bookend-goto-prev')); // First Ellipsis Bookend

	      buttons.push(showFirstDots ? makeEllipsis(false) : h(false)); // Individual Page links

	      this.pageList.forEach(function (page) {
	        var active = isActivePage(page.number);
	        var staticClass = 'page-link';
	        var attrs = {
	          role: 'menuitemradio',
	          'aria-disabled': disabled ? 'true' : null,
	          'aria-controls': _this6.ariaControls || null,
	          'aria-label': "".concat(_this6.labelPage, " ").concat(page.number),
	          'aria-checked': active ? 'true' : 'false',
	          'aria-posinset': page.number,
	          'aria-setsize': numberOfPages,
	          // ARIA "roving tabindex" method
	          tabindex: disabled ? null : active ? '0' : '-1'
	        };
	        var inner = h(disabled ? 'span' : "b-link", {
	          props: disabled ? {} : _this6.linkProps(page.number),
	          staticClass: staticClass,
	          attrs: attrs,
	          on: disabled ? {} : {
	            click: function click(evt) {
	              _this6.onClick(page.number, evt);
	            },
	            keydown: onSpaceKey
	          }
	        }, toString(_this6.makePage(page.number)));
	        buttons.push(h('li', {
	          key: "page-".concat(page.number),
	          staticClass: 'page-item',
	          class: [disabled ? 'disabled' : '', active ? 'active' : '', page.classes],
	          attrs: {
	            role: 'none presentation'
	          }
	        }, [inner]));
	      }); // Last Ellipsis Bookend

	      buttons.push(showLastDots ? makeEllipsis(true) : h(false)); // Goto Next page button bookend

	      buttons.push(makeEndBtn(this.currentPage + 1, this.labelNextPage, this.$slots['next-text'], this.nextText, numberOfPages, 'bookend-goto-next')); // Goto Last Page button bookend

	      buttons.push(this.hideGotoEndButtons ? h(false) : makeEndBtn(numberOfPages, this.labelLastPage, this.$slots['last-text'], this.lastText, numberOfPages, 'bookend-goto-last')); // Assemble the paginatiom buttons

	      var pagination = h('ul', {
	        ref: 'ul',
	        class: ['pagination', 'b-pagination', this.btnSize, this.alignment],
	        attrs: {
	          role: 'menubar',
	          'aria-disabled': disabled ? 'true' : 'false',
	          'aria-label': this.ariaLabel || null
	        },
	        on: {
	          keydown: function keydown(evt) {
	            var keyCode = evt.keyCode;
	            var shift = evt.shiftKey;

	            if (keyCode === KeyCodes.LEFT) {
	              evt.preventDefault();
	              shift ? _this6.focusFirst() : _this6.focusPrev();
	            } else if (keyCode === KeyCodes.RIGHT) {
	              evt.preventDefault();
	              shift ? _this6.focusLast() : _this6.focusNext();
	            }
	          }
	        }
	      }, buttons); // if we are pagination-nav, wrap in '<nav>' wrapper

	      if (this.isNav) {
	        return h('nav', {
	          attrs: {
	            'aria-disabled': disabled ? 'true' : null,
	            'aria-hidden': disabled ? 'true' : 'false'
	          }
	        }, [pagination]);
	      } else {
	        return pagination;
	      }
	    }
	  };

	  var DEFAULT_PER_PAGE = 20;
	  var DEFAULT_TOTAL_ROWS = 0;

	  function sanitizePerPage(value) {
	    var perPage = parseInt(value, 10) || DEFAULT_PER_PAGE;
	    return perPage < 1 ? 1 : perPage;
	  }

	  function sanitizeTotalRows(value) {
	    var totalRows = parseInt(value, 10) || DEFAULT_TOTAL_ROWS;
	    return totalRows < 0 ? 0 : totalRows;
	  }

	  var props$J = {
	    perPage: {
	      type: [Number, String],
	      default: DEFAULT_PER_PAGE
	    },
	    totalRows: {
	      type: [Number, String],
	      default: DEFAULT_TOTAL_ROWS
	    },
	    ariaControls: {
	      type: String,
	      default: null
	    } // Our render function is brought in from the pagination mixin
	    // @vue/component

	  };
	  var BPagination = {
	    name: 'BPagination',
	    mixins: [paginationMixin],
	    props: props$J,
	    computed: {
	      numberOfPages: function numberOfPages() {
	        var result = Math.ceil(sanitizeTotalRows(this.totalRows) / sanitizePerPage(this.perPage));
	        return result < 1 ? 1 : result;
	      }
	    },
	    methods: {
	      // These methods are used by the render function
	      onClick: function onClick(num, evt) {
	        var _this = this;

	        // Handle edge cases where number of pages has changed (i.e. if perPage changes)
	        if (num > this.numberOfPages) {
	          num = this.numberOfPages;
	        } else if (num < 1) {
	          num = 1;
	        } // Update the v-model


	        this.currentPage = num; // Emit event triggered by user interaction

	        this.$emit('change', this.currentPage);
	        this.$nextTick(function () {
	          // Keep the current button focused if possible
	          var target = evt.target;

	          if (isVisible(target) && _this.$el.contains(target) && target.focus) {
	            target.focus();
	          } else {
	            _this.focusCurrent();
	          }
	        });
	      },
	      makePage: function makePage(pagenum) {
	        return pagenum;
	      },
	      linkProps: function linkProps(pagenum) {
	        // Always '#' for pagination component
	        return {
	          href: '#'
	        };
	      }
	    }
	  };

	  var components$t = {
	    BPagination: BPagination
	  };
	  var index$q = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$t);
	    }
	  };

	  var routerProps = pickLinkProps('activeClass', 'exactActiveClass', 'append', 'exact', 'replace', 'target', 'rel'); // Props object

	  var props$K = _objectSpread({
	    // pagination-nav specific props
	    numberOfPages: {
	      type: [Number, String],
	      default: 1,
	      validator: function validator(value) {
	        var num = parseInt(value, 10);
	        /* istanbul ignore if */

	        if (isNaN(num) || num < 1) {
	          warn('b-pagination: prop "number-of-pages" must be a number greater than 0');
	          return false;
	        }

	        return true;
	      }
	    },
	    baseUrl: {
	      type: String,
	      default: '/'
	    },
	    useRouter: {
	      type: Boolean,
	      default: false
	    },
	    linkGen: {
	      type: Function,
	      default: null
	    },
	    pageGen: {
	      type: Function,
	      default: null
	    }
	  }, routerProps); // Our render function is brought in via the pagination mixin
	  // @vue/component


	  var BPaginationNav = {
	    name: 'BPaginatonNav',
	    mixins: [paginationMixin],
	    props: props$K,
	    computed: {
	      // Used by render function to trigger wraping in '<nav>' element
	      isNav: function isNav() {
	        return true;
	      }
	    },
	    methods: {
	      onClick: function onClick(pageNum, evt) {
	        // Update the v-model
	        this.currentPage = pageNum;
	        this.$nextTick(function () {
	          try {
	            // Emulate native link click page reloading behaviour by  blurring the
	            // paginator and returing focus to the document
	            var target = evt.currentTarget || evt.target;
	            target.blur();
	          } catch (e) {}
	        });
	      },
	      makePage: function makePage(pagenum) {
	        if (this.pageGen && typeof this.pageGen === 'function') {
	          return this.pageGen(pagenum);
	        }

	        return pagenum;
	      },
	      makeLink: function makeLink(pagenum) {
	        if (this.linkGen && typeof this.linkGen === 'function') {
	          return this.linkGen(pagenum);
	        }

	        var link = "".concat(this.baseUrl).concat(pagenum);
	        return this.useRouter ? {
	          path: link
	        } : link;
	      },
	      linkProps: function linkProps(pagenum) {
	        var link = this.makeLink(pagenum);
	        var props = {
	          href: typeof link === 'string' ? link : void 0,
	          target: this.target || null,
	          rel: this.rel || null,
	          disabled: this.disabled
	        };

	        if (this.useRouter || _typeof(link) === 'object') {
	          props = _objectSpread({}, props, {
	            to: link,
	            exact: this.exact,
	            activeClass: this.activeClass,
	            exactActiveClass: this.exactActiveClass,
	            append: this.append,
	            replace: this.replace
	          });
	        }

	        return props;
	      }
	    }
	  };

	  var components$u = {
	    BPaginationNav: BPaginationNav
	  };
	  var index$r = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$u);
	    }
	  };

	  var NAME = 'tooltip';
	  var CLASS_PREFIX = 'bs-tooltip';
	  var BSCLS_PREFIX_REGEX = new RegExp("\\b".concat(CLASS_PREFIX, "\\S+"), 'g');
	  var TRANSITION_DURATION = 150; // Modal $root hidden event

	  var MODAL_CLOSE_EVENT = 'bv::modal::hidden'; // Modal container for appending tip/popover

	  var MODAL_CLASS = '.modal-content';
	  var AttachmentMap$1 = {
	    AUTO: 'auto',
	    TOP: 'top',
	    RIGHT: 'right',
	    BOTTOM: 'bottom',
	    LEFT: 'left',
	    TOPLEFT: 'top',
	    TOPRIGHT: 'top',
	    RIGHTTOP: 'right',
	    RIGHTBOTTOM: 'right',
	    BOTTOMLEFT: 'bottom',
	    BOTTOMRIGHT: 'bottom',
	    LEFTTOP: 'left',
	    LEFTBOTTOM: 'left'
	  };
	  var OffsetMap = {
	    AUTO: 0,
	    TOPLEFT: -1,
	    TOP: 0,
	    TOPRIGHT: +1,
	    RIGHTTOP: -1,
	    RIGHT: 0,
	    RIGHTBOTTOM: +1,
	    BOTTOMLEFT: -1,
	    BOTTOM: 0,
	    BOTTOMRIGHT: +1,
	    LEFTTOP: -1,
	    LEFT: 0,
	    LEFTBOTTOM: +1
	  };
	  var HoverState = {
	    SHOW: 'show',
	    OUT: 'out'
	  };
	  var ClassName = {
	    FADE: 'fade',
	    SHOW: 'show'
	  };
	  var Selector$2 = {
	    TOOLTIP: '.tooltip',
	    TOOLTIP_INNER: '.tooltip-inner',
	    ARROW: '.arrow' // ESLINT: Not used
	    // const Trigger = {
	    //   HOVER: 'hover',
	    //   FOCUS: 'focus',
	    //   CLICK: 'click',
	    //   BLUR: 'blur',
	    //   MANUAL: 'manual'
	    // }

	  };
	  var Defaults$1 = {
	    animation: true,
	    template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div>' + '</div>',
	    trigger: 'hover focus',
	    title: '',
	    delay: 0,
	    html: false,
	    placement: 'top',
	    offset: 0,
	    arrowPadding: 6,
	    container: false,
	    fallbackPlacement: 'flip',
	    callbacks: {},
	    boundary: 'scrollParent' // Transition Event names

	  };
	  var TransitionEndEvents$1 = {
	    WebkitTransition: ['webkitTransitionEnd'],
	    MozTransition: ['transitionend'],
	    OTransition: ['otransitionend', 'oTransitionEnd'],
	    transition: ['transitionend'] // Client Side Tip ID counter for aria-describedby attribute
	    // Could use Alex's uid generator util
	    // Each tooltip requires a unique client side ID

	  };
	  var NEXTID = 1;
	  /* istanbul ignore next */

	  function generateId(name) {
	    return "__BV_".concat(name, "_").concat(NEXTID++, "__");
	  }
	  /*
	   * ToolTip Class definition
	   */

	  /* istanbul ignore next: difficult to test in Jest/JSDOM environment */


	  var ToolTip =
	  /*#__PURE__*/
	  function () {
	    // Main constructor
	    function ToolTip(element, config, $root) {
	      _classCallCheck(this, ToolTip);

	      // New tooltip object
	      this.$isEnabled = true;
	      this.$fadeTimeout = null;
	      this.$hoverTimeout = null;
	      this.$visibleInterval = null;
	      this.$hoverState = '';
	      this.$activeTrigger = {};
	      this.$popper = null;
	      this.$element = element;
	      this.$tip = null;
	      this.$id = generateId(this.constructor.NAME);
	      this.$root = $root || null;
	      this.$routeWatcher = null; // We use a bound version of the following handlers for root/modal listeners to maintain the 'this' context

	      this.$forceHide = this.forceHide.bind(this);
	      this.$doHide = this.doHide.bind(this);
	      this.$doShow = this.doShow.bind(this);
	      this.$doDisable = this.doDisable.bind(this);
	      this.$doEnable = this.doEnable.bind(this); // Set the configuration

	      this.updateConfig(config);
	    } // NOTE: Overridden by PopOver class


	    _createClass(ToolTip, [{
	      key: "updateConfig",
	      // Update config
	      value: function updateConfig(config) {
	        // Merge config into defaults. We use "this" here because PopOver overrides Default
	        var updatedConfig = _objectSpread({}, this.constructor.Default, config); // Sanitize delay


	        if (config.delay && typeof config.delay === 'number') {
	          updatedConfig.delay = {
	            show: config.delay,
	            hide: config.delay
	          };
	        } // Title for tooltip and popover


	        if (config.title && typeof config.title === 'number') {
	          updatedConfig.title = config.title.toString();
	        } // Content only for popover


	        if (config.content && typeof config.content === 'number') {
	          updatedConfig.content = config.content.toString();
	        } // Hide element original title if needed


	        this.fixTitle(); // Update the config

	        this.$config = updatedConfig; // Stop/Restart listening

	        this.unListen();
	        this.listen();
	      } // Destroy this instance

	    }, {
	      key: "destroy",
	      value: function destroy() {
	        // Stop listening to trigger events
	        this.unListen(); // Disable while open listeners/watchers

	        this.setWhileOpenListeners(false); // Clear any timeouts

	        clearTimeout(this.$hoverTimeout);
	        this.$hoverTimeout = null;
	        clearTimeout(this.$fadeTimeout);
	        this.$fadeTimeout = null; // Remove popper

	        if (this.$popper) {
	          this.$popper.destroy();
	        }

	        this.$popper = null; // Remove tip from document

	        if (this.$tip && this.$tip.parentElement) {
	          this.$tip.parentElement.removeChild(this.$tip);
	        }

	        this.$tip = null; // Null out other properties

	        this.$id = null;
	        this.$isEnabled = null;
	        this.$root = null;
	        this.$element = null;
	        this.$config = null;
	        this.$hoverState = null;
	        this.$activeTrigger = null;
	        this.$forceHide = null;
	        this.$doHide = null;
	        this.$doShow = null;
	        this.$doDisable = null;
	        this.$doEnable = null;
	      }
	    }, {
	      key: "enable",
	      value: function enable() {
	        // Create a non-cancelable BvEvent
	        var enabledEvt = new BvEvent('enabled', {
	          cancelable: false,
	          target: this.$element,
	          relatedTarget: null
	        });
	        this.$isEnabled = true;
	        this.emitEvent(enabledEvt);
	      }
	    }, {
	      key: "disable",
	      value: function disable() {
	        // Create a non-cancelable BvEvent
	        var disabledEvt = new BvEvent('disabled', {
	          cancelable: false,
	          target: this.$element,
	          relatedTarget: null
	        });
	        this.$isEnabled = false;
	        this.emitEvent(disabledEvt);
	      } // Click toggler

	    }, {
	      key: "toggle",
	      value: function toggle(event) {
	        if (!this.$isEnabled) {
	          return;
	        }

	        if (event) {
	          this.$activeTrigger.click = !this.$activeTrigger.click;

	          if (this.isWithActiveTrigger()) {
	            this.enter(null);
	          } else {
	            this.leave(null);
	          }
	        } else {
	          if (hasClass(this.getTipElement(), ClassName.SHOW)) {
	            this.leave(null);
	          } else {
	            this.enter(null);
	          }
	        }
	      } // Show tooltip

	    }, {
	      key: "show",
	      value: function show() {
	        var _this = this;

	        if (!document.body.contains(this.$element) || !isVisible(this.$element)) {
	          // If trigger element isn't in the DOM or is not visible
	          return;
	        } // Build tooltip element (also sets this.$tip)


	        var tip = this.getTipElement();
	        this.fixTitle();
	        this.setContent(tip);

	        if (!this.isWithContent(tip)) {
	          // if No content, don't bother showing
	          this.$tip = null;
	          return;
	        } // Set ID on tip and aria-describedby on element


	        setAttr(tip, 'id', this.$id);
	        this.addAriaDescribedby(); // Set animation on or off

	        if (this.$config.animation) {
	          addClass(tip, ClassName.FADE);
	        } else {
	          removeClass(tip, ClassName.FADE);
	        }

	        var placement = this.getPlacement();
	        var attachment = this.constructor.getAttachment(placement);
	        this.addAttachmentClass(attachment); // Create a cancelable BvEvent

	        var showEvt = new BvEvent('show', {
	          cancelable: true,
	          target: this.$element,
	          relatedTarget: tip
	        });
	        this.emitEvent(showEvt);

	        if (showEvt.defaultPrevented) {
	          // Don't show if event cancelled
	          this.$tip = null;
	          return;
	        } // Insert tooltip if needed


	        var container = this.getContainer();

	        if (!document.body.contains(tip)) {
	          container.appendChild(tip);
	        } // Refresh popper


	        this.removePopper();
	        this.$popper = new Popper(this.$element, tip, this.getPopperConfig(placement, tip)); // Transitionend Callback

	        var complete = function complete() {
	          if (_this.$config.animation) {
	            _this.fixTransition(tip);
	          }

	          var prevHoverState = _this.$hoverState;
	          _this.$hoverState = null;

	          if (prevHoverState === HoverState.OUT) {
	            _this.leave(null);
	          } // Create a non-cancelable BvEvent


	          var shownEvt = new BvEvent('shown', {
	            cancelable: false,
	            target: _this.$element,
	            relatedTarget: tip
	          });

	          _this.emitEvent(shownEvt);
	        }; // Enable while open listeners/watchers


	        this.setWhileOpenListeners(true); // Show tip

	        addClass(tip, ClassName.SHOW); // Start the transition/animation

	        this.transitionOnce(tip, complete);
	      } // handler for periodic visibility check

	    }, {
	      key: "visibleCheck",
	      value: function visibleCheck(on) {
	        var _this2 = this;

	        clearInterval(this.$visibleInterval);
	        this.$visibleInterval = null;

	        if (on) {
	          this.$visibleInterval = setInterval(function () {
	            var tip = _this2.getTipElement();

	            if (tip && !isVisible(_this2.$element) && hasClass(tip, ClassName.SHOW)) {
	              // Element is no longer visible, so force-hide the tooltip
	              _this2.forceHide();
	            }
	          }, 100);
	        }
	      }
	    }, {
	      key: "setWhileOpenListeners",
	      value: function setWhileOpenListeners(on) {
	        // Modal close events
	        this.setModalListener(on); // Periodic $element visibility check
	        // For handling when tip is in <keepalive>, tabs, carousel, etc

	        this.visibleCheck(on); // Route change events

	        this.setRouteWatcher(on); // Ontouch start listeners

	        this.setOnTouchStartListener(on);

	        if (on && /(focus|blur)/.test(this.$config.trigger)) {
	          // If focus moves between trigger element and tip container, dont close
	          eventOn(this.$tip, 'focusout', this);
	        } else {
	          eventOff(this.$tip, 'focusout', this);
	        }
	      } // force hide of tip (internal method)

	    }, {
	      key: "forceHide",
	      value: function forceHide() {
	        if (!this.$tip || !hasClass(this.$tip, ClassName.SHOW)) {
	          return;
	        } // Disable while open listeners/watchers


	        this.setWhileOpenListeners(false); // Clear any hover enter/leave event

	        clearTimeout(this.$hoverTimeout);
	        this.$hoverTimeout = null;
	        this.$hoverState = ''; // Hide the tip

	        this.hide(null, true);
	      } // Hide tooltip

	    }, {
	      key: "hide",
	      value: function hide(callback, force) {
	        var _this3 = this;

	        var tip = this.$tip;

	        if (!tip) {
	          return;
	        } // Create a canelable BvEvent


	        var hideEvt = new BvEvent('hide', {
	          // We disable cancelling if force is true
	          cancelable: !force,
	          target: this.$element,
	          relatedTarget: tip
	        });
	        this.emitEvent(hideEvt);

	        if (hideEvt.defaultPrevented) {
	          // Don't hide if event cancelled
	          return;
	        } // Transitionend Callback

	        /* istanbul ignore next */


	        var complete = function complete() {
	          if (_this3.$hoverState !== HoverState.SHOW && tip.parentNode) {
	            // Remove tip from dom, and force recompile on next show
	            tip.parentNode.removeChild(tip);

	            _this3.removeAriaDescribedby();

	            _this3.removePopper();

	            _this3.$tip = null;
	          }

	          if (callback) {
	            callback();
	          } // Create a non-cancelable BvEvent


	          var hiddenEvt = new BvEvent('hidden', {
	            cancelable: false,
	            target: _this3.$element,
	            relatedTarget: null
	          });

	          _this3.emitEvent(hiddenEvt);
	        }; // Disable while open listeners/watchers


	        this.setWhileOpenListeners(false); // If forced close, disable animation

	        if (force) {
	          removeClass(tip, ClassName.FADE);
	        } // Hide tip


	        removeClass(tip, ClassName.SHOW);
	        this.$activeTrigger.click = false;
	        this.$activeTrigger.focus = false;
	        this.$activeTrigger.hover = false; // Start the hide transition

	        this.transitionOnce(tip, complete);
	        this.$hoverState = '';
	      }
	    }, {
	      key: "emitEvent",
	      value: function emitEvent(evt) {
	        var evtName = evt.type;

	        if (this.$root && this.$root.$emit) {
	          // Emit an event on $root
	          this.$root.$emit("bv::".concat(this.constructor.NAME, "::").concat(evtName), evt);
	        }

	        var callbacks = this.$config.callbacks || {};

	        if (typeof callbacks[evtName] === 'function') {
	          callbacks[evtName](evt);
	        }
	      }
	    }, {
	      key: "getContainer",
	      value: function getContainer() {
	        var container = this.$config.container;
	        var body = document.body; // If we are in a modal, we append to the modal instead of body, unless a container is specified

	        return container === false ? closest(MODAL_CLASS, this.$element) || body : select(container, body) || body;
	      } // Will be overritten by popover if needed

	    }, {
	      key: "addAriaDescribedby",
	      value: function addAriaDescribedby() {
	        // Add aria-describedby on trigger element, without removing any other IDs
	        var desc = getAttr(this.$element, 'aria-describedby') || '';
	        desc = desc.split(/\s+/).concat(this.$id).join(' ').trim();
	        setAttr(this.$element, 'aria-describedby', desc);
	      } // Will be overritten by popover if needed

	    }, {
	      key: "removeAriaDescribedby",
	      value: function removeAriaDescribedby() {
	        var _this4 = this;

	        var desc = getAttr(this.$element, 'aria-describedby') || '';
	        desc = desc.split(/\s+/).filter(function (d) {
	          return d !== _this4.$id;
	        }).join(' ').trim();

	        if (desc) {
	          setAttr(this.$element, 'aria-describedby', desc);
	        } else {
	          removeAttr(this.$element, 'aria-describedby');
	        }
	      }
	    }, {
	      key: "removePopper",
	      value: function removePopper() {
	        if (this.$popper) {
	          this.$popper.destroy();
	        }

	        this.$popper = null;
	      }
	      /* istanbul ignore next */

	    }, {
	      key: "transitionOnce",
	      value: function transitionOnce(tip, complete) {
	        var _this5 = this;

	        var transEvents = this.getTransitionEndEvents();
	        var called = false;
	        clearTimeout(this.$fadeTimeout);
	        this.$fadeTimeout = null;

	        var fnOnce = function fnOnce() {
	          if (called) {
	            return;
	          }

	          called = true;
	          clearTimeout(_this5.$fadeTimeout);
	          _this5.$fadeTimeout = null;
	          transEvents.forEach(function (evtName) {
	            eventOff(tip, evtName, fnOnce);
	          }); // Call complete callback

	          complete();
	        };

	        if (hasClass(tip, ClassName.FADE)) {
	          transEvents.forEach(function (evtName) {
	            eventOn(tip, evtName, fnOnce);
	          }); // Fallback to setTimeout

	          this.$fadeTimeout = setTimeout(fnOnce, TRANSITION_DURATION);
	        } else {
	          fnOnce();
	        }
	      } // What transitionend event(s) to use? (returns array of event names)

	    }, {
	      key: "getTransitionEndEvents",
	      value: function getTransitionEndEvents() {
	        for (var name in TransitionEndEvents$1) {
	          if (this.$element.style[name] !== undefined) {
	            return TransitionEndEvents$1[name];
	          }
	        } // fallback


	        return [];
	      }
	    }, {
	      key: "update",
	      value: function update() {
	        if (this.$popper !== null) {
	          this.$popper.scheduleUpdate();
	        }
	      } // NOTE: Overridden by PopOver class

	    }, {
	      key: "isWithContent",
	      value: function isWithContent(tip) {
	        tip = tip || this.$tip;

	        if (!tip) {
	          return false;
	        }

	        return Boolean((select(Selector$2.TOOLTIP_INNER, tip) || {}).innerHTML);
	      } // NOTE: Overridden by PopOver class

	    }, {
	      key: "addAttachmentClass",
	      value: function addAttachmentClass(attachment) {
	        addClass(this.getTipElement(), "".concat(CLASS_PREFIX, "-").concat(attachment));
	      }
	    }, {
	      key: "getTipElement",
	      value: function getTipElement() {
	        if (!this.$tip) {
	          // Try and compile user supplied template, or fallback to default template
	          this.$tip = this.compileTemplate(this.$config.template) || this.compileTemplate(this.constructor.Default.template);
	        } // Add tab index so tip can be focused, and to allow it to be set as relatedTargt in focusin/out events


	        this.$tip.tabIndex = -1;
	        return this.$tip;
	      }
	    }, {
	      key: "compileTemplate",
	      value: function compileTemplate(html) {
	        if (!html || typeof html !== 'string') {
	          return null;
	        }

	        var div = document.createElement('div');
	        div.innerHTML = html.trim();
	        var node = div.firstElementChild ? div.removeChild(div.firstElementChild) : null;
	        div = null;
	        return node;
	      } // NOTE: Overridden by PopOver class

	    }, {
	      key: "setContent",
	      value: function setContent(tip) {
	        this.setElementContent(select(Selector$2.TOOLTIP_INNER, tip), this.getTitle());
	        removeClass(tip, ClassName.FADE);
	        removeClass(tip, ClassName.SHOW);
	      }
	    }, {
	      key: "setElementContent",
	      value: function setElementContent(container, content) {
	        if (!container) {
	          // If container element doesn't exist, just return
	          return;
	        }

	        var allowHtml = this.$config.html;

	        if (_typeof(content) === 'object' && content.nodeType) {
	          // content is a DOM node
	          if (allowHtml) {
	            if (content.parentElement !== container) {
	              container.innerHTML = '';
	              container.appendChild(content);
	            }
	          } else {
	            container.innerText = content.innerText;
	          }
	        } else {
	          // We have a plain HTML string or Text
	          container[allowHtml ? 'innerHTML' : 'innerText'] = content;
	        }
	      } // NOTE: Overridden by PopOver class

	    }, {
	      key: "getTitle",
	      value: function getTitle() {
	        var title = this.$config.title || '';

	        if (typeof title === 'function') {
	          // Call the function to get the title value
	          title = title(this.$element);
	        }

	        if (_typeof(title) === 'object' && title.nodeType && !title.innerHTML.trim()) {
	          // We have a DOM node, but without inner content, so just return empty string
	          title = '';
	        }

	        if (typeof title === 'string') {
	          title = title.trim();
	        }

	        if (!title) {
	          // If an explicit title is not given, try element's title attributes
	          title = getAttr(this.$element, 'title') || getAttr(this.$element, 'data-original-title') || '';
	          title = title.trim();
	        }

	        return title;
	      }
	    }, {
	      key: "listen",
	      value: function listen() {
	        var _this6 = this;

	        var triggers = this.$config.trigger.trim().split(/\s+/);
	        var el = this.$element; // Listen for global show/hide events

	        this.setRootListener(true); // Using 'this' as the handler will get automagically directed to this.handleEvent
	        // And maintain our binding to 'this'

	        triggers.forEach(function (trigger) {
	          if (trigger === 'click') {
	            eventOn(el, 'click', _this6);
	          } else if (trigger === 'focus') {
	            eventOn(el, 'focusin', _this6);
	            eventOn(el, 'focusout', _this6);
	          } else if (trigger === 'blur') {
	            // Used to close $tip when element looses focus
	            eventOn(el, 'focusout', _this6);
	          } else if (trigger === 'hover') {
	            eventOn(el, 'mouseenter', _this6);
	            eventOn(el, 'mouseleave', _this6);
	          }
	        }, this);
	      }
	    }, {
	      key: "unListen",
	      value: function unListen() {
	        var _this7 = this;

	        var events = ['click', 'focusin', 'focusout', 'mouseenter', 'mouseleave']; // Using "this" as the handler will get automagically directed to this.handleEvent

	        events.forEach(function (evt) {
	          eventOff(_this7.$element, evt, _this7);
	        }, this); // Stop listening for global show/hide/enable/disable events

	        this.setRootListener(false);
	      }
	    }, {
	      key: "handleEvent",
	      value: function handleEvent(e) {
	        // This special method allows us to use "this" as the event handlers
	        if (isDisabled(this.$element)) {
	          // If disabled, don't do anything. Note: if tip is shown before element gets
	          // disabled, then tip not close until no longer disabled or forcefully closed.
	          return;
	        }

	        if (!this.$isEnabled) {
	          // If not enable
	          return;
	        }

	        var type = e.type;
	        var target = e.target;
	        var relatedTarget = e.relatedTarget;
	        var $element = this.$element;
	        var $tip = this.$tip;

	        if (type === 'click') {
	          this.toggle(e);
	        } else if (type === 'focusin' || type === 'mouseenter') {
	          this.enter(e);
	        } else if (type === 'focusout') {
	          // target is the element which is loosing focus
	          // And relatedTarget is the element gaining focus
	          if ($tip && $element && $element.contains(target) && $tip.contains(relatedTarget)) {
	            // If focus moves from $element to $tip, don't trigger a leave
	            return;
	          }

	          if ($tip && $element && $tip.contains(target) && $element.contains(relatedTarget)) {
	            // If focus moves from $tip to $element, don't trigger a leave
	            return;
	          }

	          if ($tip && $tip.contains(target) && $tip.contains(relatedTarget)) {
	            // If focus moves within $tip, don't trigger a leave
	            return;
	          }

	          if ($element && $element.contains(target) && $element.contains(relatedTarget)) {
	            // If focus moves within $element, don't trigger a leave
	            return;
	          } // Otherwise trigger a leave


	          this.leave(e);
	        } else if (type === 'mouseleave') {
	          this.leave(e);
	        }
	      }
	      /* istanbul ignore next */

	    }, {
	      key: "setRouteWatcher",
	      value: function setRouteWatcher(on) {
	        var _this8 = this;

	        if (on) {
	          this.setRouteWatcher(false);

	          if (this.$root && Boolean(this.$root.$route)) {
	            this.$routeWatcher = this.$root.$watch('$route', function (newVal, oldVal) {
	              if (newVal === oldVal) {
	                return;
	              } // If route has changed, we force hide the tooltip/popover


	              _this8.forceHide();
	            });
	          }
	        } else {
	          if (this.$routeWatcher) {
	            // cancel the route watcher by calling the stored reference
	            this.$routeWatcher();
	            this.$routeWatcher = null;
	          }
	        }
	      }
	      /* istanbul ignore next */

	    }, {
	      key: "setModalListener",
	      value: function setModalListener(on) {
	        var modal = closest(MODAL_CLASS, this.$element);

	        if (!modal) {
	          // If we are not in a modal, don't worry. be happy
	          return;
	        } // We can listen for modal hidden events on $root


	        if (this.$root) {
	          this.$root[on ? '$on' : '$off'](MODAL_CLOSE_EVENT, this.$forceHide);
	        }
	      }
	      /* istanbul ignore next */

	    }, {
	      key: "setRootListener",
	      value: function setRootListener(on) {
	        // Listen for global 'bv::{hide|show}::{tooltip|popover}' hide request event
	        if (this.$root) {
	          this.$root[on ? '$on' : '$off']("bv::hide::".concat(this.constructor.NAME), this.$doHide);
	          this.$root[on ? '$on' : '$off']("bv::show::".concat(this.constructor.NAME), this.$doShow);
	          this.$root[on ? '$on' : '$off']("bv::disable::".concat(this.constructor.NAME), this.$doDisable);
	          this.$root[on ? '$on' : '$off']("bv::enable::".concat(this.constructor.NAME), this.$doEnable);
	        }
	      }
	    }, {
	      key: "doHide",
	      value: function doHide(id) {
	        // Programmatically hide tooltip or popover
	        if (!id) {
	          // Close all tooltips or popovers
	          this.forceHide();
	        } else if (this.$element && this.$element.id && this.$element.id === id) {
	          // Close this specific tooltip or popover
	          this.hide();
	        }
	      }
	    }, {
	      key: "doShow",
	      value: function doShow(id) {
	        // Programmatically show tooltip or popover
	        if (!id) {
	          // Open all tooltips or popovers
	          this.show();
	        } else if (id && this.$element && this.$element.id && this.$element.id === id) {
	          // Show this specific tooltip or popover
	          this.show();
	        }
	      }
	    }, {
	      key: "doDisable",
	      value: function doDisable(id) {
	        // Programmatically disable tooltip or popover
	        if (!id) {
	          // Disable all tooltips or popovers
	          this.disable();
	        } else if (this.$element && this.$element.id && this.$element.id === id) {
	          // Disable this specific tooltip or popover
	          this.disable();
	        }
	      }
	    }, {
	      key: "doEnable",
	      value: function doEnable(id) {
	        // Programmatically enable tooltip or popover
	        if (!id) {
	          // Enable all tooltips or popovers
	          this.enable();
	        } else if (this.$element && this.$element.id && this.$element.id === id) {
	          // Enable this specific tooltip or popover
	          this.enable();
	        }
	      }
	      /* istanbul ignore next */

	    }, {
	      key: "setOnTouchStartListener",
	      value: function setOnTouchStartListener(on) {
	        var _this9 = this;

	        // if this is a touch-enabled device we add extra
	        // empty mouseover listeners to the body's immediate children;
	        // only needed because of broken event delegation on iOS
	        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
	        if ('ontouchstart' in document.documentElement) {
	          from(document.body.children).forEach(function (el) {
	            if (on) {
	              eventOn(el, 'mouseover', _this9._noop);
	            } else {
	              eventOff(el, 'mouseover', _this9._noop);
	            }
	          });
	        }
	      }
	      /* istanbul ignore next */

	    }, {
	      key: "_noop",
	      value: function _noop() {// Empty noop handler for ontouchstart devices
	      }
	    }, {
	      key: "fixTitle",
	      value: function fixTitle() {
	        var el = this.$element;

	        var titleType = _typeof(getAttr(el, 'data-original-title'));

	        if (getAttr(el, 'title') || titleType !== 'string') {
	          setAttr(el, 'data-original-title', getAttr(el, 'title') || '');
	          setAttr(el, 'title', '');
	        }
	      } // Enter handler

	      /* istanbul ignore next */

	    }, {
	      key: "enter",
	      value: function enter(e) {
	        var _this10 = this;

	        if (e) {
	          this.$activeTrigger[e.type === 'focusin' ? 'focus' : 'hover'] = true;
	        }

	        if (hasClass(this.getTipElement(), ClassName.SHOW) || this.$hoverState === HoverState.SHOW) {
	          this.$hoverState = HoverState.SHOW;
	          return;
	        }

	        clearTimeout(this.$hoverTimeout);
	        this.$hoverState = HoverState.SHOW;

	        if (!this.$config.delay || !this.$config.delay.show) {
	          this.show();
	          return;
	        }

	        this.$hoverTimeout = setTimeout(function () {
	          if (_this10.$hoverState === HoverState.SHOW) {
	            _this10.show();
	          }
	        }, this.$config.delay.show);
	      } // Leave handler

	      /* istanbul ignore next */

	    }, {
	      key: "leave",
	      value: function leave(e) {
	        var _this11 = this;

	        if (e) {
	          this.$activeTrigger[e.type === 'focusout' ? 'focus' : 'hover'] = false;

	          if (e.type === 'focusout' && /blur/.test(this.$config.trigger)) {
	            // Special case for `blur`: we clear out the other triggers
	            this.$activeTrigger.click = false;
	            this.$activeTrigger.hover = false;
	          }
	        }

	        if (this.isWithActiveTrigger()) {
	          return;
	        }

	        clearTimeout(this.$hoverTimeout);
	        this.$hoverState = HoverState.OUT;

	        if (!this.$config.delay || !this.$config.delay.hide) {
	          this.hide();
	          return;
	        }

	        this.$hoverTimeout = setTimeout(function () {
	          if (_this11.$hoverState === HoverState.OUT) {
	            _this11.hide();
	          }
	        }, this.$config.delay.hide);
	      }
	    }, {
	      key: "getPopperConfig",
	      value: function getPopperConfig(placement, tip) {
	        var _this12 = this;

	        return {
	          placement: this.constructor.getAttachment(placement),
	          modifiers: {
	            offset: {
	              offset: this.getOffset(placement, tip)
	            },
	            flip: {
	              behavior: this.$config.fallbackPlacement
	            },
	            arrow: {
	              element: '.arrow'
	            },
	            preventOverflow: {
	              padding: this.$config.boundaryPadding,
	              boundariesElement: this.$config.boundary
	            }
	          },
	          onCreate: function onCreate(data) {
	            // Handle flipping arrow classes
	            if (data.originalPlacement !== data.placement) {
	              _this12.handlePopperPlacementChange(data);
	            }
	          },
	          onUpdate: function onUpdate(data) {
	            // Handle flipping arrow classes
	            _this12.handlePopperPlacementChange(data);
	          }
	        };
	      }
	    }, {
	      key: "getOffset",
	      value: function getOffset(placement, tip) {
	        if (!this.$config.offset) {
	          var arrow = select(Selector$2.ARROW, tip);
	          var arrowOffset = parseFloat(getCS(arrow).width) + parseFloat(this.$config.arrowPadding);

	          switch (OffsetMap[placement.toUpperCase()]) {
	            case +1:
	              return "+50%p - ".concat(arrowOffset, "px");

	            case -1:
	              return "-50%p + ".concat(arrowOffset, "px");

	            default:
	              return 0;
	          }
	        }

	        return this.$config.offset;
	      }
	    }, {
	      key: "getPlacement",
	      value: function getPlacement() {
	        var placement = this.$config.placement;

	        if (typeof placement === 'function') {
	          return placement.call(this, this.$tip, this.$element);
	        }

	        return placement;
	      }
	    }, {
	      key: "isWithActiveTrigger",
	      value: function isWithActiveTrigger() {
	        for (var trigger in this.$activeTrigger) {
	          if (this.$activeTrigger[trigger]) {
	            return true;
	          }
	        }

	        return false;
	      } // NOTE: Overridden by PopOver class

	    }, {
	      key: "cleanTipClass",
	      value: function cleanTipClass() {
	        var tip = this.getTipElement();
	        var tabClass = tip.className.match(BSCLS_PREFIX_REGEX);

	        if (tabClass !== null && tabClass.length > 0) {
	          tabClass.forEach(function (cls) {
	            removeClass(tip, cls);
	          });
	        }
	      }
	    }, {
	      key: "handlePopperPlacementChange",
	      value: function handlePopperPlacementChange(data) {
	        this.cleanTipClass();
	        this.addAttachmentClass(this.constructor.getAttachment(data.placement));
	      }
	    }, {
	      key: "fixTransition",
	      value: function fixTransition(tip) {
	        var initConfigAnimation = this.$config.animation || false;

	        if (getAttr(tip, 'x-placement') !== null) {
	          return;
	        }

	        removeClass(tip, ClassName.FADE);
	        this.$config.animation = false;
	        this.hide();
	        this.show();
	        this.$config.animation = initConfigAnimation;
	      }
	    }], [{
	      key: "getAttachment",
	      value: function getAttachment(placement) {
	        return AttachmentMap$1[placement.toUpperCase()];
	      }
	    }, {
	      key: "Default",
	      get: function get() {
	        return Defaults$1;
	      } // NOTE: Overridden by PopOver class

	    }, {
	      key: "NAME",
	      get: function get() {
	        return NAME;
	      }
	    }]);

	    return ToolTip;
	  }();

	  var NAME$1 = 'popover';
	  var CLASS_PREFIX$1 = 'bs-popover';
	  var BSCLS_PREFIX_REGEX$1 = new RegExp("\\b".concat(CLASS_PREFIX$1, "\\S+"), 'g');

	  var Defaults$2 = _objectSpread({}, ToolTip.Default, {
	    placement: 'right',
	    trigger: 'click',
	    content: '',
	    template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
	  });

	  var ClassName$1 = {
	    FADE: 'fade',
	    SHOW: 'show'
	  };
	  var Selector$3 = {
	    TITLE: '.popover-header',
	    CONTENT: '.popover-body'
	    /* istanbul ignore next: dificult to test in Jest/JSDOM environment */

	  };

	  var PopOver =
	  /*#__PURE__*/
	  function (_ToolTip) {
	    _inherits(PopOver, _ToolTip);

	    function PopOver() {
	      _classCallCheck(this, PopOver);

	      return _possibleConstructorReturn(this, _getPrototypeOf(PopOver).apply(this, arguments));
	    }

	    _createClass(PopOver, [{
	      key: "isWithContent",
	      // Method overrides
	      value: function isWithContent(tip) {
	        tip = tip || this.$tip;

	        if (!tip) {
	          return false;
	        }

	        var hasTitle = Boolean((select(Selector$3.TITLE, tip) || {}).innerHTML);
	        var hasContent = Boolean((select(Selector$3.CONTENT, tip) || {}).innerHTML);
	        return hasTitle || hasContent;
	      }
	    }, {
	      key: "addAttachmentClass",
	      value: function addAttachmentClass(attachment) {
	        addClass(this.getTipElement(), "".concat(CLASS_PREFIX$1, "-").concat(attachment));
	      }
	    }, {
	      key: "setContent",
	      value: function setContent(tip) {
	        // we use append for html objects to maintain js events/components
	        this.setElementContent(select(Selector$3.TITLE, tip), this.getTitle());
	        this.setElementContent(select(Selector$3.CONTENT, tip), this.getContent());
	        removeClass(tip, ClassName$1.FADE);
	        removeClass(tip, ClassName$1.SHOW);
	      } // This method may look identical to ToolTip version, but it uses a different RegEx defined above

	    }, {
	      key: "cleanTipClass",
	      value: function cleanTipClass() {
	        var tip = this.getTipElement();
	        var tabClass = tip.className.match(BSCLS_PREFIX_REGEX$1);

	        if (tabClass !== null && tabClass.length > 0) {
	          tabClass.forEach(function (cls) {
	            removeClass(tip, cls);
	          });
	        }
	      }
	    }, {
	      key: "getTitle",
	      value: function getTitle() {
	        var title = this.$config.title || '';

	        if (typeof title === 'function') {
	          title = title(this.$element);
	        }

	        if (_typeof(title) === 'object' && title.nodeType && !title.innerHTML.trim()) {
	          // We have a dom node, but without inner content, so just return an empty string
	          title = '';
	        }

	        if (typeof title === 'string') {
	          title = title.trim();
	        }

	        if (!title) {
	          // Try and grab element's title attribute
	          title = getAttr(this.$element, 'title') || getAttr(this.$element, 'data-original-title') || '';
	          title = title.trim();
	        }

	        return title;
	      } // New methods

	    }, {
	      key: "getContent",
	      value: function getContent() {
	        var content = this.$config.content || '';

	        if (typeof content === 'function') {
	          content = content(this.$element);
	        }

	        if (_typeof(content) === 'object' && content.nodeType && !content.innerHTML.trim()) {
	          // We have a dom node, but without inner content, so just return an empty string
	          content = '';
	        }

	        if (typeof content === 'string') {
	          content = content.trim();
	        }

	        return content;
	      }
	    }], [{
	      key: "Default",
	      // Getter overrides
	      get: function get() {
	        return Defaults$2;
	      }
	    }, {
	      key: "NAME",
	      get: function get() {
	        return NAME$1;
	      }
	    }]);

	    return PopOver;
	  }(ToolTip);

	  // Polyfills for SSR
	  var isSSR = typeof window === 'undefined';
	  var HTMLElement = isSSR ? Object : window.HTMLElement;

	  var PLACEMENTS = {
	    top: 'top',
	    topleft: 'topleft',
	    topright: 'topright',
	    right: 'right',
	    righttop: 'righttop',
	    rightbottom: 'rightbottom',
	    bottom: 'bottom',
	    bottomleft: 'bottomleft',
	    bottomright: 'bottomright',
	    left: 'left',
	    lefttop: 'lefttop',
	    leftbottom: 'leftbottom',
	    auto: 'auto'
	  };
	  var OBSERVER_CONFIG$1 = {
	    subtree: true,
	    childList: true,
	    characterData: true,
	    attributes: true,
	    attributeFilter: ['class', 'style'] // @vue/component

	  };
	  var toolpopMixin = {
	    props: {
	      target: {
	        // String ID of element, or element/component reference
	        type: [String, Object, HTMLElement, Function] // default: undefined

	      },
	      delay: {
	        type: [Number, Object, String],
	        default: 0
	      },
	      offset: {
	        type: [Number, String],
	        default: 0
	      },
	      noFade: {
	        type: Boolean,
	        default: false
	      },
	      container: {
	        // String ID of container, if null body is used (default)
	        type: String,
	        default: null
	      },
	      boundary: {
	        // String: scrollParent, window, or viewport
	        // Element: element reference
	        type: [String, HTMLElement],
	        default: 'scrollParent'
	      },
	      boundaryPadding: {
	        type: Number,
	        default: 5
	      },
	      show: {
	        type: Boolean,
	        default: false
	      },
	      disabled: {
	        type: Boolean,
	        default: false
	      }
	    },
	    computed: {
	      baseConfig: function baseConfig() {
	        var cont = this.container;
	        var delay = _typeof(this.delay) === 'object' ? this.delay : parseInt(this.delay, 10) || 0;
	        return {
	          // Title prop
	          title: (this.title || '').trim() || '',
	          // Contnt prop (if popover)
	          content: (this.content || '').trim() || '',
	          // Tooltip/Popover placement
	          placement: PLACEMENTS[this.placement] || 'auto',
	          // Container curently needs to be an ID with '#' prepended, if null then body is used
	          container: cont ? /^#/.test(cont) ? cont : "#".concat(cont) : false,
	          // boundariesElement passed to popper
	          boundary: this.boundary,
	          // boundariesElement padding passed to popper
	          boundaryPadding: this.boundaryPadding,
	          // Show/Hide delay
	          delay: delay || 0,
	          // Offset can be css distance. if no units, pixels are assumed
	          offset: this.offset || 0,
	          // Disable fade Animation?
	          animation: !this.noFade,
	          // Open/Close Trigger(s)
	          trigger: isArray(this.triggers) ? this.triggers.join(' ') : this.triggers,
	          // Callbacks so we can trigger events on component
	          callbacks: {
	            show: this.onShow,
	            shown: this.onShown,
	            hide: this.onHide,
	            hidden: this.onHidden,
	            enabled: this.onEnabled,
	            disabled: this.onDisabled
	          }
	        };
	      }
	    },
	    watch: {
	      show: function show(_show, old) {
	        if (_show === old) {
	          /* istanbul ignore next */
	          return;
	        }

	        _show ? this.onOpen() : this.onClose();
	      },
	      disabled: function disabled(_disabled, old) {
	        if (_disabled === old) {
	          /* istanbul ignore next */
	          return;
	        }

	        _disabled ? this.onDisable() : this.onEnable();
	      }
	    },
	    created: function created() {
	      // Create non-reactive property
	      this._toolpop = null;
	      this._obs_title = null;
	      this._obs_content = null;
	    },
	    mounted: function mounted() {
	      var _this = this;

	      // We do this in a next tick to ensure DOM has rendered first
	      this.$nextTick(function () {
	        // Instantiate ToolTip/PopOver on target
	        // The createToolpop method must exist in main component
	        if (_this.createToolpop()) {
	          if (_this.disabled) {
	            // Initially disabled
	            _this.onDisable();
	          } // Listen to open signals from others


	          _this.$on('open', _this.onOpen); // Listen to close signals from others


	          _this.$on('close', _this.onClose); // Listen to disable signals from others


	          _this.$on('disable', _this.onDisable); // Listen to disable signals from others


	          _this.$on('enable', _this.onEnable); // Observe content Child changes so we can notify popper of possible size change


	          _this.setObservers(true); // Set intially open state


	          if (_this.show) {
	            _this.onOpen();
	          }
	        }
	      });
	    },
	    updated: function updated() {
	      // If content/props changes, etc

	      /* istanbul ignore next: can't test in JSDOM */
	      if (this._toolpop) {
	        this._toolpop.updateConfig(this.getConfig());
	      }
	    },
	    activated: function activated() {
	      // Called when component is inside a <keep-alive> and component brought offline

	      /* istanbul ignore next: can't test in JSDOM */
	      this.setObservers(true);
	    },
	    deactivated: function deactivated() {
	      // Called when component is inside a <keep-alive> and component taken offline

	      /* istanbul ignore next: can't test in JSDOM */
	      if (this._toolpop) {
	        this.setObservers(false);

	        this._toolpop.hide();
	      }
	    },
	    beforeDestroy: function beforeDestroy()
	    /* istanbul ignore next: not easy to test */
	    {
	      // Shutdown our local event listeners
	      this.$off('open', this.onOpen);
	      this.$off('close', this.onClose);
	      this.$off('disable', this.onDisable);
	      this.$off('enable', this.onEnable);
	      this.setObservers(false); // bring our content back if needed

	      this.bringItBack();

	      if (this._toolpop) {
	        this._toolpop.destroy();

	        this._toolpop = null;
	      }
	    },
	    methods: {
	      getConfig: function getConfig() {
	        var cfg = _objectSpread({}, this.baseConfig);

	        if (this.$refs.title && this.$refs.title.innerHTML.trim()) {
	          // If slot has content, it overrides 'title' prop
	          // We use the DOM node as content to allow components!
	          cfg.title = this.$refs.title;
	          cfg.html = true;
	        }

	        if (this.$refs.content && this.$refs.content.innerHTML.trim()) {
	          // If slot has content, it overrides 'content' prop
	          // We use the DOM node as content to allow components!
	          cfg.content = this.$refs.content;
	          cfg.html = true;
	        }

	        return cfg;
	      },
	      onOpen: function onOpen() {
	        if (this._toolpop) {
	          this._toolpop.show();
	        }
	      },
	      onClose: function onClose(callback) {
	        if (this._toolpop) {
	          this._toolpop.hide(callback);
	        } else if (typeof callback === 'function') {
	          callback();
	        }
	      },
	      onDisable: function onDisable() {
	        /* istanbul ignore next: can't test in JSDOM */
	        if (this._toolpop) {
	          this._toolpop.disable();
	        }
	      },
	      onEnable: function onEnable() {
	        /* istanbul ignore next: can't test in JSDOM */
	        if (this._toolpop) {
	          this._toolpop.enable();
	        }
	      },
	      updatePosition: function updatePosition() {
	        /* istanbul ignore next: can't test in JSDOM */
	        if (this._toolpop) {
	          // Instruct popper to reposition popover if necessary
	          this._toolpop.update();
	        }
	      },
	      getTarget: function getTarget() {
	        var target = this.target;

	        if (typeof target === 'function') {
	          target = target();
	        }

	        if (typeof target === 'string') {
	          // Assume ID of element
	          return getById(target);
	        } else if (_typeof(target) === 'object' && isElement(target.$el)) {
	          // Component reference
	          return target.$el;
	        } else if (_typeof(target) === 'object' && isElement(target)) {
	          // Element reference
	          return target;
	        }

	        return null;
	      },
	      onShow: function onShow(evt) {
	        this.$emit('show', evt);
	      },
	      onShown: function onShown(evt) {
	        this.setObservers(true);
	        this.$emit('update:show', true);
	        this.$emit('shown', evt);
	      },
	      onHide: function onHide(evt) {
	        this.$emit('hide', evt);
	      },
	      onHidden: function onHidden(evt) {
	        this.setObservers(false); // bring our content back if needed to keep Vue happy
	        // Tooltip class will move it back to tip when shown again

	        this.bringItBack();
	        this.$emit('update:show', false);
	        this.$emit('hidden', evt);
	      },
	      onEnabled: function onEnabled(evt) {
	        if (!evt || evt.type !== 'enabled') {
	          // Prevent possible endless loop if user mistakienly fires enabled instead of enable
	          return;
	        }

	        this.$emit('update:disabled', false);
	        this.$emit('disabled');
	      },
	      onDisabled: function onDisabled(evt) {
	        if (!evt || evt.type !== 'disabled') {
	          // Prevent possible endless loop if user mistakienly fires disabled instead of disable
	          return;
	        }

	        this.$emit('update:disabled', true);
	        this.$emit('enabled');
	      },
	      bringItBack: function bringItBack() {
	        // bring our content back if needed to keep Vue happy
	        if (this.$el && this.$refs.title) {
	          this.$el.appendChild(this.$refs.title);
	        }

	        if (this.$el && this.$refs.content) {
	          this.$el.appendChild(this.$refs.content);
	        }
	      },
	      setObservers: function setObservers(on)
	      /* istanbul ignore next: can't test in JSDOM */
	      {
	        if (on) {
	          if (this.$refs.title) {
	            this._obs_title = observeDOM(this.$refs.title, this.updatePosition.bind(this), OBSERVER_CONFIG$1);
	          }

	          if (this.$refs.content) {
	            this._obs_content = observeDOM(this.$refs.content, this.updatePosition.bind(this), OBSERVER_CONFIG$1);
	          }
	        } else {
	          if (this._obs_title) {
	            this._obs_title.disconnect();

	            this._obs_title = null;
	          }

	          if (this._obs_content) {
	            this._obs_content.disconnect();

	            this._obs_content = null;
	          }
	        }
	      }
	    }
	  };

	  var BPopover = {
	    name: 'BPopover',
	    mixins: [toolpopMixin],
	    props: {
	      title: {
	        type: String,
	        default: ''
	      },
	      content: {
	        type: String,
	        default: ''
	      },
	      triggers: {
	        type: [String, Array],
	        default: 'click'
	      },
	      placement: {
	        type: String,
	        default: 'right'
	      }
	    },
	    data: function data() {
	      return {};
	    },
	    methods: {
	      createToolpop: function createToolpop() {
	        // getTarget is in toolpop mixin
	        var target = this.getTarget();

	        if (target) {
	          this._toolpop = new PopOver(target, this.getConfig(), this.$root);
	        } else {
	          this._toolpop = null;
	          warn("b-popover: 'target' element not found!");
	        }

	        return this._toolpop;
	      }
	    },
	    render: function render(h) {
	      return h('div', {
	        class: ['d-none'],
	        style: {
	          display: 'none'
	        },
	        attrs: {
	          'aria-hidden': true
	        }
	      }, [h('div', {
	        ref: 'title'
	      }, this.$slots.title), h('div', {
	        ref: 'content'
	      }, this.$slots.default)]);
	    }
	  };

	  var inBrowser$2 = typeof window !== 'undefined' && typeof document !== 'undefined'; // Key which we use to store tooltip object on element

	  var BVPO = '__BV_PopOver__'; // Valid event triggers

	  var validTriggers = {
	    focus: true,
	    hover: true,
	    click: true,
	    blur: true // Build a PopOver config based on bindings (if any)
	    // Arguments and modifiers take precedence over pased value config object

	    /* istanbul ignore next: not easy to test */

	  };

	  function parseBindings(bindings) {
	    // We start out with a blank config
	    var config = {}; // Process bindings.value

	    if (typeof bindings.value === 'string') {
	      // Value is popover content (html optionally supported)
	      config.content = bindings.value;
	    } else if (typeof bindings.value === 'function') {
	      // Content generator function
	      config.content = bindings.value;
	    } else if (_typeof(bindings.value) === 'object') {
	      // Value is config object, so merge
	      config = _objectSpread({}, config, bindings.value);
	    } // If Argument, assume element ID of container element


	    if (bindings.arg) {
	      // Element ID specified as arg. We must prepend '#' to become a CSS selector
	      config.container = "#".concat(bindings.arg);
	    } // Process modifiers


	    keys(bindings.modifiers).forEach(function (mod) {
	      if (/^html$/.test(mod)) {
	        // Title allows HTML
	        config.html = true;
	      } else if (/^nofade$/.test(mod)) {
	        // no animation
	        config.animation = false;
	      } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {
	        // placement of popover
	        config.placement = mod;
	      } else if (/^(window|viewport)$/.test(mod)) {
	        // bounday of popover
	        config.boundary = mod;
	      } else if (/^d\d+$/.test(mod)) {
	        // delay value
	        var delay = parseInt(mod.slice(1), 10) || 0;

	        if (delay) {
	          config.delay = delay;
	        }
	      } else if (/^o-?\d+$/.test(mod)) {
	        // offset value (negative allowed)
	        var offset = parseInt(mod.slice(1), 10) || 0;

	        if (offset) {
	          config.offset = offset;
	        }
	      }
	    }); // Special handling of event trigger modifiers Trigger is a space separated list

	    var selectedTriggers = {}; // parse current config object trigger

	    var triggers = typeof config.trigger === 'string' ? config.trigger.trim().split(/\s+/) : [];
	    triggers.forEach(function (trigger) {
	      if (validTriggers[trigger]) {
	        selectedTriggers[trigger] = true;
	      }
	    }); // Parse Modifiers for triggers

	    keys(validTriggers).forEach(function (trigger) {
	      if (bindings.modifiers[trigger]) {
	        selectedTriggers[trigger] = true;
	      }
	    }); // Sanitize triggers

	    config.trigger = keys(selectedTriggers).join(' ');

	    if (config.trigger === 'blur') {
	      // Blur by itself is useless, so convert it to focus
	      config.trigger = 'focus';
	    }

	    if (!config.trigger) {
	      // remove trigger config
	      delete config.trigger;
	    }

	    return config;
	  } //
	  // Add or Update popover on our element
	  //

	  /* istanbul ignore next: not easy to test */


	  function applyBVPO(el, bindings, vnode) {
	    if (!inBrowser$2) {
	      return;
	    }

	    if (!Popper) {
	      // Popper is required for tooltips to work
	      warn('v-b-popover: Popper.js is required for popovers to work');
	      return;
	    }

	    if (el[BVPO]) {
	      el[BVPO].updateConfig(parseBindings(bindings));
	    } else {
	      el[BVPO] = new PopOver(el, parseBindings(bindings), vnode.context.$root);
	    }
	  } //
	  // Remove popover on our element
	  //

	  /* istanbul ignore next */


	  function removeBVPO(el) {
	    if (!inBrowser$2) {
	      return;
	    }

	    if (el[BVPO]) {
	      el[BVPO].destroy();
	      el[BVPO] = null;
	      delete el[BVPO];
	    }
	  }
	  /*
	   * Export our directive
	   */

	  /* istanbul ignore next: not easy to test */


	  var bPopover = {
	    bind: function bind(el, bindings, vnode) {
	      applyBVPO(el, bindings, vnode);
	    },
	    inserted: function inserted(el, bindings, vnode) {
	      applyBVPO(el, bindings, vnode);
	    },
	    update: function update(el, bindings, vnode) {
	      if (bindings.value !== bindings.oldValue) {
	        applyBVPO(el, bindings, vnode);
	      }
	    },
	    componentUpdated: function componentUpdated(el, bindings, vnode) {
	      if (bindings.value !== bindings.oldValue) {
	        applyBVPO(el, bindings, vnode);
	      }
	    },
	    unbind: function unbind(el) {
	      removeBVPO(el);
	    }
	  };

	  var directives$2 = {
	    bPopover: bPopover
	  };
	  var popoverDirectivePlugin = {
	    install: function install(Vue) {
	      registerDirectives(Vue, directives$2);
	    }
	  };

	  var components$v = {
	    BPopover: BPopover
	  };
	  var index$s = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$v);
	      Vue.use(popoverDirectivePlugin);
	    }
	  };

	  var BProgressBar = {
	    name: 'BProgressBar',
	    inject: {
	      bvProgress: {
	        default: function _default()
	        /* istanbul ignore next */
	        {
	          return {};
	        }
	      }
	    },
	    props: {
	      value: {
	        type: Number,
	        default: 0
	      },
	      label: {
	        type: String,
	        default: null
	      },
	      labelHtml: {
	        type: String
	      },
	      // $parent (this.bvProgress) prop values may take precedence over the following props
	      // Which is why they are defaulted to null
	      max: {
	        type: Number,
	        default: null
	      },
	      precision: {
	        type: Number,
	        default: null
	      },
	      variant: {
	        type: String,
	        default: null
	      },
	      striped: {
	        type: Boolean,
	        default: null
	      },
	      animated: {
	        type: Boolean,
	        default: null
	      },
	      showProgress: {
	        type: Boolean,
	        default: null
	      },
	      showValue: {
	        type: Boolean,
	        default: null
	      }
	    },
	    computed: {
	      progressBarClasses: function progressBarClasses() {
	        return [this.computedVariant ? "bg-".concat(this.computedVariant) : '', this.computedStriped || this.computedAnimated ? 'progress-bar-striped' : '', this.computedAnimated ? 'progress-bar-animated' : ''];
	      },
	      progressBarStyles: function progressBarStyles() {
	        return {
	          width: 100 * (this.value / this.computedMax) + '%'
	        };
	      },
	      computedProgress: function computedProgress() {
	        var p = Math.pow(10, this.computedPrecision);
	        return Math.round(100 * p * this.value / this.computedMax) / p;
	      },
	      computedMax: function computedMax() {
	        // Prefer our max over parent setting
	        return typeof this.max === 'number' ? this.max : this.bvProgress.max || 100;
	      },
	      computedVariant: function computedVariant() {
	        // Prefer our variant over parent setting
	        return this.variant || this.bvProgress.variant;
	      },
	      computedPrecision: function computedPrecision() {
	        // Prefer our precision over parent setting
	        return typeof this.precision === 'number' ? this.precision : this.bvProgress.precision || 0;
	      },
	      computedStriped: function computedStriped() {
	        // Prefer our striped over parent setting
	        return typeof this.striped === 'boolean' ? this.striped : this.bvProgress.striped || false;
	      },
	      computedAnimated: function computedAnimated() {
	        // Prefer our animated over parent setting
	        return typeof this.animated === 'boolean' ? this.animated : this.bvProgress.animated || false;
	      },
	      computedShowProgress: function computedShowProgress() {
	        // Prefer our showProgress over parent setting
	        return typeof this.showProgress === 'boolean' ? this.showProgress : this.bvProgress.showProgress || false;
	      },
	      computedShowValue: function computedShowValue() {
	        // Prefer our showValue over parent setting
	        return typeof this.showValue === 'boolean' ? this.showValue : this.bvProgress.showValue || false;
	      }
	    },
	    render: function render(h) {
	      var childNodes = h(false);

	      if (this.$slots.default) {
	        childNodes = this.$slots.default;
	      } else if (this.label || this.labelHtml) {
	        childNodes = h('span', {
	          domProps: htmlOrText(this.labelHtml, this.label)
	        });
	      } else if (this.computedShowProgress) {
	        childNodes = this.computedProgress.toFixed(this.computedPrecision);
	      } else if (this.computedShowValue) {
	        childNodes = this.value.toFixed(this.computedPrecision);
	      }

	      return h('div', {
	        staticClass: 'progress-bar',
	        class: this.progressBarClasses,
	        style: this.progressBarStyles,
	        attrs: {
	          role: 'progressbar',
	          'aria-valuemin': '0',
	          'aria-valuemax': this.computedMax.toString(),
	          'aria-valuenow': this.value.toFixed(this.computedPrecision)
	        }
	      }, [childNodes]);
	    }
	  };

	  var BProgress = {
	    name: 'BProgress',
	    components: {
	      BProgressBar: BProgressBar
	    },
	    provide: function provide() {
	      return {
	        bvProgress: this
	      };
	    },
	    props: {
	      // These props can be inherited via the child b-progress-bar(s)
	      variant: {
	        type: String,
	        default: null
	      },
	      striped: {
	        type: Boolean,
	        default: false
	      },
	      animated: {
	        type: Boolean,
	        default: false
	      },
	      height: {
	        type: String,
	        default: null
	      },
	      precision: {
	        type: Number,
	        default: 0
	      },
	      showProgress: {
	        type: Boolean,
	        default: false
	      },
	      showValue: {
	        type: Boolean,
	        default: false
	      },
	      max: {
	        type: Number,
	        default: 100
	      },
	      // This prop is not inherited by child b-progress-bar(s)
	      value: {
	        type: Number,
	        default: 0
	      }
	    },
	    computed: {
	      progressHeight: function progressHeight() {
	        return {
	          height: this.height || null
	        };
	      }
	    },
	    render: function render(h) {
	      var childNodes = this.$slots.default;

	      if (!childNodes) {
	        childNodes = h('b-progress-bar', {
	          props: {
	            value: this.value,
	            max: this.max,
	            precision: this.precision,
	            variant: this.variant,
	            animated: this.animated,
	            striped: this.striped,
	            showProgress: this.showProgress,
	            showValue: this.showValue
	          }
	        });
	      }

	      return h('div', {
	        class: ['progress'],
	        style: this.progressHeight
	      }, [childNodes]);
	    }
	  };

	  var components$w = {
	    BProgress: BProgress,
	    BProgressBar: BProgressBar
	  };
	  var index$t = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$w);
	    }
	  };

	  var BSpinner = {
	    name: 'BSpinner',
	    functional: true,
	    props: {
	      type: {
	        type: String,
	        default: 'border' // SCSS currently supports 'border' or 'grow'

	      },
	      label: {
	        type: String,
	        default: null
	      },
	      variant: {
	        type: String,
	        default: null
	      },
	      small: {
	        type: Boolean,
	        default: false
	      },
	      role: {
	        type: String,
	        default: 'status'
	      },
	      tag: {
	        type: String,
	        default: 'span'
	      }
	    },
	    render: function render(h, _ref) {
	      var _class;

	      var props = _ref.props,
	          data = _ref.data,
	          slots = _ref.slots;
	      var label = h(false);
	      var hasLabel = slots().label || props.label;

	      if (hasLabel) {
	        label = h('span', {
	          staticClass: 'sr-only'
	        }, hasLabel);
	      }

	      return h(props.tag, mergeData(data, {
	        attrs: {
	          role: hasLabel ? props.role || 'status' : null,
	          'aria-hidden': hasLabel ? null : 'true'
	        },
	        class: (_class = {}, _defineProperty(_class, "spinner-".concat(props.type), Boolean(props.type)), _defineProperty(_class, "spinner-".concat(props.type, "-sm"), props.small), _defineProperty(_class, "text-".concat(props.variant), Boolean(props.variant)), _class)
	      }), [label]);
	    }
	  };

	  var components$x = {
	    BSpinner: BSpinner
	  };
	  var index$u = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$x);
	    }
	  };

	  /**
	   * Converts a string, including strings in camelCase or snake_case, into Start Case (a variant
	   * of Title Case where all words start with a capital letter), it keeps original single quote
	   * and hyphen in the word.
	   *
	   * Copyright (c) 2017 Compass (MIT)
	   * https://github.com/UrbanCompass/to-start-case
	   * @author Zhuoyuan Zhang <https://github.com/drawyan>
	   * @author Wei Wang <https://github.com/onlywei>
	   *
	   *
	   *   'management_companies' to 'Management Companies'
	   *   'managementCompanies' to 'Management Companies'
	   *   `hell's kitchen` to `Hell's Kitchen`
	   *   `co-op` to `Co-op`
	   *
	   * @param {String} str
	   * @returns {String}
	   */
	  function toStartCaseStr(str) {
	    return str.replace(/_/g, ' ').replace(/([a-z])([A-Z])/g, function (str, $1, $2) {
	      return $1 + ' ' + $2;
	    }).replace(/(\s|^)(\w)/g, function (str, $1, $2) {
	      return $1 + $2.toUpperCase();
	    });
	  }

	  /**
	   * Get property defined by dot/array notation in string.
	   *
	   * @link https://gist.github.com/jeneg/9767afdcca45601ea44930ea03e0febf#gistcomment-1935901
	   *
	   * @param {Object} obj
	   * @param {string|Array} path
	   * @param {*} defaultValue (optional)
	   * @return {*}
	   */

	  var get = (function (obj, path) {
	    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	    // Handle aray of path values
	    path = isArray(path) ? path.join('.') : path; // If no path or no object passed

	    if (!path || !isObject(obj)) {
	      return defaultValue;
	    } // Handle edge case where user has dot(s) in top-level item field key
	    // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2762


	    if (obj[path] !== undefined) {
	      return obj[path];
	    } // Handle string array notation (numeric indices only)


	    path = String(path).replace(/\[(\d+)]/g, '.$1');
	    var steps = path.split('.').filter(Boolean); // Handle case where someone pases a string of only dots

	    if (steps.length === 0) {
	      return defaultValue;
	    } // Traverse path in object to find result


	    return steps.every(function (step) {
	      return (obj = obj[step]) !== undefined;
	    }) ? obj : defaultValue;
	  });

	  /*
	   * Consitant and stable sort function across JavsaScript platforms
	   *
	   * Inconsistent sorts can cause SSR problems between client and server
	   * such as in <b-table> if sortBy is applied to the data on server side render.
	   * Chrome and V8 native sorts are inconsistent/unstable
	   *
	   * This function uses native sort with fallback to index compare when the a and b
	   * compare returns 0
	   *
	   * Algorithm bsaed on:
	   * https://stackoverflow.com/questions/1427608/fast-stable-sorting-algorithm-implementation-in-javascript/45422645#45422645
	   *
	   * @param {array} array to sort
	   * @param {function} sortcompare function
	   * @return {array}
	   */
	  function stableSort(array, compareFn) {
	    // Using `.bind(compareFn)` on the wrapped anonymous function improves
	    // performance by avoiding the function call setup. We don't use an arrow
	    // function here as it binds `this` to the `stableSort` context rather than
	    // the `compareFn` context, which wouldn't give us the performance increase.
	    return array.map(function (a, index) {
	      return [index, a];
	    }).sort(function (a, b) {
	      return this(a[1], b[1]) || a[0] - b[0];
	    }.bind(compareFn)).map(function (e) {
	      return e[1];
	    });
	  }

	  /**
	   * Returns vNodes for named slot either scoped or unscoped
	   *
	   * @param {String} name
	   * @param {String} scope
	   * @param {Object} scopedSlots
	   * @param {Object} slots
	   * @returns {Array|undefined} vNodes
	   */
	  function normalizeSlot(name) {
	    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var $scopedSlots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	    var $slots = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	    var slot = $scopedSlots[name] || $slots[name];
	    return typeof slot === 'function' ? slot(scope) : slot;
	  }

	  var normalizeSlotMixin = {
	    methods: {
	      hasNormalizedSlot: function hasNormalizedSlot(name) {
	        // Returns true if the either a $scopedSlot or $slot exists with the specified name
	        return Boolean(this.$scopedSlots[name] || this.$slots[name]);
	      },
	      normalizeSlot: function normalizeSlot$1(name) {
	        var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	        // Returns an array of rendered vNodes if slot found.
	        // Returns undefined if not found.
	        var vNodes = normalizeSlot(name, scope, this.$scopedSlots, this.$slots);

	        return vNodes ? concat(vNodes) : vNodes;
	      }
	    }
	  };

	  var IGNORED_FIELD_KEYS = {
	    _rowVariant: true,
	    _cellVariants: true,
	    _showDetails: true // Return a copy of a row after all reserved fields have been filtered out
	    // TODO: add option to specify which fields to include

	  };

	  function sanitizeRow(row) {
	    return keys(row).reduce(function (obj, key) {
	      // Ignore special fields that start with _
	      if (!IGNORED_FIELD_KEYS[key]) {
	        obj[key] = row[key];
	      }

	      return obj;
	    }, {});
	  } // Stringifies the values of an object
	  //   { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }
	  // becomes
	  //   'one 3 2 zzz 10 12 11'


	  function toString$1(v) {
	    if (typeof v === 'undefined' || v === null) {
	      return '';
	    }

	    if (v instanceof Object && !(v instanceof Date)) {
	      // Arrays are also object, and keys just returns the array indexes
	      // Date objects we convert to strings
	      return keys(v).sort()
	      /* sort to prevent SSR issues on pre-rendered sorted tables */
	      .map(function (k) {
	        return toString$1(v[k]);
	      }).join(' ');
	    }

	    return String(v);
	  } // Stringifies the values of a record, ignoring any special top level field keys
	  // TODO: add option to strigify formatted/scopedSlot items, and only specific fields


	  function recToString(row) {
	    /* istanbul ignore if */
	    if (!(row instanceof Object)) {
	      return '';
	    }

	    return toString$1(sanitizeRow(row));
	  } // Default sort compare routine
	  // TODO: add option to sort by multiple columns (tri-state per column, plus order of columns in sort)
	  //  where sprtBy could be an array of objects [ {key: 'foo', sortDir: 'asc'}, {key:'bar', sortDir: 'desc'} ...]
	  //  or an array of arrays [ ['foo','asc'], ['bar','desc'] ]


	  function defaultSortCompare(a, b, sortBy) {
	    a = get(a, sortBy, '');
	    b = get(b, sortBy, '');

	    if (a instanceof Date && b instanceof Date || typeof a === 'number' && typeof b === 'number') {
	      // Special case for comparing Dates and Numbers
	      return a < b && -1 || a > b && 1 || 0;
	    }

	    return toString$1(a).localeCompare(toString$1(b), undefined, {
	      numeric: true
	    });
	  } // Helper function to massage field entry into common object format


	  function processField(key, value) {
	    var field = null;

	    if (typeof value === 'string') {
	      // Label shortcut
	      field = {
	        key: key,
	        label: value
	      };
	    } else if (typeof value === 'function') {
	      // Formatter shortcut
	      field = {
	        key: key,
	        formatter: value
	      };
	    } else if (_typeof(value) === 'object') {
	      field = _objectSpread({}, value);
	      field.key = field.key || key;
	    } else if (value !== false) {
	      // Fallback to just key
	      field = {
	        key: key
	      };
	    }

	    return field;
	  } // Filter CSS Selector for click/dblclick/etc events
	  // If any of these selectors match the clicked element, we ignore the event


	  var EVENT_FILTER = ['a', 'a *', // include content inside links
	  'button', 'button *', // include content inside buttons
	  'input:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'textarea:not(.disabled):not([disabled])', '[role="link"]', '[role="link"] *', '[role="button"]', '[role="button"] *', '[tabindex]:not(.disabled):not([disabled])'].join(','); // Returns true of we should ignore the click/dbclick/keypress event
	  // Avoids having the user need to use @click.stop on the form control

	  function filterEvent(evt) {
	    /* istanbul ignore if */
	    if (!evt || !evt.target) {
	      return;
	    }

	    var el = evt.target;

	    if (el.tagName === 'TD' || el.tagName === 'TH' || el.tagName === 'TR' || el.disabled) {
	      // Shortut all the following tests for efficiency
	      return false;
	    }

	    if (closest('.dropdown-menu', el)) {
	      // Click was in a dropdown menu, so ignore
	      return true;
	    }

	    var label = el.tagName === 'LABEL' ? el : closest('label', el);

	    if (label && label.control && !label.control.disabled) {
	      // If the label's form control is not disabled then we don't propagate evt
	      return true;
	    }

	    return matches(el, EVENT_FILTER);
	  } // b-table component definition
	  // @vue/component


	  var BTable = {
	    name: 'BTable',
	    mixins: [idMixin, listenOnRootMixin, normalizeSlotMixin],
	    // Don't place ATTRS on root element automatically, as table could be wrapped in responsive div
	    inheritAttrs: false,
	    props: {
	      items: {
	        type: [Array, Function],
	        default: function _default()
	        /* istanbul ignore next */
	        {
	          return [];
	        }
	      },
	      fields: {
	        type: [Object, Array],
	        default: null
	      },
	      primaryKey: {
	        // Primary key for record.
	        // If provided the value in each row must be unique!!!
	        type: String,
	        default: null
	      },
	      sortBy: {
	        type: String,
	        default: null
	      },
	      sortDesc: {
	        type: Boolean,
	        default: false
	      },
	      sortDirection: {
	        type: String,
	        default: 'asc',
	        validator: function validator(direction) {
	          return arrayIncludes(['asc', 'desc', 'last'], direction);
	        }
	      },
	      caption: {
	        type: String,
	        default: null
	      },
	      captionHtml: {
	        type: String
	      },
	      captionTop: {
	        type: Boolean,
	        default: false
	      },
	      striped: {
	        type: Boolean,
	        default: false
	      },
	      bordered: {
	        type: Boolean,
	        default: false
	      },
	      borderless: {
	        type: Boolean,
	        default: false
	      },
	      outlined: {
	        type: Boolean,
	        default: false
	      },
	      dark: {
	        type: Boolean,
	        default: function _default() {
	          /* istanbul ignore if */
	          if (this && typeof this.inverse === 'boolean') {
	            // Deprecate inverse
	            warn("b-table: prop 'inverse' has been deprecated. Use 'dark' instead");
	            return this.dark;
	          }

	          return false;
	        }
	      },
	      inverse: {
	        // Deprecated in v1.0.0 in favor of `dark`
	        type: Boolean,
	        default: null
	      },
	      hover: {
	        type: Boolean,
	        default: false
	      },
	      small: {
	        type: Boolean,
	        default: false
	      },
	      fixed: {
	        type: Boolean,
	        default: false
	      },
	      footClone: {
	        type: Boolean,
	        default: false
	      },
	      responsive: {
	        type: [Boolean, String],
	        default: false
	      },
	      stacked: {
	        type: [Boolean, String],
	        default: false
	      },
	      selectable: {
	        type: Boolean,
	        default: false
	      },
	      selectMode: {
	        type: String,
	        default: 'multi'
	      },
	      selectedVariant: {
	        type: String,
	        default: 'primary'
	      },
	      headVariant: {
	        type: String,
	        default: ''
	      },
	      footVariant: {
	        type: String,
	        default: ''
	      },
	      theadClass: {
	        type: [String, Array],
	        default: null
	      },
	      theadTrClass: {
	        type: [String, Array],
	        default: null
	      },
	      tbodyClass: {
	        type: [String, Array],
	        default: null
	      },
	      tbodyTrClass: {
	        type: [String, Array, Function],
	        default: null
	      },
	      tfootClass: {
	        type: [String, Array],
	        default: null
	      },
	      tfootTrClass: {
	        type: [String, Array],
	        default: null
	      },
	      perPage: {
	        type: Number,
	        default: 0
	      },
	      currentPage: {
	        type: Number,
	        default: 1
	      },
	      filter: {
	        type: [String, RegExp, Object, Array, Function],
	        default: null
	      },
	      filterFunction: {
	        type: Function,
	        default: null
	      },
	      sortCompare: {
	        type: Function,
	        default: null
	      },
	      noLocalSorting: {
	        type: Boolean,
	        default: false
	      },
	      noProviderPaging: {
	        type: Boolean,
	        default: false
	      },
	      noProviderSorting: {
	        type: Boolean,
	        default: false
	      },
	      noProviderFiltering: {
	        type: Boolean,
	        default: false
	      },
	      noSortReset: {
	        type: Boolean,
	        default: false
	      },
	      busy: {
	        type: Boolean,
	        default: false
	      },
	      value: {
	        // v-model for retreiving the current displayed rows
	        type: Array,
	        default: function _default() {
	          return [];
	        }
	      },
	      labelSortAsc: {
	        type: String,
	        default: 'Click to sort Ascending'
	      },
	      labelSortDesc: {
	        type: String,
	        default: 'Click to sort Descending'
	      },
	      showEmpty: {
	        type: Boolean,
	        default: false
	      },
	      emptyText: {
	        type: String,
	        default: 'There are no records to show'
	      },
	      emptyHtml: {
	        type: String
	      },
	      emptyFilteredText: {
	        type: String,
	        default: 'There are no records matching your request'
	      },
	      emptyFilteredHtml: {
	        type: String
	      },
	      apiUrl: {
	        // Passthrough prop. Passed to the context object. Not used by b-table directly
	        type: String,
	        default: ''
	      },
	      tbodyTransitionProps: {
	        type: Object // default: undefined

	      },
	      tbodyTransitionHandlers: {
	        type: Object // default: undefined

	      }
	    },
	    data: function data() {
	      return {
	        localSortBy: this.sortBy || '',
	        localSortDesc: this.sortDesc || false,
	        localBusy: false,
	        // Our local copy of the items. Must be an array
	        localItems: isArray(this.items) ? this.items.slice() : [],
	        // Flag for displaying which empty slot to show, and for some event triggering.
	        isFiltered: false,
	        selectedRows: [],
	        lastRowClicked: -1
	      };
	    },
	    computed: {
	      // Layout related computed props
	      isStacked: function isStacked() {
	        return this.stacked === '' ? true : this.stacked;
	      },
	      isResponsive: function isResponsive() {
	        var responsive = this.responsive === '' ? true : this.responsive;
	        return this.isStacked ? false : responsive;
	      },
	      responsiveClass: function responsiveClass() {
	        return this.isResponsive === true ? 'table-responsive' : this.isResponsive ? "table-responsive-".concat(this.responsive) : '';
	      },
	      tableClasses: function tableClasses() {
	        var _ref;

	        return _ref = {
	          'table-striped': this.striped,
	          'table-hover': this.hover,
	          'table-dark': this.dark,
	          'table-bordered': this.bordered,
	          'table-borderless': this.borderless,
	          'table-sm': this.small,
	          border: this.outlined,
	          // The following are b-table custom styles
	          'b-table-fixed': this.fixed,
	          'b-table-stacked': this.stacked === true || this.stacked === ''
	        }, _defineProperty(_ref, "b-table-stacked-".concat(this.stacked), this.stacked !== true && this.stacked), _defineProperty(_ref, 'b-table-selectable', this.selectable), _ref;
	      },
	      headClasses: function headClasses() {
	        return [this.headVariant ? 'thead-' + this.headVariant : '', this.theadClass];
	      },
	      bodyClasses: function bodyClasses() {
	        return [this.tbodyClass];
	      },
	      footClasses: function footClasses() {
	        var variant = this.footVariant || this.headVariant || null;
	        return [variant ? 'thead-' + variant : '', this.tfootClass];
	      },
	      captionClasses: function captionClasses() {
	        return {
	          'b-table-caption-top': this.captionTop
	        };
	      },
	      // Items related computed props
	      hasProvider: function hasProvider() {
	        return this.items instanceof Function;
	      },
	      localFiltering: function localFiltering() {
	        return this.hasProvider ? !!this.noProviderFiltering : true;
	      },
	      localSorting: function localSorting() {
	        return this.hasProvider ? !!this.noProviderSorting : !this.noLocalSorting;
	      },
	      localPaging: function localPaging() {
	        return this.hasProvider ? !!this.noProviderPaging : true;
	      },
	      context: function context() {
	        // Current state of sorting, filtering and pagination props/values
	        return {
	          filter: this.localFilter,
	          sortBy: this.localSortBy,
	          sortDesc: this.localSortDesc,
	          perPage: this.perPage,
	          currentPage: this.currentPage,
	          apiUrl: this.apiUrl
	        };
	      },
	      providerTriggerContext: function providerTriggerContext() {
	        // Used to trigger the provider function via a watcher. Only the fields that
	        // are needed for triggering a provider update are included. Note that the
	        // regular this.context is sent to the provider during fetches though, as they
	        // may neeed all the prop info.
	        var ctx = {
	          apiUrl: this.apiUrl
	        };

	        if (!this.noProviderFiltering) {
	          // Either a string, or could be an object or array.
	          ctx.filter = this.localFilter;
	        }

	        if (!this.noProviderSorting) {
	          ctx.sortBy = this.localSortBy;
	          ctx.sortDesc = this.localSortDesc;
	        }

	        if (!this.noProviderPaging) {
	          ctx.perPage = this.perPage;
	          ctx.currentPage = this.currentPage;
	        }

	        return ctx;
	      },
	      computedBusy: function computedBusy() {
	        return this.busy || this.localBusy;
	      },
	      computedFields: function computedFields() {
	        var _this = this;

	        // We normalize fields into an array of objects
	        // [ { key:..., label:..., ...}, {...}, ..., {..}]
	        var fields = [];

	        if (isArray(this.fields)) {
	          // Normalize array Form
	          this.fields.filter(function (f) {
	            return f;
	          }).forEach(function (f) {
	            if (typeof f === 'string') {
	              fields.push({
	                key: f,
	                label: toStartCaseStr(f)
	              });
	            } else if (_typeof(f) === 'object' && f.key && typeof f.key === 'string') {
	              // Full object definition. We use assign so that we don't mutate the original
	              fields.push(_objectSpread({}, f));
	            } else if (_typeof(f) === 'object' && keys(f).length === 1) {
	              // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }
	              var key = keys(f)[0];
	              var field = processField(key, f[key]);

	              if (field) {
	                fields.push(field);
	              }
	            }
	          });
	        } else if (this.fields && _typeof(this.fields) === 'object' && keys(this.fields).length > 0) {
	          // Normalize object Form
	          keys(this.fields).forEach(function (key) {
	            var field = processField(key, _this.fields[key]);

	            if (field) {
	              fields.push(field);
	            }
	          });
	        } // If no field provided, take a sample from first record (if exits)


	        if (fields.length === 0 && this.localItems.length > 0) {
	          var sample = this.localItems[0];
	          keys(sample).forEach(function (k) {
	            if (!IGNORED_FIELD_KEYS[k]) {
	              fields.push({
	                key: k,
	                label: toStartCaseStr(k)
	              });
	            }
	          });
	        } // Ensure we have a unique array of fields and that they have String labels


	        var memo = {};
	        return fields.filter(function (f) {
	          if (!memo[f.key]) {
	            memo[f.key] = true;
	            f.label = typeof f.label === 'string' ? f.label : toStartCaseStr(f.key);
	            return true;
	          }
	          /* istanbul ignore next */


	          return false;
	        });
	      },
	      filteredCheck: function filteredCheck() {
	        // For watching changes to filteredItems vs localItems
	        return {
	          filteredItems: this.filteredItems,
	          localItems: this.localItems,
	          localFilter: this.localFilter
	        };
	      },
	      localFilter: function localFilter() {
	        // Returns a sanitized/normalized version of filter prop
	        if (typeof this.filter === 'function') {
	          // this.localFilterFn will contain the correct function ref.
	          // Deprecate setting prop filter to a function
	          return '';
	        } else if (typeof this.filterFunction !== 'function' && !(typeof this.filter === 'string' || this.filter instanceof RegExp)) {
	          // Using internal filter function, which only acccepts string or regexp at the moment
	          return '';
	        } else {
	          // Could be astring, object or array, as needed by external filter function
	          return this.filter;
	        }
	      },
	      localFilterFn: function localFilterFn() {
	        var filter = this.filter;
	        var filterFn = this.filterFunction; // Sanitized/normalize filter-function prop

	        if (typeof filterFn === 'function') {
	          return filterFn;
	        } else if (typeof filter === 'function') {
	          // Deprecate setting prop filter to a function

	          /* istanbul ignore next */
	          return filter;
	        } else {
	          // no filterFunction, so signal to use internal filter function
	          return null;
	        }
	      },
	      filteredItems: function filteredItems() {
	        // Returns the records in localItems that match the filter criteria.
	        // Returns the original localItems array if not sorting
	        var items = this.localItems || [];
	        var criteria = this.localFilter;
	        var filterFn = this.filterFnFactory(this.localFilterFn, criteria) || this.defaultFilterFnFactory(criteria); // We only do local filtering if requested, and if the are records to filter and
	        // if a filter criteria was specified

	        if (this.localFiltering && filterFn && items.length > 0) {
	          items = items.filter(filterFn);
	        }

	        return items;
	      },
	      sortedItems: function sortedItems() {
	        // Sorts the filtered items and returns a new array of the sorted items
	        // or the original items array if not sorted.
	        var items = this.filteredItems || [];
	        var sortBy = this.localSortBy;
	        var sortDesc = this.localSortDesc;
	        var sortCompare = this.sortCompare;
	        var localSorting = this.localSorting;

	        if (sortBy && localSorting) {
	          // stableSort returns a new arary, and leaves the original array intact
	          return stableSort(items, function (a, b) {
	            var result = null;

	            if (typeof sortCompare === 'function') {
	              // Call user provided sortCompare routine
	              result = sortCompare(a, b, sortBy, sortDesc);
	            }

	            if (result === null || result === undefined || result === false) {
	              // Fallback to built-in defaultSortCompare if sortCompare not defined or returns null/false
	              result = defaultSortCompare(a, b, sortBy);
	            } // Negate result if sorting in descending order


	            return (result || 0) * (sortDesc ? -1 : 1);
	          });
	        }

	        return items;
	      },
	      paginatedItems: function paginatedItems() {
	        var items = this.sortedItems || [];
	        var currentPage = Math.max(parseInt(this.currentPage, 10) || 1, 1);
	        var perPage = Math.max(parseInt(this.perPage, 10) || 0, 0); // Apply local pagination

	        if (this.localPaging && !!perPage) {
	          // Grab the current page of data (which may be past filtered items limit)
	          items = items.slice((currentPage - 1) * perPage, currentPage * perPage);
	        } // Return the items to display in the table


	        return items;
	      },
	      computedItems: function computedItems() {
	        return this.paginatedItems || [];
	      }
	    },
	    watch: {
	      // Watch props for changes and update local values
	      items: function items(newItems) {
	        if (this.hasProvider || newItems instanceof Function) {
	          this.$nextTick(this._providerUpdate);
	        } else if (isArray(newItems)) {
	          // Set localItems/filteredItems to a copy of the provided array
	          this.localItems = newItems.slice();
	        } else {
	          this.localItems = [];
	        }
	      },
	      sortDesc: function sortDesc(newVal, oldVal) {
	        if (newVal === this.localSortDesc) {
	          /* istanbul ignore next */
	          return;
	        }

	        this.localSortDesc = newVal || false;
	      },
	      sortBy: function sortBy(newVal, oldVal) {
	        if (newVal === this.localSortBy) {
	          return;
	        }

	        this.localSortBy = newVal || null;
	      },
	      selectMode: function selectMode(newVal, oldVal) {
	        if (oldVal !== newVal) {
	          this.clearSelected();
	        }
	      },
	      // Update .sync props
	      localSortDesc: function localSortDesc(newVal, oldVal) {
	        // Emit update to sort-desc.sync
	        if (newVal !== oldVal) {
	          this.clearSelected();
	          this.$emit('update:sortDesc', newVal);
	        }
	      },
	      localSortBy: function localSortBy(newVal, oldVal) {
	        if (newVal !== oldVal) {
	          this.clearSelected();
	          this.$emit('update:sortBy', newVal);
	        }
	      },
	      localBusy: function localBusy(newVal, oldVal) {
	        if (newVal !== oldVal) {
	          this.$emit('update:busy', newVal);
	        }
	      },
	      // Watch for changes on computedItems and update the v-model
	      computedItems: function computedItems(newVal, oldVal) {
	        // Reset for selectable
	        this.lastRowClicked = -1;
	        this.$emit('input', newVal);
	        var equal = false;

	        if (this.selectable && this.selectedRows.length > 0) {
	          // Quick check against array length
	          equal = isArray(newVal) && isArray(oldVal) && newVal.length === oldVal.length;

	          for (var i = 0; equal && i < newVal.length; i++) {
	            // Look for the first non-loosely equal row, after ignoring reserved fields
	            equal = looseEqual(sanitizeRow(newVal[i]), sanitizeRow(oldVal[i]));
	          }
	        }

	        if (!equal) {
	          this.clearSelected();
	        }
	      },
	      selectable: function selectable(newVal, oldVal) {
	        // Clear selection if prop selectable changes
	        this.clearSelected();
	      },
	      // Watch for changes to the filter criteria and filtered items vs localItems).
	      // And set visual state and emit events as required
	      filteredCheck: function filteredCheck(_ref2) {
	        var filteredItems = _ref2.filteredItems,
	            localItems = _ref2.localItems,
	            localFilter = _ref2.localFilter;
	        // Determine if the dataset is filtered or not
	        var isFiltered;

	        if (!localFilter) {
	          // If filter criteria is falsey
	          isFiltered = false;
	        } else if (looseEqual(localFilter, []) || looseEqual(localFilter, {})) {
	          // If filter criteria is an empty array or object
	          isFiltered = false;
	        } else if (localFilter) {
	          // if Filter criteria is truthy
	          isFiltered = true;
	        } else {
	          isFiltered = false;
	        }

	        if (isFiltered) {
	          this.clearSelected();
	          this.$emit('filtered', filteredItems, filteredItems.length);
	        }

	        this.isFiltered = isFiltered;
	      },
	      isFiltered: function isFiltered(newVal, oldVal) {
	        if (newVal !== oldVal) {
	          this.clearSelected();
	        }

	        if (newVal === false && oldVal === true) {
	          // We need to emit a filtered event if isFiltered transitions from true to
	          // false so that users can update their pagination controls.
	          this.$emit('filtered', this.localItems, this.localItems.length);
	        }
	      },
	      context: function context(newVal, oldVal) {
	        // Emit context info for enternal paging/filtering/sorting handling
	        if (!looseEqual(newVal, oldVal)) {
	          this.$emit('context-changed', newVal);
	        }
	      },
	      // Provider update triggering
	      providerTriggerContext: function providerTriggerContext(newVal, oldVal) {
	        // Trigger the provider to update as the relevant context values have changed.
	        if (!looseEqual(newVal, oldVal)) {
	          this.$nextTick(this._providerUpdate);
	        }
	      }
	    },
	    mounted: function mounted() {
	      var _this2 = this;

	      // Call the items provider if necessary
	      if (this.hasProvider && (!this.localItems || this.localItems.length === 0)) {
	        // Fetch on mount if localItems is empty
	        this._providerUpdate();
	      } // Initially update the v-model of displayed items


	      this.$emit('input', this.computedItems); // Listen for global messages to tell us to force refresh the table

	      this.listenOnRoot('bv::refresh::table', function (id) {
	        if (id === _this2.id || id === _this2) {
	          _this2.refresh();
	        }
	      });
	    },
	    methods: {
	      // Methods for computing classes, attributes and styles for table cells
	      fieldClasses: function fieldClasses(field) {
	        // header field (th) classes
	        return [field.variant ? 'table-' + field.variant : '', field.class ? field.class : '', field.thClass ? field.thClass : ''];
	      },
	      tdClasses: function tdClasses(field, item) {
	        var cellVariant = '';

	        if (item._cellVariants && item._cellVariants[field.key]) {
	          cellVariant = "".concat(this.dark ? 'bg' : 'table', "-").concat(item._cellVariants[field.key]);
	        }

	        return [field.variant && !cellVariant ? "".concat(this.dark ? 'bg' : 'table', "-").concat(field.variant) : '', cellVariant, field.class ? field.class : '', this.getTdValues(item, field.key, field.tdClass, '')];
	      },
	      tdAttrs: function tdAttrs(field, item, colIndex) {
	        var attrs = {};
	        attrs['aria-colindex'] = String(colIndex + 1);

	        if (field.isRowHeader) {
	          attrs['scope'] = 'row';
	        }

	        if (this.isStacked) {
	          // Generate the "header cell" label content in stacked mode
	          attrs['data-label'] = field.label;

	          if (field.isRowHeader) {
	            attrs['role'] = 'rowheader';
	          } else {
	            attrs['role'] = 'cell';
	          }
	        }

	        return _objectSpread({}, attrs, this.getTdValues(item, field.key, field.tdAttr, {}));
	      },
	      rowClasses: function rowClasses(item) {
	        return [item._rowVariant ? "".concat(this.dark ? 'bg' : 'table', "-").concat(item._rowVariant) : '', typeof this.tbodyTrClass === 'function' ? this.tbodyTrClass(item, 'row') : this.tbodyTrClass];
	      },
	      getTdValues: function getTdValues(item, key, tdValue, defValue) {
	        var parent = this.$parent;

	        if (tdValue) {
	          var value = get(item, key, '');

	          if (typeof tdValue === 'function') {
	            return tdValue(value, key, item);
	          } else if (typeof tdValue === 'string' && typeof parent[tdValue] === 'function') {
	            return parent[tdValue](value, key, item);
	          }

	          return tdValue;
	        }

	        return defValue;
	      },
	      // Method to get the value for a field
	      getFormattedValue: function getFormattedValue(item, field) {
	        var key = field.key;
	        var formatter = field.formatter;
	        var parent = this.$parent;
	        var value = get(item, key, null);

	        if (formatter) {
	          if (typeof formatter === 'function') {
	            value = formatter(value, key, item);
	          } else if (typeof formatter === 'string' && typeof parent[formatter] === 'function') {
	            value = parent[formatter](value, key, item);
	          }
	        }

	        return value === null || typeof value === 'undefined' ? '' : value;
	      },
	      // Filter Function factories
	      filterFnFactory: function filterFnFactory(filterFn, criteria) {
	        // Wrapper factory for external filter functions.
	        // Wrap the provided filter-function and return a new function.
	        // returns null if no filter-function defined or if criteria is falsey.
	        // Rather than directly grabbing this.computedLocalFilterFn or this.filterFunction
	        // We have it passed, so that the caller computed prop will be reactive to changes
	        // in the original filter-function (as this routine is a method)
	        if (!filterFn || !criteria || typeof filterFn !== 'function') {
	          return null;
	        } // Build the wrapped filter test function, passing the criteria to the provided function


	        var fn = function fn(item) {
	          // Generated function returns true if the crieria matches part of the serialzed data, otherwise false
	          return filterFn(item, criteria);
	        }; // return the wrapped function


	        return fn;
	      },
	      defaultFilterFnFactory: function defaultFilterFnFactory(criteria) {
	        // Generates the default filter function, using the given flter criteria
	        if (!criteria || !(typeof criteria === 'string' || criteria instanceof RegExp)) {
	          // Bult in filter can only support strings or RegExp criteria (at the moment)
	          return null;
	        } // Build the regexp needed for filtering


	        var regexp = criteria;

	        if (typeof regexp === 'string') {
	          // Escape special RegExp characters in the string and convert contiguous
	          // whitespace to \s+ matches
	          var pattern = criteria.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&').replace(/[\s\uFEFF\xA0]+/g, '\\s+'); // Build the RegExp (no need for global flag, as we only need to find the value once in the string)

	          regexp = new RegExp(".*".concat(pattern, ".*"), 'i');
	        } // Generate the wrapped filter test function to use


	        var fn = function fn(item) {
	          // This searches all row values (and sub property values) in the entire (excluding
	          // special _ prefixed keys), because we convert the record to a space-separated
	          // string containing all the value properties (recursively), even ones that are
	          // not visible (not specified in this.fields).
	          //
	          // TODO: enable searching on formatted fields and scoped slots
	          // TODO: should we filter only on visible fields (i.e. ones in this.fields) by default?
	          // TODO: allow for searching on specific fields/key, this could be combined with the previous TODO
	          // TODO: give recToString extra options for filtering (i.e. passing the fields definition
	          //      and a reference to $scopedSlots)
	          //
	          // Generated function returns true if the crieria matches part of the serialzed data, otherwise false
	          // We set lastIndex = 0 on regex in case someone uses the /g global flag
	          regexp.lastIndex = 0;
	          return regexp.test(recToString(item));
	        }; // Return the generated function


	        return fn;
	      },
	      clearSelected: function clearSelected() {
	        var hasSelection = this.selectedRows.reduce(function (prev, v) {
	          return prev || v;
	        }, false);

	        if (hasSelection) {
	          this.lastRowClicked = -1;
	          this.selectedRows = [];
	          this.$emit('row-selected', []);
	        }
	      },
	      // Event handlers
	      rowClicked: function rowClicked(e, item, index) {
	        var _this3 = this;

	        if (this.stopIfBusy(e)) {
	          // If table is busy (via provider) then don't propagate
	          return;
	        } else if (filterEvent(e)) {
	          // clicked on a non-disabled control so ignore
	          return;
	        }

	        if (e.type === 'keydown') {
	          // If the click was generated by space or enter, stop page scroll
	          e.stopPropagation();
	          e.preventDefault();
	        }

	        if (this.selectable) {
	          var selected = !this.selectedRows[index];

	          switch (this.selectMode) {
	            case 'single':
	              this.selectedRows = [];
	              break;

	            case 'range':
	              if (this.lastRowClicked >= 0 && e.shiftKey) {
	                // range
	                for (var idx = Math.min(this.lastRowClicked, index); idx <= Math.max(this.lastRowClicked, index); idx++) {
	                  this.selectedRows[idx] = true;
	                }

	                selected = true;
	              } else {
	                if (!(e.ctrlKey || e.metaKey)) {
	                  // clear range selection if any
	                  this.selectedRows = [];
	                  selected = true;
	                }

	                this.lastRowClicked = selected ? index : -1;
	              }

	              break;
	          }

	          this.$set(this.selectedRows, index, selected);
	          var items = [];
	          this.selectedRows.forEach(function (v, idx) {
	            if (v) {
	              items.push(_this3.computedItems[idx]);
	            }
	          });
	          this.$emit('row-selected', items);
	        }

	        this.$emit('row-clicked', item, index, e);
	      },
	      middleMouseRowClicked: function middleMouseRowClicked(e, item, index) {
	        if (this.stopIfBusy(e)) {
	          // If table is busy (via provider) then don't propagate
	          return;
	        }

	        this.$emit('row-middle-clicked', item, index, e);
	      },
	      rowDblClicked: function rowDblClicked(e, item, index) {
	        if (this.stopIfBusy(e)) {
	          // If table is busy (via provider) then don't propagate
	          return;
	        } else if (filterEvent(e)) {
	          // clicked on a non-disabled control so ignore
	          return;
	        }

	        this.$emit('row-dblclicked', item, index, e);
	      },
	      rowHovered: function rowHovered(e, item, index) {
	        if (this.stopIfBusy(e)) {
	          // If table is busy (via provider) then don't propagate
	          return;
	        }

	        this.$emit('row-hovered', item, index, e);
	      },
	      rowUnhovered: function rowUnhovered(e, item, index) {
	        if (this.stopIfBusy(e)) {
	          // If table is busy (via provider) then don't propagate
	          return;
	        }

	        this.$emit('row-unhovered', item, index, e);
	      },
	      rowContextmenu: function rowContextmenu(e, item, index) {
	        if (this.stopIfBusy(e)) {
	          // If table is busy (via provider) then don't propagate
	          return;
	        }

	        this.$emit('row-contextmenu', item, index, e);
	      },
	      headClicked: function headClicked(e, field) {
	        var _this4 = this;

	        if (this.stopIfBusy(e)) {
	          // If table is busy (via provider) then don't propagate
	          return;
	        } else if (filterEvent(e)) {
	          // clicked on a non-disabled control so ignore
	          return;
	        }

	        e.stopPropagation();
	        e.preventDefault();
	        var sortChanged = false;

	        var toggleLocalSortDesc = function toggleLocalSortDesc() {
	          var sortDirection = field.sortDirection || _this4.sortDirection;

	          if (sortDirection === 'asc') {
	            _this4.localSortDesc = false;
	          } else if (sortDirection === 'desc') {
	            _this4.localSortDesc = true;
	          }
	        };

	        if (field.sortable) {
	          if (field.key === this.localSortBy) {
	            // Change sorting direction on current column
	            this.localSortDesc = !this.localSortDesc;
	          } else {
	            // Start sorting this column ascending
	            this.localSortBy = field.key;
	            toggleLocalSortDesc();
	          }

	          sortChanged = true;
	        } else if (this.localSortBy && !this.noSortReset) {
	          this.localSortBy = null;
	          toggleLocalSortDesc();
	          sortChanged = true;
	        }

	        this.$emit('head-clicked', field.key, field, e);

	        if (sortChanged) {
	          // Sorting parameters changed
	          this.$emit('sort-changed', this.context);
	        }
	      },
	      stopIfBusy: function stopIfBusy(evt) {
	        if (this.computedBusy) {
	          // If table is busy (via provider) then don't propagate
	          evt.preventDefault();
	          evt.stopPropagation();
	          return true;
	        }

	        return false;
	      },
	      // Exposed method(s)
	      refresh: function refresh() {
	        this.$off('refreshed', this.refresh);

	        if (this.computedBusy) {
	          // Can't force an update when forced busy by user (busy prop === true)
	          if (this.localBusy && this.hasProvider) {
	            // But if provider running (localBusy), re-schedule refresh once `refreshed` emitted
	            this.$on('refreshed', this.refresh);
	          }
	        } else {
	          this.clearSelected();

	          if (this.hasProvider) {
	            this.$nextTick(this._providerUpdate);
	          } else {
	            this.localItems = isArray(this.items) ? this.items.slice() : [];
	          }
	        }
	      },
	      // Provider related methods
	      _providerSetLocal: function _providerSetLocal(items) {
	        this.localItems = isArray(items) ? items.slice() : [];
	        this.localBusy = false;
	        this.$emit('refreshed'); // New root emit

	        if (this.id) {
	          this.emitOnRoot('bv::table::refreshed', this.id);
	        }
	      },
	      _providerUpdate: function _providerUpdate() {
	        // Refresh the provider function items.
	        if (!this.hasProvider) {
	          // Do nothing if no provider
	          return;
	        } // If table is busy, wait until refereshed before calling again


	        if (this.computedBusy) {
	          // Schedule a new refresh once `refreshed` is emitted
	          this.$nextTick(this.refresh);
	          return;
	        } // Set internal busy state


	        this.localBusy = true; // Call provider function with context and optional callback after DOM is fully updated

	        this.$nextTick(function () {
	          var _this5 = this;

	          try {
	            // Call provider function passing it the context and optional callback
	            var data = this.items(this.context, this._providerSetLocal);

	            if (data && data.then && typeof data.then === 'function') {
	              // Provider returned Promise
	              data.then(function (items) {
	                // Provider resolved with items
	                _this5._providerSetLocal(items);
	              });
	            } else if (isArray(data)) {
	              // Provider returned Array data
	              this._providerSetLocal(data);
	            } else if (this.items.length !== 2) {
	              // Check number of arguments provider function requested
	              // Provider not using callback (didn't request second argument), so we clear
	              // busy state as most likely there was an error in the provider function

	              /* istanbul ignore next */
	              warn("b-table provider function didn't request calback and did not return a promise or data");
	              /* istanbul ignore next */

	              this.localBusy = false;
	            }
	          } catch (e)
	          /* istanbul ignore next */
	          {
	            // Provider function borked on us, so we spew out a warning
	            // and clear the busy state
	            warn("b-table provider function error [".concat(e.name, "] ").concat(e.message));
	            this.localBusy = false;
	            this.$off('refreshed', this.refresh);
	          }
	        });
	      }
	    },
	    render: function render(h) {
	      var _this6 = this;

	      var $slots = this.$slots;
	      var $scoped = this.$scopedSlots;
	      var fields = this.computedFields;
	      var items = this.computedItems;
	      var tableStriped = this.striped;
	      var hasRowClickHandler = this.$listeners['row-clicked'] || this.selectable; // Build the caption

	      var caption = h(false);
	      var captionId = null;

	      if (this.caption || this.captionHtml || $slots['table-caption']) {
	        captionId = this.isStacked ? this.safeId('_caption_') : null;
	        var data = {
	          key: 'caption',
	          id: captionId,
	          class: this.captionClasses
	        };

	        if (!$slots['table-caption']) {
	          data.domProps = htmlOrText(this.captionHtml, this.caption);
	        }

	        caption = h('caption', data, $slots['table-caption']);
	      } // Build the colgroup


	      var colgroup = h(false);

	      if (this.hasNormalizedSlot('table-colgroup')) {
	        colgroup = h('colgroup', {
	          key: 'colgroup'
	        }, this.normalizeSlot('table-colgroup', {
	          columns: fields.length,
	          fields: fields
	        }));
	      } // factory function for thead and tfoot cells (th's)


	      var makeHeadCells = function makeHeadCells() {
	        var isFoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	        return fields.map(function (field, colIndex) {
	          var ariaLabel = '';

	          if (!field.label.trim() && !field.headerTitle) {
	            // In case field's label and title are empty/blank
	            // We need to add a hint about what the column is about for non-dighted users
	            ariaLabel = toStartCaseStr(field.key);
	          }

	          var ariaLabelSorting = field.sortable ? _this6.localSortDesc && _this6.localSortBy === field.key ? _this6.labelSortAsc : _this6.labelSortDesc : null; // Assemble the aria-label

	          ariaLabel = [ariaLabel, ariaLabelSorting].filter(function (a) {
	            return a;
	          }).join(': ') || null;
	          var ariaSort = field.sortable && _this6.localSortBy === field.key ? _this6.localSortDesc ? 'descending' : 'ascending' : field.sortable ? 'none' : null;
	          var data = {
	            key: field.key,
	            class: _this6.fieldClasses(field),
	            style: field.thStyle || {},
	            attrs: {
	              tabindex: field.sortable ? '0' : null,
	              abbr: field.headerAbbr || null,
	              title: field.headerTitle || null,
	              scope: isFoot ? null : 'col',
	              'aria-colindex': String(colIndex + 1),
	              'aria-label': ariaLabel,
	              'aria-sort': ariaSort
	            },
	            on: {
	              click: function click(evt) {
	                _this6.headClicked(evt, field);
	              },
	              keydown: function keydown(evt) {
	                var keyCode = evt.keyCode;

	                if (keyCode === KeyCodes.ENTER || keyCode === KeyCodes.SPACE) {
	                  _this6.headClicked(evt, field);
	                }
	              }
	            }
	          };
	          var fieldScope = {
	            label: field.label,
	            column: field.key,
	            field: field
	          };
	          var slot = isFoot && _this6.hasNormalizedSlot("FOOT_".concat(field.key)) ? _this6.normalizeSlot("FOOT_".concat(field.key), fieldScope) : _this6.normalizeSlot("HEAD_".concat(field.key), fieldScope);

	          if (slot) {
	            slot = [slot];
	          } else {
	            data.domProps = htmlOrText(field.labelHtml, field.label);
	          }

	          return h('th', data, slot);
	        });
	      }; // Build the thead


	      var thead = h(false);

	      if (this.isStacked !== true) {
	        // If in always stacked mode (this.isStacked === true), then we don't bother rendering the thead
	        var theadChildren = [];

	        if (this.hasNormalizedSlot('thead-top')) {
	          theadChildren.push(this.normalizeSlot('thead-top', {
	            columns: fields.length,
	            fields: fields
	          }));
	        } else {
	          theadChildren.push(h(false));
	        }

	        theadChildren.push(h('tr', {
	          class: this.theadTrClass
	        }, makeHeadCells(false)));
	        thead = h('thead', {
	          key: 'thead',
	          class: this.headClasses
	        }, theadChildren);
	      } // Build the tfoot


	      var tfoot = h(false);

	      if (this.footClone && this.isStacked !== true) {
	        // If in always stacked mode (this.isStacked === true), then we don't bother rendering the tfoot
	        tfoot = h('tfoot', {
	          key: 'tfoot',
	          class: this.footClasses
	        }, [h('tr', {
	          class: this.tfootTrClass
	        }, makeHeadCells(true))]);
	      } // Prepare the tbody rows


	      var rows = []; // Add static Top Row slot (hidden in visibly stacked mode as we can't control the data-label)
	      // If in always stacked mode, we don't bother rendering the row

	      if (this.hasNormalizedSlot('top-row') && this.isStacked !== true) {
	        rows.push(h('tr', {
	          key: 'top-row',
	          staticClass: 'b-table-top-row',
	          class: [typeof this.tbodyTrClass === 'function' ? this.tbodyTrClass(null, 'row-top') : this.tbodyTrClass]
	        }, [this.normalizeSlot('top-row', {
	          columns: fields.length,
	          fields: fields
	        })]));
	      } else {
	        rows.push(h(false));
	      } // Add the item data rows or the busy slot


	      if ($slots['table-busy'] && this.computedBusy) {
	        // Show the busy slot
	        var trAttrs = {
	          role: this.isStacked ? 'row' : null
	        };
	        var tdAttrs = {
	          colspan: String(fields.length),
	          role: this.isStacked ? 'cell' : null
	        };
	        rows.push(h('tr', {
	          key: 'table-busy-slot',
	          staticClass: 'b-table-busy-slot',
	          class: [typeof this.tbodyTrClass === 'function' ? this.tbodyTrClass(null, 'table-busy') : this.tbodyTrClass],
	          attrs: trAttrs
	        }, [h('td', {
	          attrs: tdAttrs
	        }, [$slots['table-busy']])]));
	      } else {
	        // Show the rows
	        items.forEach(function (item, rowIndex) {
	          var detailsSlot = $scoped['row-details'];
	          var rowShowDetails = Boolean(item._showDetails && detailsSlot);
	          var rowSelected = _this6.selectedRows[rowIndex]; // Details ID needed for aria-describedby when details showing

	          var detailsId = rowShowDetails ? _this6.safeId("_details_".concat(rowIndex, "_")) : null;

	          var toggleDetailsFn = function toggleDetailsFn() {
	            if (detailsSlot) {
	              _this6.$set(item, '_showDetails', !item._showDetails);
	            }
	          }; // For each item data field in row


	          var tds = fields.map(function (field, colIndex) {
	            var formatted = _this6.getFormattedValue(item, field);

	            var data = {
	              // For the Vue key, we concatinate the column index and field key (as field keys can be duplicated)
	              key: "row-".concat(rowIndex, "-cell-").concat(colIndex, "-").concat(field.key),
	              class: _this6.tdClasses(field, item),
	              attrs: _this6.tdAttrs(field, item, colIndex),
	              domProps: {}
	            };
	            var childNodes;

	            if ($scoped[field.key]) {
	              childNodes = [$scoped[field.key]({
	                item: item,
	                index: rowIndex,
	                field: field,
	                unformatted: get(item, field.key, ''),
	                value: formatted,
	                toggleDetails: toggleDetailsFn,
	                detailsShowing: Boolean(item._showDetails),
	                rowSelected: Boolean(rowSelected)
	              })];

	              if (_this6.isStacked) {
	                // We wrap in a DIV to ensure rendered as a single cell when visually stacked!
	                childNodes = [h('div', {}, [childNodes])];
	              }
	            } else {
	              if (_this6.isStacked) {
	                // We wrap in a DIV to ensure rendered as a single cell when visually stacked!
	                childNodes = [h('div', toString(formatted))];
	              } else {
	                // Non stacked
	                childNodes = toString(formatted);
	              }
	            } // Render either a td or th cell


	            return h(field.isRowHeader ? 'th' : 'td', data, childNodes);
	          }); // Calculate the row number in the dataset (indexed from 1)

	          var ariaRowIndex = null;

	          if (_this6.currentPage && _this6.perPage && _this6.perPage > 0) {
	            ariaRowIndex = String((_this6.currentPage - 1) * _this6.perPage + rowIndex + 1);
	          } // Create a unique :key to help ensure that sub components are re-rendered rather than
	          // re-used, which can cause issues. If a primary key is not provided we use the rendered
	          // rows index within the tbody.
	          // See: https://github.com/bootstrap-vue/bootstrap-vue/issues/2410


	          var primaryKey = _this6.primaryKey;
	          var rowKey = primaryKey && item[primaryKey] !== undefined && item[primaryKey] !== null ? toString$1(item[primaryKey]) : String(rowIndex); // If primary key is provided, use it to generate a unique ID on each tbody > tr
	          // In the format of '{tableId}__row_{primaryKeyValue}'

	          var rowId = primaryKey && item[primaryKey] !== undefined && item[primaryKey] !== null ? _this6.safeId("_row_".concat(item[primaryKey])) : null; // Assemble and add the row

	          rows.push(h('tr', {
	            key: "__b-table-row-".concat(rowKey, "__"),
	            class: [_this6.rowClasses(item), _defineProperty({
	              'b-table-has-details': rowShowDetails,
	              'b-row-selected': rowSelected
	            }, "".concat(_this6.dark ? 'bg' : 'table', "-").concat(_this6.selectedVariant), rowSelected && _this6.selectedVariant)],
	            attrs: {
	              id: rowId,
	              tabindex: hasRowClickHandler ? '0' : null,
	              'data-pk': rowId ? String(item[primaryKey]) : null,
	              'aria-describedby': detailsId,
	              'aria-owns': detailsId,
	              'aria-rowindex': ariaRowIndex,
	              'aria-selected': _this6.selectable ? rowSelected ? 'true' : 'false' : null,
	              role: _this6.isStacked ? 'row' : null
	            },
	            on: {
	              // TODO: only instatiate handlers if we have registered listeners
	              auxclick: function auxclick(evt) {
	                if (evt.which === 2) {
	                  _this6.middleMouseRowClicked(evt, item, rowIndex);
	                }
	              },
	              click: function click(evt) {
	                _this6.rowClicked(evt, item, rowIndex);
	              },
	              keydown: function keydown(evt) {
	                var keyCode = evt.keyCode;

	                if (keyCode === KeyCodes.ENTER || keyCode === KeyCodes.SPACE) {
	                  if (evt.target && evt.target.tagName === 'TR' && evt.target === document.activeElement) {
	                    _this6.rowClicked(evt, item, rowIndex);
	                  }
	                }
	              },
	              contextmenu: function contextmenu(evt) {
	                _this6.rowContextmenu(evt, item, rowIndex);
	              },
	              // Note: these events are not accessibility friendly
	              dblclick: function dblclick(evt) {
	                _this6.rowDblClicked(evt, item, rowIndex);
	              },
	              mouseenter: function mouseenter(evt) {
	                _this6.rowHovered(evt, item, rowIndex);
	              },
	              mouseleave: function mouseleave(evt) {
	                _this6.rowUnhovered(evt, item, rowIndex);
	              }
	            }
	          }, tds)); // Row Details slot

	          if (rowShowDetails) {
	            var _tdAttrs = {
	              colspan: String(fields.length)
	            };
	            var _trAttrs = {
	              id: detailsId
	            };

	            if (_this6.isStacked) {
	              _tdAttrs['role'] = 'cell';
	              _trAttrs['role'] = 'row';
	            }

	            var details = h('td', {
	              attrs: _tdAttrs
	            }, [detailsSlot({
	              item: item,
	              index: rowIndex,
	              fields: fields,
	              toggleDetails: toggleDetailsFn
	            })]);

	            if (tableStriped) {
	              // Add a hidden row to keep table row striping consistent when details showing
	              rows.push(h('tr', {
	                key: "__b-table-details-".concat(rowIndex, "-stripe__"),
	                staticClass: 'd-none',
	                attrs: {
	                  'aria-hidden': 'true'
	                }
	              }));
	            }

	            rows.push(h('tr', {
	              key: "__b-table-details-".concat(rowIndex, "__"),
	              staticClass: 'b-table-details',
	              class: [typeof _this6.tbodyTrClass === 'function' ? _this6.tbodyTrClass(item, 'row-details') : _this6.tbodyTrClass],
	              attrs: _trAttrs
	            }, [details]));
	          } else if (detailsSlot) {
	            // Only add the placeholder if a the table has a row-details slot defined (but not shown)
	            rows.push(h(false));

	            if (tableStriped) {
	              // add extra placeholder if table is striped
	              rows.push(h(false));
	            }
	          }
	        });
	      } // Empty Items / Empty Filtered Row slot


	      if (this.showEmpty && (!items || items.length === 0) && !($slots['table-busy'] && this.computedBusy)) {
	        var empty = this.normalizeSlot(this.isFiltered ? 'emptyfiltered' : 'empty', {
	          emptyFilteredHtml: this.emptyFilteredHtml,
	          emptyFilteredText: this.emptyFilteredText,
	          emptyHtml: this.emptyHtml,
	          emptyText: this.emptyText,
	          fields: fields,
	          items: items
	        });

	        if (!empty) {
	          empty = h('div', {
	            class: ['text-center', 'my-2'],
	            domProps: this.isFiltered ? htmlOrText(this.emptyFilteredHtml, this.emptyFilteredText) : htmlOrText(this.emptyHtml, this.emptyText)
	          });
	        }

	        empty = h('td', {
	          attrs: {
	            colspan: String(fields.length),
	            role: this.isStacked ? 'cell' : null
	          }
	        }, [h('div', {
	          attrs: {
	            role: 'alert',
	            'aria-live': 'polite'
	          }
	        }, [empty])]);
	        rows.push(h('tr', {
	          key: '__b-table-empty-row__',
	          staticClass: 'b-table-empty-row',
	          class: [typeof this.tbodyTrClass === 'function' ? this.tbodyTrClass(null, 'row-empty') : this.tbodyTrClass],
	          attrs: this.isStacked ? {
	            role: 'row'
	          } : {}
	        }, [empty]));
	      } else {
	        rows.push(h(false));
	      } // Static bottom row slot (hidden in visibly stacked mode as we can't control the data-label)
	      // If in always stacked mode, we don't bother rendering the row


	      if (this.hasNormalizedSlot('bottom-row') && this.isStacked !== true) {
	        rows.push(h('tr', {
	          key: '__b-table-bottom-row__',
	          staticClass: 'b-table-bottom-row',
	          class: [typeof this.tbodyTrClass === 'function' ? this.tbodyTrClass(null, 'row-bottom') : this.tbodyTrClass]
	        }, this.normalizeSlot('bottom-row', {
	          columns: fields.length,
	          fields: fields
	        })));
	      } else {
	        rows.push(h(false));
	      } // Is tbody transition enabled


	      var isTransGroup = this.tbodyTransitionProps || this.tbodyTransitionHandlers;
	      var tbodyProps = {};
	      var tbodyOn = {};

	      if (isTransGroup) {
	        tbodyOn = this.tbodyTransitionHandlers || {};
	        tbodyProps = _objectSpread({}, this.tbodyTransitionProps || {}, {
	          tag: 'tbody'
	        });
	      } // Assemble the rows into the tbody


	      var tbody = h(isTransGroup ? 'transition-group' : 'tbody', {
	        props: tbodyProps,
	        on: tbodyOn,
	        class: this.bodyClasses,
	        attrs: this.isStacked ? {
	          role: 'rowgroup'
	        } : {}
	      }, rows); // Assemble table

	      var table = h('table', {
	        key: 'b-table',
	        staticClass: 'table b-table',
	        class: this.tableClasses,
	        attrs: _objectSpread({
	          // We set aria-rowcount before merging in $attrs, in case user has supplied their own
	          'aria-rowcount': this.filteredItems.length > items.length ? String(this.filteredItems.length) : null
	        }, this.$attrs, {
	          // Now we can override any $attrs here
	          id: this.safeId(),
	          role: this.isStacked ? 'table' : null,
	          'aria-multiselectable': this.selectable ? this.selectMode === 'single' ? 'false' : 'true' : null,
	          'aria-busy': this.computedBusy ? 'true' : 'false',
	          'aria-colcount': String(fields.length),
	          'aria-describedby': [// Preserve user supplied aria-describedby, if provided in $attrs
	          (this.$attrs || {})['aria-describedby'], captionId].filter(function (a) {
	            return a;
	          }).join(' ') || null
	        })
	      }, [caption, colgroup, thead, tfoot, tbody]); // Add responsive wrapper if needed and return table

	      return this.isResponsive ? h('div', {
	        key: 'b-table-responsive',
	        class: this.responsiveClass
	      }, [table]) : table;
	    }
	  };

	  var components$y = {
	    BTable: BTable
	  };
	  var index$v = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$y);
	    }
	  };

	  // @vue/component

	  var BTabButtonHelper = {
	    name: 'BTabButtonHelper',
	    inject: {
	      bvTabs: {
	        default: function _default()
	        /* istanbul ignore next */
	        {
	          return {};
	        }
	      }
	    },
	    props: {
	      // Reference to the child b-tab instance
	      tab: {
	        default: null
	      },
	      tabs: {
	        type: Array,
	        default: function _default() {
	          return [];
	        }
	      },
	      id: {
	        type: String,
	        default: null
	      },
	      controls: {
	        type: String,
	        default: null
	      },
	      tabIndex: {
	        type: Number,
	        default: null
	      },
	      posInSet: {
	        type: Number,
	        default: null
	      },
	      setSize: {
	        type: Number,
	        default: null
	      },
	      noKeyNav: {
	        type: Boolean,
	        default: false
	      }
	    },
	    methods: {
	      focus: function focus() {
	        if (this.$refs && this.$refs.link && this.$refs.link.focus) {
	          this.$refs.link.focus();
	        }
	      },
	      handleEvt: function handleEvt(evt) {
	        function stop() {
	          evt.preventDefault();
	          evt.stopPropagation();
	        }

	        if (this.tab.disabled) {
	          /* istanbul ignore next */
	          return;
	        }

	        var type = evt.type;
	        var key = evt.keyCode;
	        var shift = evt.shiftKey;

	        if (type === 'click') {
	          stop();
	          this.$emit('click', evt);
	        } else if (type === 'keydown' && !this.noKeyNav && key === KeyCodes.SPACE) {
	          // In keynav mode, SPACE press will also trigger a click/select
	          stop();
	          this.$emit('click', evt);
	        } else if (type === 'keydown' && !this.noKeyNav) {
	          // For keyboard navigation
	          if (key === KeyCodes.UP || key === KeyCodes.LEFT || key === KeyCodes.HOME) {
	            stop();

	            if (shift || key === KeyCodes.HOME) {
	              this.$emit('first', evt);
	            } else {
	              this.$emit('prev', evt);
	            }
	          } else if (key === KeyCodes.DOWN || key === KeyCodes.RIGHT || key === KeyCodes.END) {
	            stop();

	            if (shift || key === KeyCodes.END) {
	              this.$emit('last', evt);
	            } else {
	              this.$emit('next', evt);
	            }
	          }
	        }
	      }
	    },
	    render: function render(h) {
	      var link = h(BLink, {
	        ref: 'link',
	        staticClass: 'nav-link',
	        class: [{
	          active: this.tab.localActive && !this.tab.disabled,
	          disabled: this.tab.disabled
	        }, this.tab.titleLinkClass],
	        props: {
	          href: this.tab.href,
	          // To be deprecated to always be '#'
	          disabled: this.tab.disabled
	        },
	        attrs: {
	          role: 'tab',
	          id: this.id,
	          // Roving tab index when keynav enabled
	          tabindex: this.tabIndex,
	          'aria-selected': this.tab.localActive && !this.tab.disabled ? 'true' : 'false',
	          'aria-setsize': this.setSize,
	          'aria-posinset': this.posInSet,
	          'aria-controls': this.controls
	        },
	        on: {
	          click: this.handleEvt,
	          keydown: this.handleEvt
	        }
	      }, [this.tab.$slots.title || this.tab.title]);
	      return h('li', {
	        staticClass: 'nav-item',
	        class: [this.tab.titleItemClass],
	        attrs: {
	          role: 'presentation'
	        }
	      }, [link]);
	    }
	  }; // Filter function to filter out disabled tabs

	  function notDisabled(tab) {
	    return !tab.disabled;
	  } // @vue/component


	  var BTabs = {
	    name: 'BTabs',
	    mixins: [idMixin],
	    provide: function provide() {
	      return {
	        bvTabs: this
	      };
	    },
	    props: {
	      tag: {
	        type: String,
	        default: 'div'
	      },
	      card: {
	        type: Boolean,
	        default: false
	      },
	      small: {
	        type: Boolean,
	        default: false
	      },
	      pills: {
	        type: Boolean,
	        default: false
	      },
	      vertical: {
	        type: Boolean,
	        default: false
	      },
	      bottom: {
	        type: Boolean,
	        default: false
	      },
	      end: {
	        // Synonym for 'bottom'
	        type: Boolean,
	        default: false
	      },
	      noFade: {
	        type: Boolean,
	        default: false
	      },
	      noNavStyle: {
	        type: Boolean,
	        default: false
	      },
	      noKeyNav: {
	        type: Boolean,
	        default: false
	      },
	      lazy: {
	        // This prop is sniffed by the tab child
	        type: Boolean,
	        default: false
	      },
	      contentClass: {
	        type: [String, Array, Object],
	        default: null
	      },
	      navClass: {
	        type: [String, Array, Object],
	        default: null
	      },
	      navWrapperClass: {
	        type: [String, Array, Object],
	        default: null
	      },
	      value: {
	        // v-model
	        type: Number,
	        default: null
	      }
	    },
	    data: function data() {
	      var tabIdx = parseInt(this.value, 10);
	      tabIdx = isNaN(tabIdx) ? -1 : tabIdx;
	      return {
	        // Index of current tab
	        currentTab: tabIdx,
	        // Array of direct child b-tab instances
	        tabs: []
	      };
	    },
	    computed: {
	      fade: function fade() {
	        // This computed prop is sniffed by the tab child
	        return !this.noFade;
	      },
	      navStyle: function navStyle() {
	        return this.pills ? 'pills' : 'tabs';
	      }
	    },
	    watch: {
	      currentTab: function currentTab(val, old) {
	        var index = -1; // Ensure only one tab is active at most

	        this.tabs.forEach(function (tab, idx) {
	          if (val === idx && !tab.disabled) {
	            tab.localActive = true;
	            index = idx;
	          } else {
	            tab.localActive = false;
	          }
	        }); // Update the v-model

	        this.$emit('input', index);
	      },
	      value: function value(val, old) {
	        if (val !== old) {
	          val = parseInt(val, 10);
	          val = isNaN(val) ? -1 : val;
	          old = parseInt(old, 10) || 0;
	          var tabs = this.tabs;

	          if (tabs[val] && !tabs[val].disabled) {
	            this.currentTab = val;
	          } else {
	            // Try next or prev tabs
	            if (val < old) {
	              this.previousTab();
	            } else {
	              this.nextTab();
	            }
	          }
	        }
	      }
	    },
	    created: function created() {
	      var _this = this;

	      var tabIdx = parseInt(this.value, 10);
	      this.currentTab = isNaN(tabIdx) ? -1 : tabIdx; // Create private non-reactive prop

	      this._bvObserver = null; // For SSR and to make sure only a single tab is shown on mount
	      // We wrap this in a `$nextTick()` to ensure the child tabs have been created

	      this.$nextTick(function () {
	        _this.updateTabs();
	      });
	    },
	    mounted: function mounted() {
	      var _this2 = this;

	      this.$nextTick(function () {
	        // Call updateTabs jsut in case....
	        _this2.updateTabs(); // Observe Child changes so we can update list of tabs


	        _this2.setObserver(true);
	      });
	    },
	    deactivated: function deactivated()
	    /* istanbul ignore next */
	    {
	      this.setObserver(false);
	    },
	    activated: function activated()
	    /* istanbul ignore next */
	    {
	      var _this3 = this;

	      var tabIdx = parseInt(this.value, 10);
	      this.currentTab = isNaN(tabIdx) ? -1 : tabIdx;
	      this.$nextTick(function () {
	        _this3.updateTabs();

	        _this3.setObserver(true);
	      });
	    },
	    beforeDestroy: function beforeDestroy()
	    /* istanbul ignore next */
	    {
	      this.setObserver(false);
	    },
	    methods: {
	      setObserver: function setObserver(on) {
	        if (on) {
	          // Make sure no existing observer running
	          this.setObserver(false); // Watch for changes to b-tab sub components

	          this._bvObserver = observeDOM(this.$refs.tabsContainer, this.updateTabs.bind(this), {
	            childList: true,
	            subtree: false,
	            attributes: true,
	            attributeFilter: ['style', 'class']
	          });
	        } else {
	          if (this._bvObserver && this._bvObserver.disconnect) {
	            this._bvObserver.disconnect();
	          }

	          this._bvObserver = null;
	        }
	      },
	      getTabs: function getTabs() {
	        return (this.$slots.default || []).map(function (vnode) {
	          return vnode.componentInstance;
	        }).filter(function (tab) {
	          return tab && tab._isTab;
	        });
	      },
	      // Update list of b-tab children
	      updateTabs: function updateTabs() {
	        // Probe tabs
	        var tabs = this.getTabs(); // Find *last* active non-disabled tab in current tabs
	        // We trust tab state over currentTab, in case tabs were added/removed/re-ordered

	        var tabIndex = tabs.indexOf(tabs.slice().reverse().find(function (tab) {
	          return tab.localActive && !tab.disabled;
	        })); // Else try setting to currentTab

	        if (tabIndex < 0) {
	          var currentTab = this.currentTab;

	          if (currentTab >= tabs.length) {
	            // Handle last tab being removed, so find the last non-disabled tab
	            tabIndex = tabs.indexOf(tabs.slice().reverse().find(notDisabled));
	          } else if (tabs[currentTab] && !tabs[currentTab].disabled) {
	            // Current tab is not disabled
	            tabIndex = currentTab;
	          }
	        } // Else find *first* non-disabled tab in current tabs


	        if (tabIndex < 0) {
	          tabIndex = tabs.indexOf(tabs.find(notDisabled));
	        } // Set the current tab state to active


	        tabs.forEach(function (tab, idx) {
	          // tab.localActive = idx === tabIndex && !tab.disabled
	          tab.localActive = false;
	        });

	        if (tabs[tabIndex]) {
	          tabs[tabIndex].localActive = true;
	        } // Update the array of tab children


	        this.tabs = tabs; // Set the currentTab index (can be -1 if no non-disabled tabs)

	        this.currentTab = tabIndex;
	      },
	      // Find a button that controls a tab, given the tab reference
	      // Returns the button vm instance
	      getButtonForTab: function getButtonForTab(tab) {
	        return (this.$refs.buttons || []).find(function (btn) {
	          return btn.tab === tab;
	        });
	      },
	      // Force a button to re-render it's content, given a b-tab instance
	      // Called by b-tab on update()
	      updateButton: function updateButton(tab) {
	        var button = this.getButtonForTab(tab);

	        if (button && button.$forceUpdate) {
	          button.$forceUpdate();
	        }
	      },
	      // Activate a tab given a b-tab instance
	      // Also accessed by b-tab
	      activateTab: function activateTab(tab) {
	        var result = false;

	        if (tab) {
	          var index = this.tabs.indexOf(tab);

	          if (!tab.disabled && index > -1) {
	            result = true;
	            this.currentTab = index;
	          }
	        }

	        if (!result) {
	          // Couldn't set tab, so ensure v-model is set to this.currentTab

	          /* istanbul ignore next: should rarely happen */
	          this.$emit('input', this.currentTab);
	        }

	        return result;
	      },
	      // Deactivate a tab given a b-tab instance
	      // Accessed by b-tab
	      deactivateTab: function deactivateTab(tab) {
	        if (tab) {
	          // Find first non-disabled tab that isn't the one being deactivated
	          // If no available tabs, then don't deactivate current tab
	          return this.activateTab(this.tabs.filter(function (t) {
	            return t !== tab;
	          }).find(notDisabled));
	        } else {
	          // No tab specified

	          /* istanbull ignore next: should never happen */
	          return false;
	        }
	      },
	      // Focus a tab button given it's b-tab instance
	      focusButton: function focusButton(tab) {
	        var _this4 = this;

	        // Wrap in nextTick to ensure DOM has completed rendering/updating before focusing
	        this.$nextTick(function () {
	          var button = _this4.getButtonForTab(tab);

	          if (button && button.focus) {
	            button.focus();
	          }
	        });
	      },
	      // Emit a click event on a specified b-tab component instance
	      emitTabClick: function emitTabClick(tab, evt) {
	        if (evt && evt instanceof Event && tab && tab.$emit && !tab.disabled) {
	          tab.$emit('click', evt);
	        }
	      },
	      // Click Handler
	      clickTab: function clickTab(tab, evt) {
	        this.activateTab(tab);
	        this.emitTabClick(tab, evt);
	      },
	      // Move to first non-disabled tab
	      firstTab: function firstTab(focus) {
	        var tab = this.tabs.find(notDisabled);

	        if (this.activateTab(tab) && focus) {
	          this.focusButton(tab);
	          this.emitTabClick(tab, focus);
	        }
	      },
	      // Move to previous non-disabled tab
	      previousTab: function previousTab(focus) {
	        var currentIndex = Math.max(this.currentTab, 0);
	        var tab = this.tabs.slice(0, currentIndex).reverse().find(notDisabled);

	        if (this.activateTab(tab) && focus) {
	          this.focusButton(tab);
	          this.emitTabClick(tab, focus);
	        }
	      },
	      // Move to next non-disabled tab
	      nextTab: function nextTab(focus) {
	        var currentIndex = Math.max(this.currentTab, -1);
	        var tab = this.tabs.slice(currentIndex + 1).find(notDisabled);

	        if (this.activateTab(tab) && focus) {
	          this.focusButton(tab);
	          this.emitTabClick(tab, focus);
	        }
	      },
	      // Move to last non-disabled tab
	      lastTab: function lastTab(focus) {
	        var tab = this.tabs.slice().reverse().find(notDisabled);

	        if (this.activateTab(tab) && focus) {
	          this.focusButton(tab);
	          this.emitTabClick(tab, focus);
	        }
	      }
	    },
	    render: function render(h) {
	      var _this5 = this,
	          _ref;

	      var tabs = this.tabs; // Currently active tab

	      var activeTab = tabs.find(function (tab) {
	        return tab.localActive && !tab.disabled;
	      }); // Tab button to allow focusing when no active tab found (keynav only)

	      var fallbackTab = tabs.find(function (tab) {
	        return !tab.disabled;
	      }); // For each <b-tab> found create the tab buttons

	      var buttons = tabs.map(function (tab, index) {
	        var tabIndex = null; // Ensure at least one tab button is focusable when keynav enabled (if possible)

	        if (!_this5.noKeyNav) {
	          // Buttons are not in tab index unless active, or a fallback tab
	          tabIndex = -1;

	          if (activeTab === tab || !activeTab && fallbackTab === tab) {
	            // Place tab button in tab sequence
	            tabIndex = null;
	          }
	        }

	        return h(BTabButtonHelper, {
	          key: tab._uid || index,
	          ref: 'buttons',
	          // Needed to make this.$refs.buttons an array
	          refInFor: true,
	          props: {
	            tab: tab,
	            tabs: tabs,
	            id: tab.controlledBy || (_this5.tab && _this5.tab.safeId ? _this5.tab.safeId("_BV_tab_button_") : null),
	            controls: _this5.tab && _this5.tab.safeId ? _this5.tab.safeId() : null,
	            tabIndex: tabIndex,
	            setSize: tabs.length,
	            posInSet: index + 1,
	            noKeyNav: _this5.noKeyNav
	          },
	          on: {
	            click: function click(evt) {
	              _this5.clickTab(tab, evt);
	            },
	            first: _this5.firstTab,
	            prev: _this5.previousTab,
	            next: _this5.nextTab,
	            last: _this5.lastTab
	          }
	        });
	      }); // Nav 'button' wrapper

	      var navs = h('ul', {
	        ref: 'navs',
	        class: ['nav', (_ref = {}, _defineProperty(_ref, "nav-".concat(this.navStyle), !this.noNavStyle), _defineProperty(_ref, "card-header-".concat(this.navStyle), this.card && !this.vertical), _defineProperty(_ref, 'card-header', this.card && this.vertical), _defineProperty(_ref, 'h-100', this.card && this.vertical), _defineProperty(_ref, 'flex-column', this.vertical), _defineProperty(_ref, 'border-bottom-0', this.vertical), _defineProperty(_ref, 'rounded-0', this.vertical), _defineProperty(_ref, "small", this.small), _ref), this.navClass],
	        attrs: {
	          role: 'tablist',
	          id: this.safeId('_BV_tab_controls_')
	        }
	      }, [buttons, this.$slots.tabs]);
	      navs = h('div', {
	        key: 'bv-tabs-navs',
	        class: [{
	          'card-header': this.card && !this.vertical && !(this.end || this.bottom),
	          'card-footer': this.card && !this.vertical && (this.end || this.bottom),
	          'col-auto': this.vertical
	        }, this.navWrapperClass]
	      }, [navs]);
	      var empty = h(false);

	      if (!tabs || tabs.length === 0) {
	        empty = h('div', {
	          key: 'empty-tab',
	          class: ['tab-pane', 'active', {
	            'card-body': this.card
	          }]
	        }, this.$slots.empty);
	      } // Main content section
	      // TODO: This container should be a helper component


	      var content = h('div', {
	        ref: 'tabsContainer',
	        key: 'bv-tabs-container',
	        staticClass: 'tab-content',
	        class: [{
	          col: this.vertical
	        }, this.contentClass],
	        attrs: {
	          id: this.safeId('_BV_tab_container_')
	        }
	      }, [this.$slots.default, empty]); // Render final output

	      return h(this.tag, {
	        staticClass: 'tabs',
	        class: {
	          row: this.vertical,
	          'no-gutters': this.vertical && this.card
	        },
	        attrs: {
	          id: this.safeId()
	        }
	      }, [this.end || this.bottom ? content : h(false), [navs], this.end || this.bottom ? h(false) : content]);
	    }
	  };

	  var BTab = {
	    name: 'BTab',
	    mixins: [idMixin],
	    inject: {
	      bvTabs: {
	        default: function _default() {
	          return {
	            // Don't set a tab index if not rendered inside `<b-tabs>`
	            noKeyNav: true
	          };
	        }
	      }
	    },
	    props: {
	      active: {
	        type: Boolean,
	        default: false
	      },
	      tag: {
	        type: String,
	        default: 'div'
	      },
	      buttonId: {
	        type: String,
	        default: ''
	      },
	      title: {
	        type: String,
	        default: ''
	      },
	      titleItemClass: {
	        // Sniffed by tabs.js and added to nav 'li.nav-item'
	        type: [String, Array, Object],
	        default: null
	      },
	      titleLinkClass: {
	        // Sniffed by tabs.js and added to nav 'a.nav-link'
	        type: [String, Array, Object],
	        default: null
	      },
	      headHtml: {
	        // Is this actually ever used?
	        type: String,
	        default: null
	      },
	      disabled: {
	        type: Boolean,
	        default: false
	      },
	      noBody: {
	        type: Boolean,
	        default: false
	      },
	      href: {
	        // This should be deprecated, as tabs are not navigation (URL) based
	        // <b-nav> + <b-card> + <router-view>/<nuxt-child> should be used instead
	        // And we dont support router-links here
	        type: String,
	        default: '#'
	      },
	      lazy: {
	        type: Boolean,
	        default: false
	      }
	    },
	    data: function data() {
	      return {
	        localActive: this.active && !this.disabled,
	        show: false
	      };
	    },
	    computed: {
	      tabClasses: function tabClasses() {
	        return [this.bvTabs.card && !this.noBody ? 'card-body' : '', this.show ? 'show' : '', this.computedFade ? 'fade' : '', this.disabled ? 'disabled' : '', this.localActive ? 'active' : ''];
	      },
	      controlledBy: function controlledBy() {
	        return this.buttonId || this.safeId('__BV_tab_button__');
	      },
	      computedFade: function computedFade() {
	        return this.bvTabs.fade || false;
	      },
	      computedLazy: function computedLazy() {
	        return this.bvTabs.lazy || this.lazy;
	      },
	      _isTab: function _isTab() {
	        // For parent sniffing of child
	        return true;
	      }
	    },
	    watch: {
	      localActive: function localActive(newVal, oldVal) {
	        // Make 'active' prop work with `.sync` modifier
	        this.$emit('update:active', newVal);
	      },
	      active: function active(newVal, oldVal) {
	        if (newVal !== oldVal) {
	          if (newVal) {
	            // If activated post mount
	            this.activate();
	          } else {
	            if (!this.deactivate()) {
	              // Tab couldn't be deactivated, so we reset the synced active prop
	              // Deactivation will fail if no other tabs to activate.
	              this.$emit('update:active', this.localActive);
	            }
	          }
	        }
	      },
	      disabled: function disabled(newVal, oldVal) {
	        if (newVal !== oldVal) {
	          if (newVal && this.localActive && this.bvTabs.firstTab) {
	            this.localActive = false;
	            this.bvTabs.firstTab();
	          }
	        }
	      }
	    },
	    mounted: function mounted() {
	      // Initially show on mount if active and not disabled
	      this.show = this.localActive;
	    },
	    updated: function updated() {
	      // Force the tab button content to update (since slots are not reactive)
	      // Only done if we have a title slot, as the title prop is reactive
	      if (this.$slots.title && this.bvTabs.updateButton) {
	        this.bvTabs.updateButton(this);
	      }
	    },
	    methods: {
	      // Transition handlers
	      beforeEnter: function beforeEnter() {
	        var _this = this;

	        // change opacity (add 'show' class) 1 frame after display
	        // otherwise css transition won't happen
	        requestAF(function () {
	          _this.show = true;
	        });
	      },
	      beforeLeave: function beforeLeave() {
	        // Remove the 'show' class
	        this.show = false;
	      },
	      // Public methods
	      activate: function activate() {
	        if (this.bvTabs.activateTab && !this.disabled) {
	          return this.bvTabs.activateTab(this);
	        } else {
	          // Not inside a b-tabs component or tab is disabled
	          return false;
	        }
	      },
	      deactivate: function deactivate() {
	        if (this.bvTabs.deactivateTab && this.localActive) {
	          return this.bvTabs.deactivateTab(this);
	        } else {
	          // Not inside a b-tabs component or not active to begin with
	          return false;
	        }
	      }
	    },
	    render: function render(h) {
	      var content = h(this.tag, {
	        ref: 'panel',
	        staticClass: 'tab-pane',
	        class: this.tabClasses,
	        directives: [// TODO: convert to style object in render
	        {
	          name: 'show',
	          rawName: 'v-show',
	          value: this.localActive,
	          expression: 'localActive'
	        }],
	        attrs: {
	          role: 'tabpanel',
	          id: this.safeId(),
	          tabindex: this.localActive && !this.bvTabs.noKeyNav ? '0' : null,
	          'aria-hidden': this.localActive ? 'false' : 'true',
	          'aria-expanded': this.localActive ? 'true' : 'false',
	          'aria-labelledby': this.controlledBy || null
	        }
	      }, // Render content lazily if requested
	      [this.localActive || !this.computedLazy ? this.$slots.default : h(false)]);
	      return h('transition', {
	        props: {
	          mode: 'out-in',
	          // Disable use of built-in transition classes
	          'enter-class': '',
	          'enter-active-class': '',
	          'enter-to-class': '',
	          'leave-class': '',
	          'leave-active-class': '',
	          'leave-to-class': ''
	        },
	        on: {
	          beforeEnter: this.beforeEnter,
	          beforeLeave: this.beforeLeave
	        }
	      }, [content]);
	    }
	  };

	  var components$z = {
	    BTabs: BTabs,
	    BTab: BTab
	  };
	  var index$w = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$z);
	    }
	  };

	  var BTooltip = {
	    name: 'BTooltip',
	    mixins: [toolpopMixin],
	    props: {
	      title: {
	        type: String,
	        default: ''
	      },
	      triggers: {
	        type: [String, Array],
	        default: 'hover focus'
	      },
	      placement: {
	        type: String,
	        default: 'top'
	      }
	    },
	    data: function data() {
	      return {};
	    },
	    methods: {
	      createToolpop: function createToolpop() {
	        // getTarget is in toolpop mixin
	        var target = this.getTarget();

	        if (target) {
	          this._toolpop = new ToolTip(target, this.getConfig(), this.$root);
	        } else {
	          this._toolpop = null;
	          warn("b-tooltip: 'target' element not found!");
	        }

	        return this._toolpop;
	      }
	    },
	    render: function render(h) {
	      return h('div', {
	        class: ['d-none'],
	        style: {
	          display: 'none'
	        },
	        attrs: {
	          'aria-hidden': true
	        }
	      }, [h('div', {
	        ref: 'title'
	      }, this.$slots.default)]);
	    }
	  };

	  var inBrowser$3 = typeof window !== 'undefined' && typeof document !== 'undefined'; // Key which we use to store tooltip object on element

	  var BVTT = '__BV_ToolTip__'; // Valid event triggers

	  var validTriggers$1 = {
	    focus: true,
	    hover: true,
	    click: true,
	    blur: true // Build a ToolTip config based on bindings (if any)
	    // Arguments and modifiers take precedence over passed value config object

	    /* istanbul ignore next: not easy to test */

	  };

	  function parseBindings$1(bindings) {
	    // We start out with a blank config
	    var config = {}; // Process bindings.value

	    if (typeof bindings.value === 'string') {
	      // Value is tooltip content (html optionally supported)
	      config.title = bindings.value;
	    } else if (typeof bindings.value === 'function') {
	      // Title generator function
	      config.title = bindings.value;
	    } else if (_typeof(bindings.value) === 'object') {
	      // Value is config object, so merge
	      config = _objectSpread({}, config, bindings.value);
	    } // If Argument, assume element ID of container element


	    if (bindings.arg) {
	      // Element ID specified as arg. We must prepend '#' to become a CSS selector
	      config.container = "#".concat(bindings.arg);
	    } // Process modifiers


	    keys(bindings.modifiers).forEach(function (mod) {
	      if (/^html$/.test(mod)) {
	        // Title allows HTML
	        config.html = true;
	      } else if (/^nofade$/.test(mod)) {
	        // no animation
	        config.animation = false;
	      } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {
	        // placement of tooltip
	        config.placement = mod;
	      } else if (/^(window|viewport)$/.test(mod)) {
	        // bounday of tooltip
	        config.boundary = mod;
	      } else if (/^d\d+$/.test(mod)) {
	        // delay value
	        var delay = parseInt(mod.slice(1), 10) || 0;

	        if (delay) {
	          config.delay = delay;
	        }
	      } else if (/^o-?\d+$/.test(mod)) {
	        // offset value. Negative allowed
	        var offset = parseInt(mod.slice(1), 10) || 0;

	        if (offset) {
	          config.offset = offset;
	        }
	      }
	    }); // Special handling of event trigger modifiers Trigger is a space separated list

	    var selectedTriggers = {}; // parse current config object trigger

	    var triggers = typeof config.trigger === 'string' ? config.trigger.trim().split(/\s+/) : [];
	    triggers.forEach(function (trigger) {
	      if (validTriggers$1[trigger]) {
	        selectedTriggers[trigger] = true;
	      }
	    }); // Parse Modifiers for triggers

	    keys(validTriggers$1).forEach(function (trigger) {
	      if (bindings.modifiers[trigger]) {
	        selectedTriggers[trigger] = true;
	      }
	    }); // Sanitize triggers

	    config.trigger = keys(selectedTriggers).join(' ');

	    if (config.trigger === 'blur') {
	      // Blur by itself is useless, so convert it to 'focus'
	      config.trigger = 'focus';
	    }

	    if (!config.trigger) {
	      // remove trigger config
	      delete config.trigger;
	    }

	    return config;
	  } //
	  // Add or Update tooltip on our element
	  //

	  /* istanbul ignore next: not easy to test */


	  function applyBVTT(el, bindings, vnode) {
	    if (!inBrowser$3) {
	      return;
	    }

	    if (!Popper) {
	      // Popper is required for tooltips to work
	      warn('v-b-tooltip: Popper.js is required for tooltips to work');
	      return;
	    }

	    if (el[BVTT]) {
	      el[BVTT].updateConfig(parseBindings$1(bindings));
	    } else {
	      el[BVTT] = new ToolTip(el, parseBindings$1(bindings), vnode.context.$root);
	    }
	  } //
	  // Remove tooltip on our element
	  //

	  /* istanbul ignore next: not easy to test */


	  function removeBVTT(el) {
	    if (!inBrowser$3) {
	      return;
	    }

	    if (el[BVTT]) {
	      el[BVTT].destroy();
	      el[BVTT] = null;
	      delete el[BVTT];
	    }
	  }
	  /*
	   * Export our directive
	   */

	  /* istanbul ignore next: not easy to test */


	  var bTooltip = {
	    bind: function bind(el, bindings, vnode) {
	      applyBVTT(el, bindings, vnode);
	    },
	    inserted: function inserted(el, bindings, vnode) {
	      applyBVTT(el, bindings, vnode);
	    },
	    update: function update(el, bindings, vnode) {
	      if (bindings.value !== bindings.oldValue) {
	        applyBVTT(el, bindings, vnode);
	      }
	    },
	    componentUpdated: function componentUpdated(el, bindings, vnode) {
	      if (bindings.value !== bindings.oldValue) {
	        applyBVTT(el, bindings, vnode);
	      }
	    },
	    unbind: function unbind(el) {
	      removeBVTT(el);
	    }
	  };

	  var directives$3 = {
	    bTooltip: bTooltip
	  };
	  var tooltipDirectivePlugin = {
	    install: function install(Vue) {
	      registerDirectives(Vue, directives$3);
	    }
	  };

	  var components$A = {
	    BTooltip: BTooltip
	  };
	  var index$x = {
	    install: function install(Vue) {
	      registerComponents(Vue, components$A);
	      Vue.use(tooltipDirectivePlugin);
	    }
	  };



	  var componentPlugins = /*#__PURE__*/Object.freeze({
	    Alert: index,
	    Badge: index$1,
	    Breadcrumb: index$2,
	    Button: index$3,
	    ButtonToolbar: index$5,
	    ButtonGroup: index$4,
	    Card: index$7,
	    Carousel: index$8,
	    Collapse: collapsePlugin,
	    Dropdown: dropdownPlugin,
	    Embed: index$a,
	    Form: index$b,
	    FormGroup: index$c,
	    FormInput: index$f,
	    FormTextarea: index$g,
	    FormFile: index$h,
	    FormCheckbox: index$d,
	    FormRadio: index$e,
	    FormSelect: index$i,
	    Image: index$j,
	    InputGroup: index$6,
	    Jumbotron: index$k,
	    Layout: index$9,
	    Link: index$l,
	    ListGroup: index$m,
	    Media: index$n,
	    Modal: index$o,
	    Nav: navPlugin,
	    Navbar: index$p,
	    Pagination: index$q,
	    PaginationNav: index$r,
	    Popover: index$s,
	    Progress: index$t,
	    Spinner: index$u,
	    Table: index$v,
	    Tabs: index$w,
	    Tooltip: index$x
	  });

	  /*
	   * Constants / Defaults
	   */

	  var NAME$2 = 'v-b-scrollspy';
	  var ACTIVATE_EVENT = 'bv::scrollspy::activate';
	  var Default = {
	    element: 'body',
	    offset: 10,
	    method: 'auto',
	    throttle: 75
	  };
	  var DefaultType = {
	    element: '(string|element|component)',
	    offset: 'number',
	    method: 'string',
	    throttle: 'number'
	  };
	  var ClassName$2 = {
	    DROPDOWN_ITEM: 'dropdown-item',
	    ACTIVE: 'active'
	  };
	  var Selector$4 = {
	    ACTIVE: '.active',
	    NAV_LIST_GROUP: '.nav, .list-group',
	    NAV_LINKS: '.nav-link',
	    NAV_ITEMS: '.nav-item',
	    LIST_ITEMS: '.list-group-item',
	    DROPDOWN: '.dropdown, .dropup',
	    DROPDOWN_ITEMS: '.dropdown-item',
	    DROPDOWN_TOGGLE: '.dropdown-toggle'
	  };
	  var OffsetMethod = {
	    OFFSET: 'offset',
	    POSITION: 'position' // HREFs must start with # but can be === '#', or start with '#/' or '#!' (which can be router links)

	  };
	  var HREF_REGEX = /^#[^/!]+/; // Transition Events

	  var TransitionEndEvents$2 = ['webkitTransitionEnd', 'transitionend', 'otransitionend', 'oTransitionEnd']; // Options for events

	  var EventOptions$3 = {
	    passive: true,
	    capture: false
	    /*
	     * Utility Methods
	     */
	    // Better var type detection

	  };

	  function toType(obj)
	  /* istanbul ignore next: not easy to test */
	  {
	    return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
	  } // Check config properties for expected types


	  function typeCheckConfig(componentName, config, configTypes)
	  /* istanbul ignore next: not easy to test */
	  {
	    for (var property in configTypes) {
	      if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
	        var expectedTypes = configTypes[property];
	        var value = config[property];
	        var valueType = value && isElement(value) ? 'element' : toType(value); // handle Vue instances

	        valueType = value && value._isVue ? 'component' : valueType;

	        if (!new RegExp(expectedTypes).test(valueType)) {
	          warn("".concat(componentName, ": Option \"").concat(property, "\" provided type \"").concat(valueType, "\" but expected type \"").concat(expectedTypes, "\""));
	        }
	      }
	    }
	  }
	  /*
	   * ------------------------------------------------------------------------
	   * Class Definition
	   * ------------------------------------------------------------------------
	   */

	  /* istanbul ignore next: not easy to test */


	  var ScrollSpy
	  /* istanbul ignore next: not easy to test */
	  =
	  /*#__PURE__*/
	  function () {
	    function ScrollSpy(element, config, $root) {
	      _classCallCheck(this, ScrollSpy);

	      // The element we activate links in
	      this.$el = element;
	      this.$scroller = null;
	      this.$selector = [Selector$4.NAV_LINKS, Selector$4.LIST_ITEMS, Selector$4.DROPDOWN_ITEMS].join(',');
	      this.$offsets = [];
	      this.$targets = [];
	      this.$activeTarget = null;
	      this.$scrollHeight = 0;
	      this.$resizeTimeout = null;
	      this.$obs_scroller = null;
	      this.$obs_targets = null;
	      this.$root = $root || null;
	      this.$config = null;
	      this.updateConfig(config);
	    }

	    _createClass(ScrollSpy, [{
	      key: "updateConfig",
	      value: function updateConfig(config, $root) {
	        if (this.$scroller) {
	          // Just in case out scroll element has changed
	          this.unlisten();
	          this.$scroller = null;
	        }

	        var cfg = _objectSpread({}, this.constructor.Default, config);

	        if ($root) {
	          this.$root = $root;
	        }

	        typeCheckConfig(this.constructor.Name, cfg, this.constructor.DefaultType);
	        this.$config = cfg;

	        if (this.$root) {
	          var self = this;
	          this.$root.$nextTick(function () {
	            self.listen();
	          });
	        } else {
	          this.listen();
	        }
	      }
	    }, {
	      key: "dispose",
	      value: function dispose() {
	        this.unlisten();
	        clearTimeout(this.$resizeTimeout);
	        this.$resizeTimeout = null;
	        this.$el = null;
	        this.$config = null;
	        this.$scroller = null;
	        this.$selector = null;
	        this.$offsets = null;
	        this.$targets = null;
	        this.$activeTarget = null;
	        this.$scrollHeight = null;
	      }
	    }, {
	      key: "listen",
	      value: function listen() {
	        var _this = this;

	        var scroller = this.getScroller();

	        if (scroller && scroller.tagName !== 'BODY') {
	          eventOn(scroller, 'scroll', this, EventOptions$3);
	        }

	        eventOn(window, 'scroll', this, EventOptions$3);
	        eventOn(window, 'resize', this, EventOptions$3);
	        eventOn(window, 'orientationchange', this, EventOptions$3);
	        TransitionEndEvents$2.forEach(function (evtName) {
	          eventOn(window, evtName, _this, EventOptions$3);
	        });
	        this.setObservers(true); // Scedule a refresh

	        this.handleEvent('refresh');
	      }
	    }, {
	      key: "unlisten",
	      value: function unlisten() {
	        var _this2 = this;

	        var scroller = this.getScroller();
	        this.setObservers(false);

	        if (scroller && scroller.tagName !== 'BODY') {
	          eventOff(scroller, 'scroll', this, EventOptions$3);
	        }

	        eventOff(window, 'scroll', this, EventOptions$3);
	        eventOff(window, 'resize', this, EventOptions$3);
	        eventOff(window, 'orientationchange', this, EventOptions$3);
	        TransitionEndEvents$2.forEach(function (evtName) {
	          eventOff(window, evtName, _this2, EventOptions$3);
	        });
	      }
	    }, {
	      key: "setObservers",
	      value: function setObservers(on) {
	        var _this3 = this;

	        // We observe both the scroller for content changes, and the target links
	        if (this.$obs_scroller) {
	          this.$obs_scroller.disconnect();
	          this.$obs_scroller = null;
	        }

	        if (this.$obs_targets) {
	          this.$obs_targets.disconnect();
	          this.$obs_targets = null;
	        }

	        if (on) {
	          this.$obs_targets = observeDOM(this.$el, function () {
	            _this3.handleEvent('mutation');
	          }, {
	            subtree: true,
	            childList: true,
	            attributes: true,
	            attributeFilter: ['href']
	          });
	          this.$obs_scroller = observeDOM(this.getScroller(), function () {
	            _this3.handleEvent('mutation');
	          }, {
	            subtree: true,
	            childList: true,
	            characterData: true,
	            attributes: true,
	            attributeFilter: ['id', 'style', 'class']
	          });
	        }
	      } // general event handler

	    }, {
	      key: "handleEvent",
	      value: function handleEvent(evt) {
	        var type = typeof evt === 'string' ? evt : evt.type;
	        var self = this;

	        function resizeThrottle() {
	          if (!self.$resizeTimeout) {
	            self.$resizeTimeout = setTimeout(function () {
	              self.refresh();
	              self.process();
	              self.$resizeTimeout = null;
	            }, self.$config.throttle);
	          }
	        }

	        if (type === 'scroll') {
	          if (!this.$obs_scroller) {
	            // Just in case we are added to the DOM before the scroll target is
	            // We re-instantiate our listeners, just in case
	            this.listen();
	          }

	          this.process();
	        } else if (/(resize|orientationchange|mutation|refresh)/.test(type)) {
	          // Postpone these events by throttle time
	          resizeThrottle();
	        }
	      } // Refresh the list of target links on the element we are applied to

	    }, {
	      key: "refresh",
	      value: function refresh() {
	        var _this4 = this;

	        var scroller = this.getScroller();

	        if (!scroller) {
	          return;
	        }

	        var autoMethod = scroller !== scroller.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;
	        var method = this.$config.method === 'auto' ? autoMethod : this.$config.method;
	        var methodFn = method === OffsetMethod.POSITION ? position : offset;
	        var offsetBase = method === OffsetMethod.POSITION ? this.getScrollTop() : 0;
	        this.$offsets = [];
	        this.$targets = [];
	        this.$scrollHeight = this.getScrollHeight(); // Find all the unique link href's

	        selectAll(this.$selector, this.$el).map(function (link) {
	          return getAttr(link, 'href');
	        }).filter(function (href) {
	          return HREF_REGEX.test(href || '');
	        }).map(function (href) {
	          var el = select(href, scroller);

	          if (isVisible(el)) {
	            return {
	              offset: parseInt(methodFn(el).top, 10) + offsetBase,
	              target: href
	            };
	          }

	          return null;
	        }).filter(function (item) {
	          return item;
	        }).sort(function (a, b) {
	          return a.offset - b.offset;
	        }).reduce(function (memo, item) {
	          // record only unique targets/offfsets
	          if (!memo[item.target]) {
	            _this4.$offsets.push(item.offset);

	            _this4.$targets.push(item.target);

	            memo[item.target] = true;
	          }

	          return memo;
	        }, {});
	        return this;
	      } // Handle activating/clearing

	    }, {
	      key: "process",
	      value: function process() {
	        var scrollTop = this.getScrollTop() + this.$config.offset;
	        var scrollHeight = this.getScrollHeight();
	        var maxScroll = this.$config.offset + scrollHeight - this.getOffsetHeight();

	        if (this.$scrollHeight !== scrollHeight) {
	          this.refresh();
	        }

	        if (scrollTop >= maxScroll) {
	          var target = this.$targets[this.$targets.length - 1];

	          if (this.$activeTarget !== target) {
	            this.activate(target);
	          }

	          return;
	        }

	        if (this.$activeTarget && scrollTop < this.$offsets[0] && this.$offsets[0] > 0) {
	          this.$activeTarget = null;
	          this.clear();
	          return;
	        }

	        for (var i = this.$offsets.length; i--;) {
	          var isActiveTarget = this.$activeTarget !== this.$targets[i] && scrollTop >= this.$offsets[i] && (typeof this.$offsets[i + 1] === 'undefined' || scrollTop < this.$offsets[i + 1]);

	          if (isActiveTarget) {
	            this.activate(this.$targets[i]);
	          }
	        }
	      }
	    }, {
	      key: "getScroller",
	      value: function getScroller() {
	        if (this.$scroller) {
	          return this.$scroller;
	        }

	        var scroller = this.$config.element;

	        if (!scroller) {
	          return null;
	        } else if (isElement(scroller.$el)) {
	          scroller = scroller.$el;
	        } else if (typeof scroller === 'string') {
	          scroller = select(scroller);
	        }

	        if (!scroller) {
	          return null;
	        }

	        this.$scroller = scroller.tagName === 'BODY' ? window : scroller;
	        return this.$scroller;
	      }
	    }, {
	      key: "getScrollTop",
	      value: function getScrollTop() {
	        var scroller = this.getScroller();
	        return scroller === window ? scroller.pageYOffset : scroller.scrollTop;
	      }
	    }, {
	      key: "getScrollHeight",
	      value: function getScrollHeight() {
	        return this.getScroller().scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
	      }
	    }, {
	      key: "getOffsetHeight",
	      value: function getOffsetHeight() {
	        var scroller = this.getScroller();
	        return scroller === window ? window.innerHeight : getBCR(scroller).height;
	      }
	    }, {
	      key: "activate",
	      value: function activate(target) {
	        var _this5 = this;

	        this.$activeTarget = target;
	        this.clear(); // Grab the list of target links (<a href="{$target}">)

	        var links = selectAll(this.$selector.split(',').map(function (selector) {
	          return "".concat(selector, "[href=\"").concat(target, "\"]");
	        }).join(','), this.$el);
	        links.forEach(function (link) {
	          if (hasClass(link, ClassName$2.DROPDOWN_ITEM)) {
	            // This is a dropdown item, so find the .dropdown-toggle and set it's state
	            var dropdown = closest(Selector$4.DROPDOWN, link);

	            if (dropdown) {
	              _this5.setActiveState(select(Selector$4.DROPDOWN_TOGGLE, dropdown), true);
	            } // Also set this link's state


	            _this5.setActiveState(link, true);
	          } else {
	            // Set triggered link as active
	            _this5.setActiveState(link, true);

	            if (matches(link.parentElement, Selector$4.NAV_ITEMS)) {
	              // Handle nav-link inside nav-item, and set nav-item active
	              _this5.setActiveState(link.parentElement, true);
	            } // Set triggered links parents as active
	            // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor


	            var el = link;

	            while (el) {
	              el = closest(Selector$4.NAV_LIST_GROUP, el);
	              var sibling = el ? el.previousElementSibling : null;

	              if (matches(sibling, "".concat(Selector$4.NAV_LINKS, ", ").concat(Selector$4.LIST_ITEMS))) {
	                _this5.setActiveState(sibling, true);
	              } // Handle special case where nav-link is inside a nav-item


	              if (matches(sibling, Selector$4.NAV_ITEMS)) {
	                _this5.setActiveState(select(Selector$4.NAV_LINKS, sibling), true); // Add active state to nav-item as well


	                _this5.setActiveState(sibling, true);
	              }
	            }
	          }
	        }); // Signal event to via $root, passing ID of activaed target and reference to array of links

	        if (links && links.length > 0 && this.$root) {
	          this.$root.$emit(ACTIVATE_EVENT, target, links);
	        }
	      }
	    }, {
	      key: "clear",
	      value: function clear() {
	        var _this6 = this;

	        selectAll("".concat(this.$selector, ", ").concat(Selector$4.NAV_ITEMS), this.$el).filter(function (el) {
	          return hasClass(el, ClassName$2.ACTIVE);
	        }).forEach(function (el) {
	          return _this6.setActiveState(el, false);
	        });
	      }
	    }, {
	      key: "setActiveState",
	      value: function setActiveState(el, active) {
	        if (!el) {
	          return;
	        }

	        if (active) {
	          addClass(el, ClassName$2.ACTIVE);
	        } else {
	          removeClass(el, ClassName$2.ACTIVE);
	        }
	      }
	    }], [{
	      key: "Name",
	      get: function get() {
	        return NAME$2;
	      }
	    }, {
	      key: "Default",
	      get: function get() {
	        return Default;
	      }
	    }, {
	      key: "DefaultType",
	      get: function get() {
	        return DefaultType;
	      }
	    }]);

	    return ScrollSpy;
	  }();

	  var BVSS = '__BV_ScrollSpy__'; // Generate config from bindings

	  function makeConfig(binding)
	  /* istanbul ignore next: not easy to test */
	  {
	    var config = {}; // If Argument, assume element ID

	    if (binding.arg) {
	      // Element ID specified as arg. We must pre-pend #
	      config.element = '#' + binding.arg;
	    } // Process modifiers


	    keys(binding.modifiers).forEach(function (mod) {
	      if (/^\d+$/.test(mod)) {
	        // Offest value
	        config.offset = parseInt(mod, 10);
	      } else if (/^(auto|position|offset)$/.test(mod)) {
	        // Offset method
	        config.method = mod;
	      }
	    }); // Process value

	    if (typeof binding.value === 'string') {
	      // Value is a CSS ID or selector
	      config.element = binding.value;
	    } else if (typeof binding.value === 'number') {
	      // Value is offset
	      config.offset = Math.round(binding.value);
	    } else if (_typeof(binding.value) === 'object') {
	      // Value is config object
	      // Filter the object based on our supported config options
	      keys(binding.value).filter(function (k) {
	        return Boolean(ScrollSpy.DefaultType[k]);
	      }).forEach(function (k) {
	        config[k] = binding.value[k];
	      });
	    }

	    return config;
	  }

	  function addBVSS(el, binding, vnode)
	  /* istanbul ignore next: not easy to test */
	  {
	    if (isServer) {
	      return;
	    }

	    var cfg = makeConfig(binding);

	    if (!el[BVSS]) {
	      el[BVSS] = new ScrollSpy(el, cfg, vnode.context.$root);
	    } else {
	      el[BVSS].updateConfig(cfg, vnode.context.$root);
	    }

	    return el[BVSS];
	  }

	  function removeBVSS(el)
	  /* istanbul ignore next: not easy to test */
	  {
	    if (el[BVSS]) {
	      el[BVSS].dispose();
	      el[BVSS] = null;
	    }
	  }
	  /*
	   * Export our directive
	   */


	  var bScrollspy = {
	    bind: function bind(el, binding, vnode)
	    /* istanbul ignore next: not easy to test */
	    {
	      addBVSS(el, binding, vnode);
	    },
	    inserted: function inserted(el, binding, vnode)
	    /* istanbul ignore next: not easy to test */
	    {
	      addBVSS(el, binding, vnode);
	    },
	    update: function update(el, binding, vnode)
	    /* istanbul ignore next: not easy to test */
	    {
	      addBVSS(el, binding, vnode);
	    },
	    componentUpdated: function componentUpdated(el, binding, vnode)
	    /* istanbul ignore next: not easy to test */
	    {
	      addBVSS(el, binding, vnode);
	    },
	    unbind: function unbind(el)
	    /* istanbul ignore next: not easy to test */
	    {
	      if (isServer) {
	        return;
	      } // Remove scroll event listener on scrollElId


	      removeBVSS(el);
	    }
	  };

	  var directives$4 = {
	    bScrollspy: bScrollspy
	  };
	  var index$y = {
	    install: function install(Vue) {
	      registerDirectives(Vue, directives$4);
	    }
	  };



	  var directivePlugins = /*#__PURE__*/Object.freeze({
	    Toggle: toggleDirectivePlugin,
	    Modal: modalDirectivePlugin,
	    Scrollspy: index$y,
	    Tooltip: tooltipDirectivePlugin,
	    Popover: popoverDirectivePlugin
	  });

	  var VuePlugin = {
	    install: function install(Vue) {
	      // Register component plugins
	      for (var plugin in componentPlugins) {
	        Vue.use(componentPlugins[plugin]);
	      } // Register directive plugins


	      for (var _plugin in directivePlugins) {
	        Vue.use(directivePlugins[_plugin]);
	      }
	    }
	  };
	  vueUse(VuePlugin);

	  return VuePlugin;

	}));
	//# sourceMappingURL=bootstrap-vue.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(2));
		else if(typeof define === 'function' && define.amd)
			define(["vue"], factory);
		else if(typeof exports === 'object')
			exports["vue-notification"] = factory(require("vue"));
		else
			root["vue-notification"] = factory(root["vue"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_20__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 2);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports) {

	// this module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle

	module.exports = function normalizeComponent (
	  rawScriptExports,
	  compiledTemplate,
	  scopeId,
	  cssModules
	) {
	  var esModule
	  var scriptExports = rawScriptExports = rawScriptExports || {}

	  // ES6 modules interop
	  var type = typeof rawScriptExports.default
	  if (type === 'object' || type === 'function') {
	    esModule = rawScriptExports
	    scriptExports = rawScriptExports.default
	  }

	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports

	  // render functions
	  if (compiledTemplate) {
	    options.render = compiledTemplate.render
	    options.staticRenderFns = compiledTemplate.staticRenderFns
	  }

	  // scopedId
	  if (scopeId) {
	    options._scopeId = scopeId
	  }

	  // inject cssModules
	  if (cssModules) {
	    var computed = Object.create(options.computed || null)
	    Object.keys(cssModules).forEach(function (key) {
	      var module = cssModules[key]
	      computed[key] = function () { return module }
	    })
	    options.computed = computed
	  }

	  return {
	    esModule: esModule,
	    exports: scriptExports,
	    options: options
	  }
	}


	/***/ }),
	/* 1 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return events; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(20);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);

	var events = new __WEBPACK_IMPORTED_MODULE_0_vue___default.a();

	/***/ }),
	/* 2 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Notifications_vue__ = __webpack_require__(3);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Notifications_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__Notifications_vue__);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__events__ = __webpack_require__(1);
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };




	var Notify = {
	  install: function install(Vue) {
	    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    if (this.installed) {
	      return;
	    }

	    this.installed = true;
	    this.params = args;

	    Vue.component(args.componentName || 'notifications', __WEBPACK_IMPORTED_MODULE_0__Notifications_vue___default.a);

	    var notify = function notify(params) {
	      if (typeof params === 'string') {
	        params = { title: '', text: params };
	      }

	      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
	        __WEBPACK_IMPORTED_MODULE_1__events__["a" /* events */].$emit('add', params);
	      }
	    };

	    var name = args.name || 'notify';

	    Vue.prototype['$' + name] = notify;
	    Vue[name] = notify;
	  }
	};

	/* harmony default export */ __webpack_exports__["default"] = (Notify);

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {


	/* styles */
	__webpack_require__(17)

	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(5),
	  /* template */
	  __webpack_require__(15),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)

	module.exports = Component.exports


	/***/ }),
	/* 4 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });


	/* harmony default export */ __webpack_exports__["default"] = ({
	  name: 'CssGroup',
	  props: ['name']
	});

	/***/ }),
	/* 5 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(2);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__events__ = __webpack_require__(1);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(9);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__defaults__ = __webpack_require__(7);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__VelocityGroup_vue__ = __webpack_require__(13);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__VelocityGroup_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__VelocityGroup_vue__);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__CssGroup_vue__ = __webpack_require__(12);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__CssGroup_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__CssGroup_vue__);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__parser__ = __webpack_require__(8);
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }









	var STATE = {
	  IDLE: 0,
	  DESTROYED: 2
	};

	var Component = {
	  name: 'Notifications',
	  components: {
	    VelocityGroup: __WEBPACK_IMPORTED_MODULE_4__VelocityGroup_vue___default.a,
	    CssGroup: __WEBPACK_IMPORTED_MODULE_5__CssGroup_vue___default.a
	  },
	  props: {
	    group: {
	      type: String,
	      default: ''
	    },

	    width: {
	      type: [Number, String],
	      default: 300
	    },

	    reverse: {
	      type: Boolean,
	      default: false
	    },

	    position: {
	      type: [String, Array],
	      default: function _default() {
	        return __WEBPACK_IMPORTED_MODULE_3__defaults__["a" /* default */].position;
	      }
	    },

	    classes: {
	      type: String,
	      default: 'vue-notification'
	    },

	    animationType: {
	      type: String,
	      default: 'css',
	      validator: function validator(value) {
	        return value === 'css' || value === 'velocity';
	      }
	    },

	    animation: {
	      type: Object,
	      default: function _default() {
	        return __WEBPACK_IMPORTED_MODULE_3__defaults__["a" /* default */].velocityAnimation;
	      }
	    },

	    animationName: {
	      type: String,
	      default: __WEBPACK_IMPORTED_MODULE_3__defaults__["a" /* default */].cssAnimation
	    },

	    speed: {
	      type: Number,
	      default: 300
	    },

	    cooldown: {
	      type: Number,
	      default: 0
	    },

	    duration: {
	      type: Number,
	      default: 3000
	    },

	    delay: {
	      type: Number,
	      default: 0
	    },

	    max: {
	      type: Number,
	      default: Infinity
	    },

	    closeOnClick: {
	      type: Boolean,
	      default: true
	    }
	  },
	  data: function data() {
	    return {
	      list: [],
	      velocity: __WEBPACK_IMPORTED_MODULE_0__index__["default"].params.velocity
	    };
	  },
	  mounted: function mounted() {
	    __WEBPACK_IMPORTED_MODULE_1__events__["a" /* events */].$on('add', this.addItem);
	  },

	  computed: {
	    actualWidth: function actualWidth() {
	      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__parser__["a" /* default */])(this.width);
	    },
	    isVA: function isVA() {
	      return this.animationType === 'velocity';
	    },
	    componentName: function componentName() {
	      return this.isVA ? 'VelocityGroup' : 'CssGroup';
	    },
	    styles: function styles() {
	      var _listToDirection = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__["a" /* listToDirection */])(this.position),
	          x = _listToDirection.x,
	          y = _listToDirection.y;

	      var width = this.actualWidth.value;
	      var suffix = this.actualWidth.type;

	      var styles = _defineProperty({
	        width: width + suffix
	      }, y, '0px');

	      if (x === 'center') {
	        styles['left'] = 'calc(50% - ' + width / 2 + suffix + ')';
	      } else {
	        styles[x] = '0px';
	      }

	      return styles;
	    },
	    active: function active() {
	      return this.list.filter(function (v) {
	        return v.state !== STATE.DESTROYED;
	      });
	    },
	    botToTop: function botToTop() {
	      return this.styles.hasOwnProperty('bottom');
	    }
	  },
	  methods: {
	    addItem: function addItem(event) {
	      var _this = this;

	      event.group = event.group || '';

	      if (this.group !== event.group) {
	        return;
	      }

	      if (event.clean || event.clear) {
	        this.destroyAll();
	        return;
	      }

	      var duration = typeof event.duration === 'number' ? event.duration : this.duration;

	      var speed = typeof event.speed === 'number' ? event.speed : this.speed;

	      var title = event.title,
	          text = event.text,
	          type = event.type,
	          data = event.data;


	      var item = {
	        id: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__["b" /* Id */])(),
	        title: title,
	        text: text,
	        type: type,
	        state: STATE.IDLE,
	        speed: speed,
	        length: duration + 2 * speed,
	        data: data
	      };

	      if (duration >= 0) {
	        item.timer = setTimeout(function () {
	          _this.destroy(item);
	        }, item.length);
	      }

	      var direction = this.reverse ? !this.botToTop : this.botToTop;

	      var indexToDestroy = -1;

	      if (direction) {
	        this.list.push(item);

	        if (this.active.length > this.max) {
	          indexToDestroy = 0;
	        }
	      } else {
	        this.list.unshift(item);

	        if (this.active.length > this.max) {
	          indexToDestroy = this.active.length - 1;
	        }
	      }

	      if (indexToDestroy !== -1) {
	        this.destroy(this.active[indexToDestroy]);
	      }
	    },
	    notifyClass: function notifyClass(item) {
	      return ['vue-notification-template', this.classes, item.type];
	    },
	    notifyWrapperStyle: function notifyWrapperStyle(item) {
	      return this.isVA ? null : {
	        transition: 'all ' + item.speed + 'ms'
	      };
	    },
	    destroy: function destroy(item) {
	      clearTimeout(item.timer);
	      item.state = STATE.DESTROYED;

	      if (!this.isVA) {
	        this.clean();
	      }
	    },
	    destroyAll: function destroyAll() {
	      this.active.forEach(this.destroy);
	    },
	    getAnimation: function getAnimation(index, el) {
	      var animation = this.animation[index];

	      return typeof animation === 'function' ? animation.call(this, el) : animation;
	    },
	    enter: function enter(_ref) {
	      var el = _ref.el,
	          complete = _ref.complete;

	      var animation = this.getAnimation('enter', el);

	      this.velocity(el, animation, {
	        duration: this.speed,
	        complete: complete
	      });
	    },
	    leave: function leave(_ref2) {
	      var el = _ref2.el,
	          complete = _ref2.complete;

	      var animation = this.getAnimation('leave', el);

	      this.velocity(el, animation, {
	        duration: this.speed,
	        complete: complete
	      });
	    },
	    clean: function clean() {
	      this.list = this.list.filter(function (v) {
	        return v.state !== STATE.DESTROYED;
	      });
	    }
	  }
	};

	/* harmony default export */ __webpack_exports__["default"] = (Component);

	/***/ }),
	/* 6 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });


	/* harmony default export */ __webpack_exports__["default"] = ({
	  name: 'VelocityGroup',
	  methods: {
	    enter: function enter(el, complete) {
	      this.$emit('enter', { el: el, complete: complete });
	    },
	    leave: function leave(el, complete) {
	      this.$emit('leave', { el: el, complete: complete });
	    },
	    afterLeave: function afterLeave() {
	      this.$emit('afterLeave');
	    }
	  }
	});

	/***/ }),
	/* 7 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = ({
	  position: ['top', 'right'],
	  cssAnimation: 'vn-fade',
	  velocityAnimation: {
	    enter: function enter(el) {
	      var height = el.clientHeight;

	      return {
	        height: [height, 0],
	        opacity: [1, 0]
	      };
	    },
	    leave: {
	      height: 0,
	      opacity: [0, 1]
	    }
	  }
	});

	/***/ }),
	/* 8 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export parse */
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var floatRegexp = '[-+]?[0-9]*.?[0-9]+';

	var types = [{
	  name: 'px',
	  regexp: new RegExp('^' + floatRegexp + 'px$')
	}, {
	  name: '%',
	  regexp: new RegExp('^' + floatRegexp + '%$')
	}, {
	  name: 'px',
	  regexp: new RegExp('^' + floatRegexp + '$')
	}];

	var getType = function getType(value) {
	  if (value === 'auto') {
	    return {
	      type: value,
	      value: 0
	    };
	  }

	  for (var i = 0; i < types.length; i++) {
	    var type = types[i];
	    if (type.regexp.test(value)) {
	      return {
	        type: type.name,
	        value: parseFloat(value)
	      };
	    }
	  }

	  return {
	    type: '',
	    value: value
	  };
	};

	var parse = function parse(value) {
	  switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
	    case 'number':
	      return { type: 'px', value: value };
	    case 'string':
	      return getType(value);
	    default:
	      return { type: '', value: value };
	  }
	};

	/* harmony default export */ __webpack_exports__["a"] = (parse);

	/***/ }),
	/* 9 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Id; });
	/* unused harmony export split */
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return listToDirection; });
	var directions = {
	  x: ['left', 'center', 'right'],
	  y: ['top', 'bottom']
	};

	var Id = function (i) {
	  return function () {
	    return i++;
	  };
	}(0);

	var split = function split(value) {
	  if (typeof value !== 'string') {
	    return [];
	  }

	  return value.split(/\s+/gi).filter(function (v) {
	    return v;
	  });
	};

	var listToDirection = function listToDirection(value) {
	  if (typeof value === 'string') {
	    value = split(value);
	  }

	  var x = null;
	  var y = null;

	  value.forEach(function (v) {
	    if (directions.y.indexOf(v) !== -1) {
	      y = v;
	    }
	    if (directions.x.indexOf(v) !== -1) {
	      x = v;
	    }
	  });

	  return { x: x, y: y };
	};

	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(11)();
	// imports


	// module
	exports.push([module.i, ".notifications{display:block;position:fixed;z-index:5000}.notification-wrapper{display:block;overflow:hidden;width:100%;margin:0;padding:0}.notification-title{font-weight:600}.vue-notification-template{background:#fff}.vue-notification,.vue-notification-template{display:block;box-sizing:border-box;text-align:left}.vue-notification{font-size:12px;padding:10px;margin:0 5px 5px;color:#fff;background:#44a4fc;border-left:5px solid #187fe7}.vue-notification.warn{background:#ffb648;border-left-color:#f48a06}.vue-notification.error{background:#e54d42;border-left-color:#b82e24}.vue-notification.success{background:#68cd86;border-left-color:#42a85f}.vn-fade-enter-active,.vn-fade-leave-active,.vn-fade-move{transition:all .5s}.vn-fade-enter,.vn-fade-leave-to{opacity:0}", ""]);

	// exports


	/***/ }),
	/* 11 */
	/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {

	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(4),
	  /* template */
	  __webpack_require__(16),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)

	module.exports = Component.exports


	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {

	var Component = __webpack_require__(0)(
	  /* script */
	  __webpack_require__(6),
	  /* template */
	  __webpack_require__(14),
	  /* scopeId */
	  null,
	  /* cssModules */
	  null
	)

	module.exports = Component.exports


	/***/ }),
	/* 14 */
	/***/ (function(module, exports) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return _c('transition-group', {
	    attrs: {
	      "css": false
	    },
	    on: {
	      "enter": _vm.enter,
	      "leave": _vm.leave,
	      "after-leave": _vm.afterLeave
	    }
	  }, [_vm._t("default")], 2)
	},staticRenderFns: []}

	/***/ }),
	/* 15 */
	/***/ (function(module, exports) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return _c('div', {
	    staticClass: "notifications",
	    style: (_vm.styles)
	  }, [_c(_vm.componentName, {
	    tag: "component",
	    attrs: {
	      "name": _vm.animationName
	    },
	    on: {
	      "enter": _vm.enter,
	      "leave": _vm.leave,
	      "after-leave": _vm.clean
	    }
	  }, _vm._l((_vm.active), function(item) {
	    return _c('div', {
	      key: item.id,
	      staticClass: "notification-wrapper",
	      style: (_vm.notifyWrapperStyle(item)),
	      attrs: {
	        "data-id": item.id
	      }
	    }, [_vm._t("body", [_c('div', {
	      class: _vm.notifyClass(item),
	      on: {
	        "click": function($event) {
	          if (_vm.closeOnClick) { _vm.destroy(item) }
	        }
	      }
	    }, [(item.title) ? _c('div', {
	      staticClass: "notification-title",
	      domProps: {
	        "innerHTML": _vm._s(item.title)
	      }
	    }) : _vm._e(), _vm._v(" "), _c('div', {
	      staticClass: "notification-content",
	      domProps: {
	        "innerHTML": _vm._s(item.text)
	      }
	    })])], {
	      item: item,
	      close: function () { return _vm.destroy(item); }
	    })], 2)
	  }))], 1)
	},staticRenderFns: []}

	/***/ }),
	/* 16 */
	/***/ (function(module, exports) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return _c('transition-group', {
	    attrs: {
	      "name": _vm.name
	    }
	  }, [_vm._t("default")], 2)
	},staticRenderFns: []}

	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(10);
	if(typeof content === 'string') content = [[module.i, content, '']];
	if(content.locals) module.exports = content.locals;
	// add the styles to the DOM
	var update = __webpack_require__(18)("2901aeae", content, true);

	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {

	/*
	  MIT License http://www.opensource.org/licenses/mit-license.php
	  Author Tobias Koppers @sokra
	  Modified by Evan You @yyx990803
	*/

	var hasDocument = typeof document !== 'undefined'

	if (false) {
	  if (!hasDocument) {
	    throw new Error(
	    'vue-style-loader cannot be used in a non-browser environment. ' +
	    "Use { target: 'node' } in your Webpack config to indicate a server-rendering environment."
	  ) }
	}

	var listToStyles = __webpack_require__(19)

	/*
	type StyleObject = {
	  id: number;
	  parts: Array<StyleObjectPart>
	}

	type StyleObjectPart = {
	  css: string;
	  media: string;
	  sourceMap: ?string
	}
	*/

	var stylesInDom = {/*
	  [id: number]: {
	    id: number,
	    refs: number,
	    parts: Array<(obj?: StyleObjectPart) => void>
	  }
	*/}

	var head = hasDocument && (document.head || document.getElementsByTagName('head')[0])
	var singletonElement = null
	var singletonCounter = 0
	var isProduction = false
	var noop = function () {}

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase())

	module.exports = function (parentId, list, _isProduction) {
	  isProduction = _isProduction

	  var styles = listToStyles(parentId, list)
	  addStylesToDom(styles)

	  return function update (newList) {
	    var mayRemove = []
	    for (var i = 0; i < styles.length; i++) {
	      var item = styles[i]
	      var domStyle = stylesInDom[item.id]
	      domStyle.refs--
	      mayRemove.push(domStyle)
	    }
	    if (newList) {
	      styles = listToStyles(parentId, newList)
	      addStylesToDom(styles)
	    } else {
	      styles = []
	    }
	    for (var i = 0; i < mayRemove.length; i++) {
	      var domStyle = mayRemove[i]
	      if (domStyle.refs === 0) {
	        for (var j = 0; j < domStyle.parts.length; j++) {
	          domStyle.parts[j]()
	        }
	        delete stylesInDom[domStyle.id]
	      }
	    }
	  }
	}

	function addStylesToDom (styles /* Array<StyleObject> */) {
	  for (var i = 0; i < styles.length; i++) {
	    var item = styles[i]
	    var domStyle = stylesInDom[item.id]
	    if (domStyle) {
	      domStyle.refs++
	      for (var j = 0; j < domStyle.parts.length; j++) {
	        domStyle.parts[j](item.parts[j])
	      }
	      for (; j < item.parts.length; j++) {
	        domStyle.parts.push(addStyle(item.parts[j]))
	      }
	      if (domStyle.parts.length > item.parts.length) {
	        domStyle.parts.length = item.parts.length
	      }
	    } else {
	      var parts = []
	      for (var j = 0; j < item.parts.length; j++) {
	        parts.push(addStyle(item.parts[j]))
	      }
	      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }
	    }
	  }
	}

	function createStyleElement () {
	  var styleElement = document.createElement('style')
	  styleElement.type = 'text/css'
	  head.appendChild(styleElement)
	  return styleElement
	}

	function addStyle (obj /* StyleObjectPart */) {
	  var update, remove
	  var styleElement = document.querySelector('style[data-vue-ssr-id~="' + obj.id + '"]')

	  if (styleElement) {
	    if (isProduction) {
	      // has SSR styles and in production mode.
	      // simply do nothing.
	      return noop
	    } else {
	      // has SSR styles but in dev mode.
	      // for some reason Chrome can't handle source map in server-rendered
	      // style tags - source maps in <style> only works if the style tag is
	      // created and inserted dynamically. So we remove the server rendered
	      // styles and inject new ones.
	      styleElement.parentNode.removeChild(styleElement)
	    }
	  }

	  if (isOldIE) {
	    // use singleton mode for IE9.
	    var styleIndex = singletonCounter++
	    styleElement = singletonElement || (singletonElement = createStyleElement())
	    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)
	    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)
	  } else {
	    // use multi-style-tag mode in all other cases
	    styleElement = createStyleElement()
	    update = applyToTag.bind(null, styleElement)
	    remove = function () {
	      styleElement.parentNode.removeChild(styleElement)
	    }
	  }

	  update(obj)

	  return function updateStyle (newObj /* StyleObjectPart */) {
	    if (newObj) {
	      if (newObj.css === obj.css &&
	          newObj.media === obj.media &&
	          newObj.sourceMap === obj.sourceMap) {
	        return
	      }
	      update(obj = newObj)
	    } else {
	      remove()
	    }
	  }
	}

	var replaceText = (function () {
	  var textStore = []

	  return function (index, replacement) {
	    textStore[index] = replacement
	    return textStore.filter(Boolean).join('\n')
	  }
	})()

	function applyToSingletonTag (styleElement, index, remove, obj) {
	  var css = remove ? '' : obj.css

	  if (styleElement.styleSheet) {
	    styleElement.styleSheet.cssText = replaceText(index, css)
	  } else {
	    var cssNode = document.createTextNode(css)
	    var childNodes = styleElement.childNodes
	    if (childNodes[index]) styleElement.removeChild(childNodes[index])
	    if (childNodes.length) {
	      styleElement.insertBefore(cssNode, childNodes[index])
	    } else {
	      styleElement.appendChild(cssNode)
	    }
	  }
	}

	function applyToTag (styleElement, obj) {
	  var css = obj.css
	  var media = obj.media
	  var sourceMap = obj.sourceMap

	  if (media) {
	    styleElement.setAttribute('media', media)
	  }

	  if (sourceMap) {
	    // https://developer.chrome.com/devtools/docs/javascript-debugging
	    // this makes source maps inside style tags work properly in Chrome
	    css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */'
	    // http://stackoverflow.com/a/26603875
	    css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'
	  }

	  if (styleElement.styleSheet) {
	    styleElement.styleSheet.cssText = css
	  } else {
	    while (styleElement.firstChild) {
	      styleElement.removeChild(styleElement.firstChild)
	    }
	    styleElement.appendChild(document.createTextNode(css))
	  }
	}


	/***/ }),
	/* 19 */
	/***/ (function(module, exports) {

	/**
	 * Translates the list format produced by css-loader into something
	 * easier to manipulate.
	 */
	module.exports = function listToStyles (parentId, list) {
	  var styles = []
	  var newStyles = {}
	  for (var i = 0; i < list.length; i++) {
	    var item = list[i]
	    var id = item[0]
	    var css = item[1]
	    var media = item[2]
	    var sourceMap = item[3]
	    var part = {
	      id: parentId + ':' + i,
	      css: css,
	      media: media,
	      sourceMap: sourceMap
	    }
	    if (!newStyles[id]) {
	      styles.push(newStyles[id] = { id: id, parts: [part] })
	    } else {
	      newStyles[id].parts.push(part)
	    }
	  }
	  return styles
	}


	/***/ }),
	/* 20 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_20__;

	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=index.js.map

/***/ }),
/* 111 */
/***/ (function(module, exports) {

	"use strict";var inc=(new Date).getTime(),script={name:"VueCkeditor",props:{name:{type:String,default:function(){return"editor-".concat(++inc)}},value:{type:String},id:{type:String,default:function(){return"editor-".concat(inc)}},types:{type:String,default:function(){return"classic"}},config:{type:Object,default:function(){}},instanceReadyCallback:{type:Function},readOnlyMode:{type:Boolean,default:function(){return!1}}},data:function(){return{instanceValue:""}},computed:{instance:function(){return CKEDITOR.instances[this.id]}},watch:{value:function(t){try{this.instance&&this.update(t)}catch(t){}},readOnlyMode:function(t){this.instance.setReadOnly(t)}},mounted:function(){this.create()},methods:{create:function(){var t=this;"undefined"==typeof CKEDITOR?console.log("CKEDITOR is missing (http://ckeditor.com/)"):("inline"===this.types?CKEDITOR.inline(this.id,this.config):CKEDITOR.replace(this.id,this.config),this.instance.setData(this.value),this.instance.on("instanceReady",function(){t.instance.setData(t.value)}),this.instance.on("change",this.onChange),this.instance.on("mode",this.onMode),this.instance.on("blur",function(e){t.$emit("blur",e)}),this.instance.on("focus",function(e){t.$emit("focus",e)}),this.instance.on("contentDom",function(e){t.$emit("contentDom",e)}),CKEDITOR.on("dialogDefinition",function(e){t.$emit("dialogDefinition",e)}),this.instance.on("fileUploadRequest",function(e){t.$emit("fileUploadRequest",e)}),this.instance.on("fileUploadResponse",function(e){setTimeout(function(){t.onChange()},0),t.$emit("fileUploadResponse",e)}),void 0!==this.instanceReadyCallback&&this.instance.on("instanceReady",this.instanceReadyCallback),this.$once("hook:beforeDestroy",function(){t.destroy()}))},update:function(t){this.instanceValue!==t&&this.instance.setData(t,{internal:!1})},destroy:function(){try{var t=window.CKEDITOR;t.instances&&t.instances[this.id]&&t.instances[this.id].destroy()}catch(t){}},onMode:function(){var t=this;if("source"===this.instance.mode){var e=this.instance.editable();e.attachListener(e,"input",function(){t.onChange()})}},onChange:function(){var t=this.instance.getData();t!==this.value&&(this.$emit("input",t),this.instanceValue=t)}}};function normalizeComponent(t,e,n,i,o,s,a,c,r,d){"boolean"!=typeof a&&(r=c,c=a,a=!1);var u,_="function"==typeof n?n.options:n;if(t&&t.render&&(_.render=t.render,_.staticRenderFns=t.staticRenderFns,_._compiled=!0,o&&(_.functional=!0)),i&&(_._scopeId=i),s?(u=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),e&&e.call(this,r(t)),t&&t._registeredComponents&&t._registeredComponents.add(s)},_._ssrRegister=u):e&&(u=a?function(){e.call(this,d(this.$root.$options.shadowRoot))}:function(t){e.call(this,c(t))}),u)if(_.functional){var l=_.render;_.render=function(t,e){return u.call(e),l(t,e)}}else{var h=_.beforeCreate;_.beforeCreate=h?[].concat(h,u):[u]}return n}var normalizeComponent_1=normalizeComponent;const __vue_script__=script;var __vue_render__=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"ckeditor"},[e("textarea",{attrs:{name:this.name,id:this.id,types:this.types,config:this.config,disabled:this.readOnlyMode},domProps:{value:this.value}})])},__vue_staticRenderFns__=[];const __vue_inject_styles__=void 0,__vue_scope_id__=void 0,__vue_module_identifier__=void 0,__vue_is_functional_template__=!1;var VueCkeditor=normalizeComponent_1({render:__vue_render__,staticRenderFns:__vue_staticRenderFns__},void 0,__vue_script__,void 0,!1,void 0,void 0,void 0);module.exports=VueCkeditor;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Name: vue-upload-component
	 * Version: 2.8.19
	 * Author: LianYue
	 */
	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  (global.VueUploadComponent = factory());
	}(this, (function () { 'use strict';

	  /**
	   * Creates a XHR request
	   *
	   * @param {Object} options
	   */
	  var createRequest = function createRequest(options) {
	    var xhr = new XMLHttpRequest();
	    xhr.open(options.method || 'GET', options.url);
	    xhr.responseType = 'json';
	    if (options.headers) {
	      Object.keys(options.headers).forEach(function (key) {
	        xhr.setRequestHeader(key, options.headers[key]);
	      });
	    }

	    return xhr;
	  };

	  /**
	   * Sends a XHR request with certain body
	   *
	   * @param {XMLHttpRequest} xhr
	   * @param {Object} body
	   */
	  var sendRequest = function sendRequest(xhr, body) {
	    return new Promise(function (resolve, reject) {
	      xhr.onload = function () {
	        if (xhr.status >= 200 && xhr.status < 300) {
	          var response;
	          try {
	            response = JSON.parse(xhr.response);
	          } catch (err) {
	            response = xhr.response;
	          }
	          resolve(response);
	        } else {
	          reject(xhr.response);
	        }
	      };
	      xhr.onerror = function () {
	        return reject(xhr.response);
	      };
	      xhr.send(JSON.stringify(body));
	    });
	  };

	  /**
	   * Sends a XHR request with certain form data
	   *
	   * @param {XMLHttpRequest} xhr
	   * @param {Object} data
	   */
	  var sendFormRequest = function sendFormRequest(xhr, data) {
	    var body = new FormData();
	    for (var name in data) {
	      body.append(name, data[name]);
	    }

	    return new Promise(function (resolve, reject) {
	      xhr.onload = function () {
	        if (xhr.status >= 200 && xhr.status < 300) {
	          var response;
	          try {
	            response = JSON.parse(xhr.response);
	          } catch (err) {
	            response = xhr.response;
	          }
	          resolve(response);
	        } else {
	          reject(xhr.response);
	        }
	      };
	      xhr.onerror = function () {
	        return reject(xhr.response);
	      };
	      xhr.send(body);
	    });
	  };

	  /**
	   * Creates and sends XHR request
	   *
	   * @param {Object} options
	   *
	   * @returns Promise
	   */
	  function request (options) {
	    var xhr = createRequest(options);

	    return sendRequest(xhr, options.body);
	  }

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var ChunkUploadHandler = function () {
	    /**
	     * Constructor
	     *
	     * @param {File} file
	     * @param {Object} options
	     */
	    function ChunkUploadHandler(file, options) {
	      _classCallCheck(this, ChunkUploadHandler);

	      this.file = file;
	      this.options = options;
	    }

	    /**
	     * Gets the max retries from options
	     */


	    _createClass(ChunkUploadHandler, [{
	      key: 'createChunks',


	      /**
	       * Creates all the chunks in the initial state
	       */
	      value: function createChunks() {
	        this.chunks = [];

	        var start = 0;
	        var end = this.chunkSize;
	        while (start < this.fileSize) {
	          this.chunks.push({
	            blob: this.file.file.slice(start, end),
	            startOffset: start,
	            active: false,
	            retries: this.maxRetries
	          });
	          start = end;
	          end = start + this.chunkSize;
	        }
	      }

	      /**
	       * Updates the progress of the file with the handler's progress
	       */

	    }, {
	      key: 'updateFileProgress',
	      value: function updateFileProgress() {
	        this.file.progress = this.progress;
	      }

	      /**
	       * Paues the upload process
	       * - Stops all active requests
	       * - Sets the file not active
	       */

	    }, {
	      key: 'pause',
	      value: function pause() {
	        this.file.active = false;
	        this.stopChunks();
	      }

	      /**
	       * Stops all the current chunks
	       */

	    }, {
	      key: 'stopChunks',
	      value: function stopChunks() {
	        this.chunksUploading.forEach(function (chunk) {
	          chunk.xhr.abort();
	          chunk.active = false;
	        });
	      }

	      /**
	       * Resumes the file upload
	       * - Sets the file active
	       * - Starts the following chunks
	       */

	    }, {
	      key: 'resume',
	      value: function resume() {
	        this.file.active = true;
	        this.startChunking();
	      }

	      /**
	       * Starts the file upload
	       *
	       * @returns Promise
	       * - resolve  The file was uploaded
	       * - reject   The file upload failed
	       */

	    }, {
	      key: 'upload',
	      value: function upload() {
	        var _this = this;

	        this.promise = new Promise(function (resolve, reject) {
	          _this.resolve = resolve;
	          _this.reject = reject;
	        });
	        this.start();

	        return this.promise;
	      }

	      /**
	       * Start phase
	       * Sends a request to the backend to initialise the chunks
	       */

	    }, {
	      key: 'start',
	      value: function start() {
	        var _this2 = this;

	        request({
	          method: 'POST',
	          headers: Object.assign({}, this.headers, {
	            'Content-Type': 'application/json'
	          }),
	          url: this.action,
	          body: Object.assign(this.startBody, {
	            phase: 'start',
	            mime_type: this.fileType,
	            size: this.fileSize,
	            name: this.fileName
	          })
	        }).then(function (res) {
	          if (res.status !== 'success') {
	            _this2.file.response = res;
	            return _this2.reject('server');
	          }

	          _this2.sessionId = res.data.session_id;
	          _this2.chunkSize = res.data.end_offset;

	          _this2.createChunks();
	          _this2.startChunking();
	        }).catch(function (res) {
	          _this2.file.response = res;
	          _this2.reject('server');
	        });
	      }

	      /**
	       * Starts to upload chunks
	       */

	    }, {
	      key: 'startChunking',
	      value: function startChunking() {
	        for (var i = 0; i < this.maxActiveChunks; i++) {
	          this.uploadNextChunk();
	        }
	      }

	      /**
	       * Uploads the next chunk
	       * - Won't do anything if the process is paused
	       * - Will start finish phase if there are no more chunks to upload
	       */

	    }, {
	      key: 'uploadNextChunk',
	      value: function uploadNextChunk() {
	        if (this.file.active) {
	          if (this.hasChunksToUpload) {
	            return this.uploadChunk(this.chunksToUpload[0]);
	          }

	          if (this.chunksUploading.length === 0) {
	            return this.finish();
	          }
	        }
	      }

	      /**
	       * Uploads a chunk
	       * - Sends the chunk to the backend
	       * - Sets the chunk as uploaded if everything went well
	       * - Decreases the number of retries if anything went wrong
	       * - Fails if there are no more retries
	       *
	       * @param {Object} chunk
	       */

	    }, {
	      key: 'uploadChunk',
	      value: function uploadChunk(chunk) {
	        var _this3 = this;

	        chunk.progress = 0;
	        chunk.active = true;
	        this.updateFileProgress();
	        chunk.xhr = createRequest({
	          method: 'POST',
	          headers: this.headers,
	          url: this.action
	        });

	        chunk.xhr.upload.addEventListener('progress', function (evt) {
	          if (evt.lengthComputable) {
	            chunk.progress = Math.round(evt.loaded / evt.total * 100);
	          }
	        }, false);

	        sendFormRequest(chunk.xhr, Object.assign(this.uploadBody, {
	          phase: 'upload',
	          session_id: this.sessionId,
	          start_offset: chunk.startOffset,
	          chunk: chunk.blob
	        })).then(function (res) {
	          chunk.active = false;
	          if (res.status === 'success') {
	            chunk.uploaded = true;
	          } else {
	            if (chunk.retries-- <= 0) {
	              _this3.stopChunks();
	              return _this3.reject('upload');
	            }
	          }

	          _this3.uploadNextChunk();
	        }).catch(function () {
	          chunk.active = false;
	          if (chunk.retries-- <= 0) {
	            _this3.stopChunks();
	            return _this3.reject('upload');
	          }

	          _this3.uploadNextChunk();
	        });
	      }

	      /**
	       * Finish phase
	       * Sends a request to the backend to finish the process
	       */

	    }, {
	      key: 'finish',
	      value: function finish() {
	        var _this4 = this;

	        this.updateFileProgress();

	        request({
	          method: 'POST',
	          headers: Object.assign({}, this.headers, {
	            'Content-Type': 'application/json'
	          }),
	          url: this.action,
	          body: Object.assign(this.finishBody, {
	            phase: 'finish',
	            session_id: this.sessionId
	          })
	        }).then(function (res) {
	          _this4.file.response = res;
	          if (res.status !== 'success') {
	            return _this4.reject('server');
	          }

	          _this4.resolve(res);
	        }).catch(function (res) {
	          _this4.file.response = res;
	          _this4.reject('server');
	        });
	      }
	    }, {
	      key: 'maxRetries',
	      get: function get() {
	        return parseInt(this.options.maxRetries);
	      }

	      /**
	       * Gets the max number of active chunks being uploaded at once from options
	       */

	    }, {
	      key: 'maxActiveChunks',
	      get: function get() {
	        return parseInt(this.options.maxActive);
	      }

	      /**
	       * Gets the file type
	       */

	    }, {
	      key: 'fileType',
	      get: function get() {
	        return this.file.type;
	      }

	      /**
	       * Gets the file size
	       */

	    }, {
	      key: 'fileSize',
	      get: function get() {
	        return this.file.size;
	      }

	      /**
	       * Gets the file name
	       */

	    }, {
	      key: 'fileName',
	      get: function get() {
	        return this.file.name;
	      }

	      /**
	       * Gets action (url) to upload the file
	       */

	    }, {
	      key: 'action',
	      get: function get() {
	        return this.options.action || null;
	      }

	      /**
	       * Gets the body to be merged when sending the request in start phase
	       */

	    }, {
	      key: 'startBody',
	      get: function get() {
	        return this.options.startBody || {};
	      }

	      /**
	       * Gets the body to be merged when sending the request in upload phase
	       */

	    }, {
	      key: 'uploadBody',
	      get: function get() {
	        return this.options.uploadBody || {};
	      }

	      /**
	       * Gets the body to be merged when sending the request in finish phase
	       */

	    }, {
	      key: 'finishBody',
	      get: function get() {
	        return this.options.finishBody || {};
	      }

	      /**
	       * Gets the headers of the requests from options
	       */

	    }, {
	      key: 'headers',
	      get: function get() {
	        return this.options.headers || {};
	      }

	      /**
	       * Whether it's ready to upload files or not
	       */

	    }, {
	      key: 'readyToUpload',
	      get: function get() {
	        return !!this.chunks;
	      }

	      /**
	       * Gets the progress of the chunk upload
	       * - Gets all the completed chunks
	       * - Gets the progress of all the chunks that are being uploaded
	       */

	    }, {
	      key: 'progress',
	      get: function get() {
	        var _this5 = this;

	        var completedProgress = this.chunksUploaded.length / this.chunks.length * 100;
	        var uploadingProgress = this.chunksUploading.reduce(function (progress, chunk) {
	          return progress + (chunk.progress | 0) / _this5.chunks.length;
	        }, 0);

	        return Math.min(completedProgress + uploadingProgress, 100);
	      }

	      /**
	       * Gets all the chunks that are pending to be uploaded
	       */

	    }, {
	      key: 'chunksToUpload',
	      get: function get() {
	        return this.chunks.filter(function (chunk) {
	          return !chunk.active && !chunk.uploaded;
	        });
	      }

	      /**
	       * Whether there are chunks to upload or not
	       */

	    }, {
	      key: 'hasChunksToUpload',
	      get: function get() {
	        return this.chunksToUpload.length > 0;
	      }

	      /**
	       * Gets all the chunks that are uploading
	       */

	    }, {
	      key: 'chunksUploading',
	      get: function get() {
	        return this.chunks.filter(function (chunk) {
	          return !!chunk.xhr && !!chunk.active;
	        });
	      }

	      /**
	       * Gets all the chunks that have finished uploading
	       */

	    }, {
	      key: 'chunksUploaded',
	      get: function get() {
	        return this.chunks.filter(function (chunk) {
	          return !!chunk.uploaded;
	        });
	      }
	    }]);

	    return ChunkUploadHandler;
	  }();

	  //
	  //
	  //
	  //
	  //
	  //
	  //
	  //
	  //
	  //
	  //
	  //
	  //
	  //

	  var script = {
	    methods: {
	      change: function change(e) {
	        this.$parent.addInputFile(e.target);
	        if (e.target.files) {
	          e.target.value = '';
	          if (!/safari/i.test(navigator.userAgent)) {
	            e.target.type = '';
	            e.target.type = 'file';
	          }
	        } else {
	          // ie9 fix #219
	          this.$destroy();
	          // eslint-disable-next-line
	          new this.constructor({
	            parent: this.$parent,
	            el: this.$el
	          });
	        }
	      }
	    }
	  };

	  /* script */
	  var __vue_script__ = script;

	  /* template */
	  var __vue_render__ = function __vue_render__() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('input', { attrs: { "type": "file", "name": _vm.$parent.name, "id": _vm.$parent.inputId || _vm.$parent.name, "accept": _vm.$parent.accept, "capture": _vm.$parent.capture, "disabled": _vm.$parent.disabled, "webkitdirectory": _vm.$parent.directory && _vm.$parent.features.directory, "directory": _vm.$parent.directory && _vm.$parent.features.directory, "multiple": _vm.$parent.multiple && _vm.$parent.features.html5 }, on: { "change": _vm.change } });
	  };
	  var __vue_staticRenderFns__ = [];

	  /* style */
	  var __vue_inject_styles__ = undefined;
	  /* scoped */
	  var __vue_scope_id__ = undefined;
	  /* module identifier */
	  var __vue_module_identifier__ = undefined;
	  /* functional template */
	  var __vue_is_functional_template__ = false;
	  /* component normalizer */
	  function __vue_normalize__(template, style, script$$1, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
	    var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) component.functional = true;
	    }

	    component._scopeId = scope;

	    return component;
	  }
	  /* style inject */
	  function __vue_create_injector__() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
	    var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) return; // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (css.map) {
	          // https://developer.chrome.com/devtools/docs/javascript-debugging
	          // this makes source maps inside style tags work properly in Chrome
	          code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
	          // http://stackoverflow.com/a/26603875
	          code += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';
	        }

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) el.setAttribute('media', css.media);
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts.filter(Boolean).join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) style.element.removeChild(nodes[index]);
	          if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);
	        }
	      }
	    };
	  }
	  /* style inject SSR */

	  var InputFile = __vue_normalize__({ render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ }, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, __vue_create_injector__, undefined);

	  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	  var CHUNK_DEFAULT_OPTIONS = {
	    headers: {},
	    action: '',
	    minSize: 1048576,
	    maxActive: 3,
	    maxRetries: 5,

	    handler: ChunkUploadHandler
	  };

	  var script$1 = {
	    components: {
	      InputFile: InputFile
	    },
	    props: {
	      inputId: {
	        type: String
	      },

	      name: {
	        type: String,
	        default: 'file'
	      },

	      accept: {
	        type: String
	      },

	      capture: {},

	      disabled: {},

	      multiple: {
	        type: Boolean
	      },

	      maximum: {
	        type: Number,
	        default: function _default() {
	          return this.multiple ? 0 : 1;
	        }
	      },

	      addIndex: {
	        type: [Boolean, Number]
	      },

	      directory: {
	        type: Boolean
	      },

	      postAction: {
	        type: String
	      },

	      putAction: {
	        type: String
	      },

	      customAction: {
	        type: Function
	      },

	      headers: {
	        type: Object,
	        default: Object
	      },

	      data: {
	        type: Object,
	        default: Object
	      },

	      timeout: {
	        type: Number,
	        default: 0
	      },

	      drop: {
	        default: false
	      },

	      dropDirectory: {
	        type: Boolean,
	        default: true
	      },

	      size: {
	        type: Number,
	        default: 0
	      },

	      extensions: {
	        default: Array
	      },

	      value: {
	        type: Array,
	        default: Array
	      },

	      thread: {
	        type: Number,
	        default: 1
	      },

	      // Chunk upload enabled
	      chunkEnabled: {
	        type: Boolean,
	        default: false
	      },

	      // Chunk upload properties
	      chunk: {
	        type: Object,
	        default: function _default() {
	          return CHUNK_DEFAULT_OPTIONS;
	        }
	      }
	    },

	    data: function data() {
	      return {
	        files: this.value,
	        features: {
	          html5: true,
	          directory: false,
	          drag: false
	        },

	        active: false,
	        dropActive: false,

	        uploading: 0,

	        destroy: false
	      };
	    },


	    /**
	     * mounted
	     * @return {[type]} [description]
	     */
	    mounted: function mounted() {
	      var input = document.createElement('input');
	      input.type = 'file';
	      input.multiple = true;

	      // html5 特征
	      if (window.FormData && input.files) {
	        // 上传目录特征
	        if (typeof input.webkitdirectory === 'boolean' || typeof input.directory === 'boolean') {
	          this.features.directory = true;
	        }

	        // 拖拽特征
	        if (this.features.html5 && typeof input.ondrop !== 'undefined') {
	          this.features.drop = true;
	        }
	      } else {
	        this.features.html5 = false;
	      }

	      // files 定位缓存
	      this.maps = {};
	      if (this.files) {
	        for (var i = 0; i < this.files.length; i++) {
	          var file = this.files[i];
	          this.maps[file.id] = file;
	        }
	      }

	      this.$nextTick(function () {

	        // 更新下父级
	        if (this.$parent) {
	          this.$parent.$forceUpdate();
	        }

	        // 拖拽渲染
	        this.watchDrop(this.drop);
	      });
	    },


	    /**
	     * beforeDestroy
	     * @return {[type]} [description]
	     */
	    beforeDestroy: function beforeDestroy() {
	      // 已销毁
	      this.destroy = true;

	      // 设置成不激活
	      this.active = false;
	    },


	    computed: {
	      /**
	       * uploading 正在上传的线程
	       * @return {[type]} [description]
	       */

	      /**
	       * uploaded 文件列表是否全部已上传
	       * @return {[type]} [description]
	       */
	      uploaded: function uploaded() {
	        var file = void 0;
	        for (var i = 0; i < this.files.length; i++) {
	          file = this.files[i];
	          if (file.fileObject && !file.error && !file.success) {
	            return false;
	          }
	        }
	        return true;
	      },
	      chunkOptions: function chunkOptions() {
	        return Object.assign(CHUNK_DEFAULT_OPTIONS, this.chunk);
	      },
	      className: function className() {
	        return ['file-uploads', this.features.html5 ? 'file-uploads-html5' : 'file-uploads-html4', this.features.directory && this.directory ? 'file-uploads-directory' : undefined, this.features.drop && this.drop ? 'file-uploads-drop' : undefined, this.disabled ? 'file-uploads-disabled' : undefined];
	      }
	    },

	    watch: {
	      active: function active(_active) {
	        this.watchActive(_active);
	      },
	      dropActive: function dropActive() {
	        if (this.$parent) {
	          this.$parent.$forceUpdate();
	        }
	      },
	      drop: function drop(value) {
	        this.watchDrop(value);
	      },
	      value: function value(files) {
	        if (this.files === files) {
	          return;
	        }
	        this.files = files;

	        var oldMaps = this.maps;

	        // 重写 maps 缓存
	        this.maps = {};
	        for (var i = 0; i < this.files.length; i++) {
	          var file = this.files[i];
	          this.maps[file.id] = file;
	        }

	        // add, update
	        for (var key in this.maps) {
	          var newFile = this.maps[key];
	          var oldFile = oldMaps[key];
	          if (newFile !== oldFile) {
	            this.emitFile(newFile, oldFile);
	          }
	        }

	        // delete
	        for (var _key in oldMaps) {
	          if (!this.maps[_key]) {
	            this.emitFile(undefined, oldMaps[_key]);
	          }
	        }
	      }
	    },

	    methods: {

	      // 清空
	      clear: function clear() {
	        if (this.files.length) {
	          var files = this.files;
	          this.files = [];

	          // 定位
	          this.maps = {};

	          // 事件
	          this.emitInput();
	          for (var i = 0; i < files.length; i++) {
	            this.emitFile(undefined, files[i]);
	          }
	        }
	        return true;
	      },


	      // 选择
	      get: function get(id) {
	        if (!id) {
	          return false;
	        }

	        if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object') {
	          return this.maps[id.id] || false;
	        }

	        return this.maps[id] || false;
	      },


	      // 添加
	      add: function add(_files) {
	        var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.addIndex;

	        var files = _files;
	        var isArray = files instanceof Array;

	        // 不是数组整理成数组
	        if (!isArray) {
	          files = [files];
	        }

	        // 遍历规范对象
	        var addFiles = [];
	        for (var i = 0; i < files.length; i++) {
	          var file = files[i];
	          if (this.features.html5 && file instanceof Blob) {
	            file = {
	              file: file,
	              size: file.size,
	              name: file.webkitRelativePath || file.relativePath || file.name || 'unknown',
	              type: file.type
	            };
	          }
	          var fileObject = false;
	          if (file.fileObject === false) ; else if (file.fileObject) {
	            fileObject = true;
	          } else if (typeof Element !== 'undefined' && file.el instanceof Element) {
	            fileObject = true;
	          } else if (typeof Blob !== 'undefined' && file.file instanceof Blob) {
	            fileObject = true;
	          }
	          if (fileObject) {
	            file = _extends({
	              fileObject: true,
	              size: -1,
	              name: 'Filename',
	              type: '',
	              active: false,
	              error: '',
	              success: false,
	              putAction: this.putAction,
	              postAction: this.postAction,
	              timeout: this.timeout
	            }, file, {
	              response: {},

	              progress: '0.00', // 只读
	              speed: 0 // 只读
	              // xhr: false,                // 只读
	              // iframe: false,             // 只读
	            });

	            file.data = _extends({}, this.data, file.data ? file.data : {});

	            file.headers = _extends({}, this.headers, file.headers ? file.headers : {});
	          }

	          // 必须包含 id
	          if (!file.id) {
	            file.id = Math.random().toString(36).substr(2);
	          }

	          if (this.emitFilter(file, undefined)) {
	            continue;
	          }

	          // 最大数量限制
	          if (this.maximum > 1 && addFiles.length + this.files.length >= this.maximum) {
	            break;
	          }

	          addFiles.push(file);

	          // 最大数量限制
	          if (this.maximum === 1) {
	            break;
	          }
	        }

	        // 没有文件
	        if (!addFiles.length) {
	          return false;
	        }

	        // 如果是 1 清空
	        if (this.maximum === 1) {
	          this.clear();
	        }

	        // 添加进去 files
	        var newFiles = void 0;
	        if (index === true || index === 0) {
	          newFiles = addFiles.concat(this.files);
	        } else if (index) {
	          var _newFiles;

	          newFiles = this.files.concat([]);
	          (_newFiles = newFiles).splice.apply(_newFiles, [index, 0].concat(addFiles));
	        } else {
	          newFiles = this.files.concat(addFiles);
	        }

	        this.files = newFiles;

	        // 定位
	        for (var _i = 0; _i < addFiles.length; _i++) {
	          var _file2 = addFiles[_i];
	          this.maps[_file2.id] = _file2;
	        }

	        // 事件
	        this.emitInput();
	        for (var _i2 = 0; _i2 < addFiles.length; _i2++) {
	          this.emitFile(addFiles[_i2], undefined);
	        }

	        return isArray ? addFiles : addFiles[0];
	      },


	      // 添加表单文件
	      addInputFile: function addInputFile(el) {
	        var files = [];
	        if (el.files) {
	          for (var i = 0; i < el.files.length; i++) {
	            var file = el.files[i];
	            files.push({
	              size: file.size,
	              name: file.webkitRelativePath || file.relativePath || file.name,
	              type: file.type,
	              file: file
	            });
	          }
	        } else {
	          var names = el.value.replace(/\\/g, '/').split('/');
	          delete el.__vuex__;
	          files.push({
	            name: names[names.length - 1],
	            el: el
	          });
	        }
	        return this.add(files);
	      },


	      // 添加 DataTransfer
	      addDataTransfer: function addDataTransfer(dataTransfer) {
	        var _this = this;

	        var files = [];
	        if (dataTransfer.items && dataTransfer.items.length) {
	          var items = [];
	          for (var i = 0; i < dataTransfer.items.length; i++) {
	            var item = dataTransfer.items[i];
	            if (item.getAsEntry) {
	              item = item.getAsEntry() || item.getAsFile();
	            } else if (item.webkitGetAsEntry) {
	              item = item.webkitGetAsEntry() || item.getAsFile();
	            } else {
	              item = item.getAsFile();
	            }
	            if (item) {
	              items.push(item);
	            }
	          }

	          return new Promise(function (resolve, reject) {
	            var forEach = function forEach(i) {
	              var item = items[i];
	              // 结束 文件数量大于 最大数量
	              if (!item || _this.maximum > 0 && files.length >= _this.maximum) {
	                return resolve(_this.add(files));
	              }
	              _this.getEntry(item).then(function (results) {
	                files.push.apply(files, _toConsumableArray(results));
	                forEach(i + 1);
	              });
	            };
	            forEach(0);
	          });
	        }

	        if (dataTransfer.files.length) {
	          for (var _i3 = 0; _i3 < dataTransfer.files.length; _i3++) {
	            files.push(dataTransfer.files[_i3]);
	            if (this.maximum > 0 && files.length >= this.maximum) {
	              break;
	            }
	          }
	          return Promise.resolve(this.add(files));
	        }

	        return Promise.resolve([]);
	      },


	      // 获得 entry
	      getEntry: function getEntry(entry) {
	        var _this2 = this;

	        var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

	        return new Promise(function (resolve, reject) {
	          if (entry.isFile) {
	            entry.file(function (file) {
	              resolve([{
	                size: file.size,
	                name: path + file.name,
	                type: file.type,
	                file: file
	              }]);
	            });
	          } else if (entry.isDirectory && _this2.dropDirectory) {
	            var files = [];
	            var dirReader = entry.createReader();
	            var readEntries = function readEntries() {
	              dirReader.readEntries(function (entries) {
	                var forEach = function forEach(i) {
	                  if (!entries[i] && i === 0 || _this2.maximum > 0 && files.length >= _this2.maximum) {
	                    return resolve(files);
	                  }
	                  if (!entries[i]) {
	                    return readEntries();
	                  }
	                  _this2.getEntry(entries[i], path + entry.name + '/').then(function (results) {
	                    files.push.apply(files, _toConsumableArray(results));
	                    forEach(i + 1);
	                  });
	                };
	                forEach(0);
	              });
	            };
	            readEntries();
	          } else {
	            resolve([]);
	          }
	        });
	      },
	      replace: function replace(id1, id2) {
	        var file1 = this.get(id1);
	        var file2 = this.get(id2);
	        if (!file1 || !file2 || file1 === file2) {
	          return false;
	        }
	        var files = this.files.concat([]);
	        var index1 = files.indexOf(file1);
	        var index2 = files.indexOf(file2);
	        if (index1 === -1 || index2 === -1) {
	          return false;
	        }
	        files[index1] = file2;
	        files[index2] = file1;
	        this.files = files;
	        this.emitInput();
	        return true;
	      },


	      // 移除
	      remove: function remove(id) {
	        var file = this.get(id);
	        if (file) {
	          if (this.emitFilter(undefined, file)) {
	            return false;
	          }
	          var files = this.files.concat([]);
	          var index = files.indexOf(file);
	          if (index === -1) {
	            console.error('remove', file);
	            return false;
	          }
	          files.splice(index, 1);
	          this.files = files;

	          // 定位
	          delete this.maps[file.id];

	          // 事件
	          this.emitInput();
	          this.emitFile(undefined, file);
	        }
	        return file;
	      },


	      // 更新
	      update: function update(id, data) {
	        var file = this.get(id);
	        if (file) {
	          var newFile = _extends({}, file, data);
	          // 停用必须加上错误
	          if (file.fileObject && file.active && !newFile.active && !newFile.error && !newFile.success) {
	            newFile.error = 'abort';
	          }

	          if (this.emitFilter(newFile, file)) {
	            return false;
	          }

	          var files = this.files.concat([]);
	          var index = files.indexOf(file);
	          if (index === -1) {
	            console.error('update', file);
	            return false;
	          }
	          files.splice(index, 1, newFile);
	          this.files = files;

	          // 删除  旧定位 写入 新定位 （已便支持修改id)
	          delete this.maps[file.id];
	          this.maps[newFile.id] = newFile;

	          // 事件
	          this.emitInput();
	          this.emitFile(newFile, file);
	          return newFile;
	        }
	        return false;
	      },


	      // 预处理 事件 过滤器
	      emitFilter: function emitFilter(newFile, oldFile) {
	        var isPrevent = false;
	        this.$emit('input-filter', newFile, oldFile, function () {
	          isPrevent = true;
	          return isPrevent;
	        });
	        return isPrevent;
	      },


	      // 处理后 事件 分发
	      emitFile: function emitFile(newFile, oldFile) {
	        this.$emit('input-file', newFile, oldFile);
	        if (newFile && newFile.fileObject && newFile.active && (!oldFile || !oldFile.active)) {
	          this.uploading++;
	          // 激活
	          this.$nextTick(function () {
	            var _this3 = this;

	            setTimeout(function () {
	              _this3.upload(newFile).then(function () {
	                // eslint-disable-next-line
	                newFile = _this3.get(newFile);
	                if (newFile && newFile.fileObject) {
	                  _this3.update(newFile, {
	                    active: false,
	                    success: !newFile.error
	                  });
	                }
	              }).catch(function (e) {
	                _this3.update(newFile, {
	                  active: false,
	                  success: false,
	                  error: e.code || e.error || e.message || e
	                });
	              });
	            }, parseInt(Math.random() * 50 + 50, 10));
	          });
	        } else if ((!newFile || !newFile.fileObject || !newFile.active) && oldFile && oldFile.fileObject && oldFile.active) {
	          // 停止
	          this.uploading--;
	        }

	        // 自动延续激活
	        if (this.active && (Boolean(newFile) !== Boolean(oldFile) || newFile.active !== oldFile.active)) {
	          this.watchActive(true);
	        }
	      },
	      emitInput: function emitInput() {
	        this.$emit('input', this.files);
	      },


	      // 上传
	      upload: function upload(id) {
	        var file = this.get(id);

	        // 被删除
	        if (!file) {
	          return Promise.reject('not_exists');
	        }

	        // 不是文件对象
	        if (!file.fileObject) {
	          return Promise.reject('file_object');
	        }

	        // 有错误直接响应
	        if (file.error) {
	          return Promise.reject(file.error);
	        }

	        // 已完成直接响应
	        if (file.success) {
	          return Promise.resolve(file);
	        }

	        // 后缀
	        var extensions = this.extensions;
	        if (extensions && (extensions.length || typeof extensions.length === 'undefined')) {
	          if ((typeof extensions === 'undefined' ? 'undefined' : _typeof(extensions)) !== 'object' || !(extensions instanceof RegExp)) {
	            if (typeof extensions === 'string') {
	              extensions = extensions.split(',').map(function (value) {
	                return value.trim();
	              }).filter(function (value) {
	                return value;
	              });
	            }
	            extensions = new RegExp('\\.(' + extensions.join('|').replace(/\./g, '\\.') + ')$', 'i');
	          }
	          if (file.name.search(extensions) === -1) {
	            return Promise.reject('extension');
	          }
	        }

	        // 大小
	        if (this.size > 0 && file.size >= 0 && file.size > this.size) {
	          return Promise.reject('size');
	        }

	        if (this.customAction) {
	          return this.customAction(file, this);
	        }

	        if (this.features.html5) {
	          if (this.shouldUseChunkUpload(file)) {
	            return this.uploadChunk(file);
	          }
	          if (file.putAction) {
	            return this.uploadPut(file);
	          }
	          if (file.postAction) {
	            return this.uploadHtml5(file);
	          }
	        }
	        if (file.postAction) {
	          return this.uploadHtml4(file);
	        }
	        return Promise.reject('No action configured');
	      },


	      /**
	       * Whether this file should be uploaded using chunk upload or not
	       *
	       * @param Object file
	       */
	      shouldUseChunkUpload: function shouldUseChunkUpload(file) {
	        return this.chunkEnabled && !!this.chunkOptions.handler && file.size > this.chunkOptions.minSize;
	      },


	      /**
	       * Upload a file using Chunk method
	       *
	       * @param File file
	       */
	      uploadChunk: function uploadChunk(file) {
	        var HandlerClass = this.chunkOptions.handler;
	        file.chunk = new HandlerClass(file, this.chunkOptions);

	        return file.chunk.upload();
	      },
	      uploadPut: function uploadPut(file) {
	        var querys = [];
	        var value = void 0;
	        for (var key in file.data) {
	          value = file.data[key];
	          if (value !== null && value !== undefined) {
	            querys.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
	          }
	        }
	        var queryString = querys.length ? (file.putAction.indexOf('?') === -1 ? '?' : '&') + querys.join('&') : '';
	        var xhr = new XMLHttpRequest();
	        xhr.open('PUT', file.putAction + queryString);
	        return this.uploadXhr(xhr, file, file.file);
	      },
	      uploadHtml5: function uploadHtml5(file) {
	        var form = new window.FormData();
	        var value = void 0;
	        for (var key in file.data) {
	          value = file.data[key];
	          if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.toString !== 'function') {
	            if (value instanceof File) {
	              form.append(key, value, value.name);
	            } else {
	              form.append(key, JSON.stringify(value));
	            }
	          } else if (value !== null && value !== undefined) {
	            form.append(key, value);
	          }
	        }
	        form.append(this.name, file.file, file.file.filename || file.name);
	        var xhr = new XMLHttpRequest();
	        xhr.open('POST', file.postAction);
	        return this.uploadXhr(xhr, file, form);
	      },
	      uploadXhr: function uploadXhr(xhr, _file, body) {
	        var _this4 = this;

	        var file = _file;
	        var speedTime = 0;
	        var speedLoaded = 0;

	        // 进度条
	        xhr.upload.onprogress = function (e) {
	          // 还未开始上传 已删除 未激活
	          file = _this4.get(file);
	          if (!e.lengthComputable || !file || !file.fileObject || !file.active) {
	            return;
	          }

	          // 进度 速度 每秒更新一次
	          var speedTime2 = Math.round(Date.now() / 1000);
	          if (speedTime2 === speedTime) {
	            return;
	          }
	          speedTime = speedTime2;

	          file = _this4.update(file, {
	            progress: (e.loaded / e.total * 100).toFixed(2),
	            speed: e.loaded - speedLoaded
	          });
	          speedLoaded = e.loaded;
	        };

	        // 检查激活状态
	        var interval = setInterval(function () {
	          file = _this4.get(file);
	          if (file && file.fileObject && !file.success && !file.error && file.active) {
	            return;
	          }

	          if (interval) {
	            clearInterval(interval);
	            interval = false;
	          }

	          try {
	            xhr.abort();
	            xhr.timeout = 1;
	          } catch (e) {}
	        }, 100);

	        return new Promise(function (resolve, reject) {
	          var complete = void 0;
	          var fn = function fn(e) {
	            // 已经处理过了
	            if (complete) {
	              return;
	            }
	            complete = true;
	            if (interval) {
	              clearInterval(interval);
	              interval = false;
	            }

	            file = _this4.get(file);

	            // 不存在直接响应
	            if (!file) {
	              return reject('not_exists');
	            }

	            // 不是文件对象
	            if (!file.fileObject) {
	              return reject('file_object');
	            }

	            // 有错误自动响应
	            if (file.error) {
	              return reject(file.error);
	            }

	            // 未激活
	            if (!file.active) {
	              return reject('abort');
	            }

	            // 已完成 直接相应
	            if (file.success) {
	              return resolve(file);
	            }

	            var data = {};

	            switch (e.type) {
	              case 'timeout':
	              case 'abort':
	                data.error = e.type;
	                break;
	              case 'error':
	                if (!xhr.status) {
	                  data.error = 'network';
	                } else if (xhr.status >= 500) {
	                  data.error = 'server';
	                } else if (xhr.status >= 400) {
	                  data.error = 'denied';
	                }
	                break;
	              default:
	                if (xhr.status >= 500) {
	                  data.error = 'server';
	                } else if (xhr.status >= 400) {
	                  data.error = 'denied';
	                } else {
	                  data.progress = '100.00';
	                }
	            }

	            if (xhr.responseText) {
	              var contentType = xhr.getResponseHeader('Content-Type');
	              if (contentType && contentType.indexOf('/json') !== -1) {
	                data.response = JSON.parse(xhr.responseText);
	              } else {
	                data.response = xhr.responseText;
	              }
	            }

	            // 更新
	            file = _this4.update(file, data);

	            // 相应错误
	            if (file.error) {
	              return reject(file.error);
	            }

	            // 响应
	            return resolve(file);
	          };

	          // 事件
	          xhr.onload = fn;
	          xhr.onerror = fn;
	          xhr.onabort = fn;
	          xhr.ontimeout = fn;

	          // 超时
	          if (file.timeout) {
	            xhr.timeout = file.timeout;
	          }

	          // headers
	          for (var key in file.headers) {
	            xhr.setRequestHeader(key, file.headers[key]);
	          }

	          // 更新 xhr
	          file = _this4.update(file, { xhr: xhr });

	          // 开始上传
	          xhr.send(body);
	        });
	      },
	      uploadHtml4: function uploadHtml4(_file) {
	        var _this5 = this;

	        var file = _file;
	        var onKeydown = function onKeydown(e) {
	          if (e.keyCode === 27) {
	            e.preventDefault();
	          }
	        };

	        var iframe = document.createElement('iframe');
	        iframe.id = 'upload-iframe-' + file.id;
	        iframe.name = 'upload-iframe-' + file.id;
	        iframe.src = 'about:blank';
	        iframe.setAttribute('style', 'width:1px;height:1px;top:-999em;position:absolute; margin-top:-999em;');

	        var form = document.createElement('form');

	        form.action = file.postAction;

	        form.name = 'upload-form-' + file.id;

	        form.setAttribute('method', 'POST');
	        form.setAttribute('target', 'upload-iframe-' + file.id);
	        form.setAttribute('enctype', 'multipart/form-data');

	        var value = void 0;
	        var input = void 0;
	        for (var key in file.data) {
	          value = file.data[key];
	          if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.toString !== 'function') {
	            value = JSON.stringify(value);
	          }
	          if (value !== null && value !== undefined) {
	            input = document.createElement('input');
	            input.type = 'hidden';
	            input.name = key;
	            input.value = value;
	            form.appendChild(input);
	          }
	        }
	        form.appendChild(file.el);

	        document.body.appendChild(iframe).appendChild(form);

	        var getResponseData = function getResponseData() {
	          var doc = void 0;
	          try {
	            if (iframe.contentWindow) {
	              doc = iframe.contentWindow.document;
	            }
	          } catch (err) {}
	          if (!doc) {
	            try {
	              doc = iframe.contentDocument ? iframe.contentDocument : iframe.document;
	            } catch (err) {
	              doc = iframe.document;
	            }
	          }
	          if (doc && doc.body) {
	            return doc.body.innerHTML;
	          }
	          return null;
	        };

	        return new Promise(function (resolve, reject) {
	          setTimeout(function () {
	            file = _this5.update(file, { iframe: iframe });

	            // 不存在
	            if (!file) {
	              return reject('not_exists');
	            }

	            // 定时检查
	            var interval = setInterval(function () {
	              file = _this5.get(file);
	              if (file && file.fileObject && !file.success && !file.error && file.active) {
	                return;
	              }

	              if (interval) {
	                clearInterval(interval);
	                interval = false;
	              }

	              iframe.onabort({ type: file ? 'abort' : 'not_exists' });
	            }, 100);

	            var complete = void 0;
	            var fn = function fn(e) {
	              // 已经处理过了
	              if (complete) {
	                return;
	              }
	              complete = true;

	              if (interval) {
	                clearInterval(interval);
	                interval = false;
	              }

	              // 关闭 esc 事件
	              document.body.removeEventListener('keydown', onKeydown);

	              file = _this5.get(file);

	              // 不存在直接响应
	              if (!file) {
	                return reject('not_exists');
	              }

	              // 不是文件对象
	              if (!file.fileObject) {
	                return reject('file_object');
	              }

	              // 有错误自动响应
	              if (file.error) {
	                return reject(file.error);
	              }

	              // 未激活
	              if (!file.active) {
	                return reject('abort');
	              }

	              // 已完成 直接相应
	              if (file.success) {
	                return resolve(file);
	              }

	              var response = getResponseData();
	              var data = {};
	              switch (e.type) {
	                case 'abort':
	                  data.error = 'abort';
	                  break;
	                case 'error':
	                  if (file.error) {
	                    data.error = file.error;
	                  } else if (response === null) {
	                    data.error = 'network';
	                  } else {
	                    data.error = 'denied';
	                  }
	                  break;
	                default:
	                  if (file.error) {
	                    data.error = file.error;
	                  } else if (data === null) {
	                    data.error = 'network';
	                  } else {
	                    data.progress = '100.00';
	                  }
	              }

	              if (response !== null) {
	                if (response && response.substr(0, 1) === '{' && response.substr(response.length - 1, 1) === '}') {
	                  try {
	                    response = JSON.parse(response);
	                  } catch (err) {}
	                }
	                data.response = response;
	              }

	              // 更新
	              file = _this5.update(file, data);

	              if (file.error) {
	                return reject(file.error);
	              }

	              // 响应
	              return resolve(file);
	            };

	            // 添加事件
	            iframe.onload = fn;
	            iframe.onerror = fn;
	            iframe.onabort = fn;

	            // 禁止 esc 键
	            document.body.addEventListener('keydown', onKeydown);

	            // 提交
	            form.submit();
	          }, 50);
	        }).then(function (res) {
	          iframe.parentNode && iframe.parentNode.removeChild(iframe);
	          return res;
	        }).catch(function (res) {
	          iframe.parentNode && iframe.parentNode.removeChild(iframe);
	          return res;
	        });
	      },
	      watchActive: function watchActive(active) {
	        var file = void 0;
	        var index = 0;
	        while (file = this.files[index]) {
	          index++;
	          if (!file.fileObject) ; else if (active && !this.destroy) {
	            if (this.uploading >= this.thread || this.uploading && !this.features.html5) {
	              break;
	            }
	            if (!file.active && !file.error && !file.success) {
	              this.update(file, { active: true });
	            }
	          } else {
	            if (file.active) {
	              this.update(file, { active: false });
	            }
	          }
	        }
	        if (this.uploading === 0) {
	          this.active = false;
	        }
	      },
	      watchDrop: function watchDrop(_el) {
	        var el = _el;
	        if (!this.features.drop) {
	          return;
	        }

	        // 移除挂载
	        if (this.dropElement) {
	          try {
	            document.removeEventListener('dragenter', this.onDragenter, false);
	            document.removeEventListener('dragleave', this.onDragleave, false);
	            document.removeEventListener('drop', this.onDocumentDrop, false);
	            this.dropElement.removeEventListener('dragover', this.onDragover, false);
	            this.dropElement.removeEventListener('drop', this.onDrop, false);
	          } catch (e) {}
	        }

	        if (!el) {
	          el = false;
	        } else if (typeof el === 'string') {
	          el = document.querySelector(el) || this.$root.$el.querySelector(el);
	        } else if (el === true) {
	          el = this.$parent.$el;
	        }

	        this.dropElement = el;

	        if (this.dropElement) {
	          document.addEventListener('dragenter', this.onDragenter, false);
	          document.addEventListener('dragleave', this.onDragleave, false);
	          document.addEventListener('drop', this.onDocumentDrop, false);
	          this.dropElement.addEventListener('dragover', this.onDragover, false);
	          this.dropElement.addEventListener('drop', this.onDrop, false);
	        }
	      },
	      onDragenter: function onDragenter(e) {
	        e.preventDefault();
	        if (this.dropActive) {
	          return;
	        }
	        if (!e.dataTransfer) {
	          return;
	        }
	        var dt = e.dataTransfer;
	        if (dt.files && dt.files.length) {
	          this.dropActive = true;
	        } else if (!dt.types) {
	          this.dropActive = true;
	        } else if (dt.types.indexOf && dt.types.indexOf('Files') !== -1) {
	          this.dropActive = true;
	        } else if (dt.types.contains && dt.types.contains('Files')) {
	          this.dropActive = true;
	        }
	      },
	      onDragleave: function onDragleave(e) {
	        e.preventDefault();
	        if (!this.dropActive) {
	          return;
	        }
	        if (e.target.nodeName === 'HTML' || e.target === e.explicitOriginalTarget || !e.fromElement && (e.clientX <= 0 || e.clientY <= 0 || e.clientX >= window.innerWidth || e.clientY >= window.innerHeight)) {
	          this.dropActive = false;
	        }
	      },
	      onDragover: function onDragover(e) {
	        e.preventDefault();
	      },
	      onDocumentDrop: function onDocumentDrop() {
	        this.dropActive = false;
	      },
	      onDrop: function onDrop(e) {
	        e.preventDefault();
	        this.addDataTransfer(e.dataTransfer);
	      }
	    }
	  };

	  /* script */
	  var __vue_script__$1 = script$1;

	  /* template */
	  var __vue_render__$1 = function __vue_render__() {
	    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('span', { class: _vm.className }, [_vm._t("default"), _vm._v(" "), _c('label', { attrs: { "for": _vm.inputId || _vm.name } }), _vm._v(" "), _c('input-file')], 2);
	  };
	  var __vue_staticRenderFns__$1 = [];

	  /* style */
	  var __vue_inject_styles__$1 = function (inject) {
	    if (!inject) return;
	    inject("data-v-595958af_0", { source: "\n.file-uploads{overflow:hidden;position:relative;text-align:center;display:inline-block\n}\n.file-uploads.file-uploads-html4 input,.file-uploads.file-uploads-html5 label{background:#fff;opacity:0;font-size:20em;z-index:1;top:0;left:0;right:0;bottom:0;position:absolute;width:100%;height:100%\n}\n.file-uploads.file-uploads-html4 label,.file-uploads.file-uploads-html5 input{background:rgba(255,255,255,0);overflow:hidden;position:fixed;width:1px;height:1px;z-index:-1;opacity:0\n}", map: undefined, media: undefined });
	  };
	  /* scoped */
	  var __vue_scope_id__$1 = undefined;
	  /* module identifier */
	  var __vue_module_identifier__$1 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$1 = false;
	  /* component normalizer */
	  function __vue_normalize__$1(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) component.functional = true;
	    }

	    component._scopeId = scope;

	    {
	      var hook = void 0;
	      if (style) {
	        hook = function hook(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context);
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component;
	  }
	  /* style inject */
	  function __vue_create_injector__$1() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$1.styles || (__vue_create_injector__$1.styles = {});
	    var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) return; // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (css.map) {
	          // https://developer.chrome.com/devtools/docs/javascript-debugging
	          // this makes source maps inside style tags work properly in Chrome
	          code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
	          // http://stackoverflow.com/a/26603875
	          code += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';
	        }

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) el.setAttribute('media', css.media);
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts.filter(Boolean).join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) style.element.removeChild(nodes[index]);
	          if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);
	        }
	      }
	    };
	  }
	  /* style inject SSR */

	  var FileUpload = __vue_normalize__$1({ render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 }, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, __vue_create_injector__$1, undefined);

	  var FileUpload$1 = /*#__PURE__*/Object.freeze({
	    default: FileUpload
	  });

	  var require$$0 = ( FileUpload$1 && FileUpload ) || FileUpload$1;

	  var src = require$$0;

	  return src;

	})));
	//# sourceMappingURL=vue-upload-component.js.map


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	(function(t,n){ true?module.exports=n(__webpack_require__(114)):"function"===typeof define&&define.amd?define(["sortablejs"],n):"object"===typeof exports?exports["vuedraggable"]=n(require("sortablejs")):t["vuedraggable"]=n(t["Sortable"])})("undefined"!==typeof self?self:this,function(t){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"===typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t["default"]}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s="fb15")}({"02f4":function(t,n,e){var r=e("4588"),o=e("be13");t.exports=function(t){return function(n,e){var i,u,c=String(o(n)),a=r(e),f=c.length;return a<0||a>=f?t?"":void 0:(i=c.charCodeAt(a),i<55296||i>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536)}}},"0390":function(t,n,e){"use strict";var r=e("02f4")(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},"07e3":function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},"0bfb":function(t,n,e){"use strict";var r=e("cb7c");t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},"0fc9":function(t,n,e){var r=e("3a38"),o=Math.max,i=Math.min;t.exports=function(t,n){return t=r(t),t<0?o(t+n,0):i(t,n)}},1654:function(t,n,e){"use strict";var r=e("71c1")(!0);e("30f1")(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},1691:function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},"1af6":function(t,n,e){var r=e("63b6");r(r.S,"Array",{isArray:e("9003")})},"1bc3":function(t,n,e){var r=e("f772");t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},"1ec9":function(t,n,e){var r=e("f772"),o=e("e53d").document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},"20fd":function(t,n,e){"use strict";var r=e("d9f6"),o=e("aebd");t.exports=function(t,n,e){n in t?r.f(t,n,o(0,e)):t[n]=e}},"214f":function(t,n,e){"use strict";e("b0c5");var r=e("2aba"),o=e("32e9"),i=e("79e5"),u=e("be13"),c=e("2b4c"),a=e("520a"),f=c("species"),s=!i(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var p=c(t),d=!i(function(){var n={};return n[p]=function(){return 7},7!=""[t](n)}),v=d?!i(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[f]=function(){return e}),e[p](""),!n}):void 0;if(!d||!v||"replace"===t&&!s||"split"===t&&!l){var h=/./[p],b=e(u,p,""[t],function(t,n,e,r,o){return n.exec===a?d&&!o?{done:!0,value:h.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),g=b[0],y=b[1];r(String.prototype,t,g),o(RegExp.prototype,p,2==n?function(t,n){return y.call(t,this,n)}:function(t){return y.call(t,this)})}}},"230e":function(t,n,e){var r=e("d3f4"),o=e("7726").document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},"23c6":function(t,n,e){var r=e("2d95"),o=e("2b4c")("toStringTag"),i="Arguments"==r(function(){return arguments}()),u=function(t,n){try{return t[n]}catch(e){}};t.exports=function(t){var n,e,c;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=u(n=Object(t),o))?e:i?r(n):"Object"==(c=r(n))&&"function"==typeof n.callee?"Arguments":c}},"241e":function(t,n,e){var r=e("25eb");t.exports=function(t){return Object(r(t))}},"25eb":function(t,n){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},"294c":function(t,n){t.exports=function(t){try{return!!t()}catch(n){return!0}}},"2aba":function(t,n,e){var r=e("7726"),o=e("32e9"),i=e("69a8"),u=e("ca5a")("src"),c=e("fa5b"),a="toString",f=(""+c).split(a);e("8378").inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,e,c){var a="function"==typeof e;a&&(i(e,"name")||o(e,"name",n)),t[n]!==e&&(a&&(i(e,u)||o(e,u,t[n]?""+t[n]:f.join(String(n)))),t===r?t[n]=e:c?t[n]?t[n]=e:o(t,n,e):(delete t[n],o(t,n,e)))})(Function.prototype,a,function(){return"function"==typeof this&&this[u]||c.call(this)})},"2b4c":function(t,n,e){var r=e("5537")("wks"),o=e("ca5a"),i=e("7726").Symbol,u="function"==typeof i,c=t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))};c.store=r},"2d00":function(t,n){t.exports=!1},"2d95":function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},"2fdb":function(t,n,e){"use strict";var r=e("5ca1"),o=e("d2c8"),i="includes";r(r.P+r.F*e("5147")(i),"String",{includes:function(t){return!!~o(this,t,i).indexOf(t,arguments.length>1?arguments[1]:void 0)}})},"30f1":function(t,n,e){"use strict";var r=e("b8e3"),o=e("63b6"),i=e("9138"),u=e("35e8"),c=e("481b"),a=e("8f60"),f=e("45f2"),s=e("53e2"),l=e("5168")("iterator"),p=!([].keys&&"next"in[].keys()),d="@@iterator",v="keys",h="values",b=function(){return this};t.exports=function(t,n,e,g,y,x,m){a(e,n,g);var w,O,S,j=function(t){if(!p&&t in C)return C[t];switch(t){case v:return function(){return new e(this,t)};case h:return function(){return new e(this,t)}}return function(){return new e(this,t)}},_=n+" Iterator",M=y==h,T=!1,C=t.prototype,E=C[l]||C[d]||y&&C[y],A=E||j(y),P=y?M?j("entries"):A:void 0,I="Array"==n&&C.entries||E;if(I&&(S=s(I.call(new t)),S!==Object.prototype&&S.next&&(f(S,_,!0),r||"function"==typeof S[l]||u(S,l,b))),M&&E&&E.name!==h&&(T=!0,A=function(){return E.call(this)}),r&&!m||!p&&!T&&C[l]||u(C,l,A),c[n]=A,c[_]=b,y)if(w={values:M?A:j(h),keys:x?A:j(v),entries:P},m)for(O in w)O in C||i(C,O,w[O]);else o(o.P+o.F*(p||T),n,w);return w}},"32a6":function(t,n,e){var r=e("241e"),o=e("c3a1");e("ce7e")("keys",function(){return function(t){return o(r(t))}})},"32e9":function(t,n,e){var r=e("86cc"),o=e("4630");t.exports=e("9e1e")?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},"32fc":function(t,n,e){var r=e("e53d").document;t.exports=r&&r.documentElement},"335c":function(t,n,e){var r=e("6b4c");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},"355d":function(t,n){n.f={}.propertyIsEnumerable},"35e8":function(t,n,e){var r=e("d9f6"),o=e("aebd");t.exports=e("8e60")?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},"36c3":function(t,n,e){var r=e("335c"),o=e("25eb");t.exports=function(t){return r(o(t))}},3702:function(t,n,e){var r=e("481b"),o=e("5168")("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},"3a38":function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},"40c3":function(t,n,e){var r=e("6b4c"),o=e("5168")("toStringTag"),i="Arguments"==r(function(){return arguments}()),u=function(t,n){try{return t[n]}catch(e){}};t.exports=function(t){var n,e,c;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=u(n=Object(t),o))?e:i?r(n):"Object"==(c=r(n))&&"function"==typeof n.callee?"Arguments":c}},4588:function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},"45f2":function(t,n,e){var r=e("d9f6").f,o=e("07e3"),i=e("5168")("toStringTag");t.exports=function(t,n,e){t&&!o(t=e?t:t.prototype,i)&&r(t,i,{configurable:!0,value:n})}},4630:function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},"469f":function(t,n,e){e("6c1c"),e("1654"),t.exports=e("7d7b")},"481b":function(t,n){t.exports={}},"4aa6":function(t,n,e){t.exports=e("dc62")},"4bf8":function(t,n,e){var r=e("be13");t.exports=function(t){return Object(r(t))}},"4ee1":function(t,n,e){var r=e("5168")("iterator"),o=!1;try{var i=[7][r]();i["return"]=function(){o=!0},Array.from(i,function(){throw 2})}catch(u){}t.exports=function(t,n){if(!n&&!o)return!1;var e=!1;try{var i=[7],c=i[r]();c.next=function(){return{done:e=!0}},i[r]=function(){return c},t(i)}catch(u){}return e}},"50ed":function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},5147:function(t,n,e){var r=e("2b4c")("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(o){}}return!0}},5168:function(t,n,e){var r=e("dbdb")("wks"),o=e("62a0"),i=e("e53d").Symbol,u="function"==typeof i,c=t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))};c.store=r},5176:function(t,n,e){t.exports=e("51b6")},"51b6":function(t,n,e){e("a3c3"),t.exports=e("584a").Object.assign},"520a":function(t,n,e){"use strict";var r=e("0bfb"),o=RegExp.prototype.exec,i=String.prototype.replace,u=o,c="lastIndex",a=function(){var t=/a/,n=/b*/g;return o.call(t,"a"),o.call(n,"a"),0!==t[c]||0!==n[c]}(),f=void 0!==/()??/.exec("")[1],s=a||f;s&&(u=function(t){var n,e,u,s,l=this;return f&&(e=new RegExp("^"+l.source+"$(?!\\s)",r.call(l))),a&&(n=l[c]),u=o.call(l,t),a&&u&&(l[c]=l.global?u.index+u[0].length:n),f&&u&&u.length>1&&i.call(u[0],e,function(){for(s=1;s<arguments.length-2;s++)void 0===arguments[s]&&(u[s]=void 0)}),u}),t.exports=u},"53e2":function(t,n,e){var r=e("07e3"),o=e("241e"),i=e("5559")("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},"549b":function(t,n,e){"use strict";var r=e("d864"),o=e("63b6"),i=e("241e"),u=e("b0dc"),c=e("3702"),a=e("b447"),f=e("20fd"),s=e("7cd6");o(o.S+o.F*!e("4ee1")(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,o,l,p=i(t),d="function"==typeof this?this:Array,v=arguments.length,h=v>1?arguments[1]:void 0,b=void 0!==h,g=0,y=s(p);if(b&&(h=r(h,v>2?arguments[2]:void 0,2)),void 0==y||d==Array&&c(y))for(n=a(p.length),e=new d(n);n>g;g++)f(e,g,b?h(p[g],g):p[g]);else for(l=y.call(p),e=new d;!(o=l.next()).done;g++)f(e,g,b?u(l,h,[o.value,g],!0):o.value);return e.length=g,e}})},"54a1":function(t,n,e){e("6c1c"),e("1654"),t.exports=e("95d5")},5537:function(t,n,e){var r=e("8378"),o=e("7726"),i="__core-js_shared__",u=o[i]||(o[i]={});(t.exports=function(t,n){return u[t]||(u[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e("2d00")?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},5559:function(t,n,e){var r=e("dbdb")("keys"),o=e("62a0");t.exports=function(t){return r[t]||(r[t]=o(t))}},"584a":function(t,n){var e=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=e)},"5b4e":function(t,n,e){var r=e("36c3"),o=e("b447"),i=e("0fc9");t.exports=function(t){return function(n,e,u){var c,a=r(n),f=o(a.length),s=i(u,f);if(t&&e!=e){while(f>s)if(c=a[s++],c!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===e)return t||s||0;return!t&&-1}}},"5ca1":function(t,n,e){var r=e("7726"),o=e("8378"),i=e("32e9"),u=e("2aba"),c=e("9b43"),a="prototype",f=function(t,n,e){var s,l,p,d,v=t&f.F,h=t&f.G,b=t&f.S,g=t&f.P,y=t&f.B,x=h?r:b?r[n]||(r[n]={}):(r[n]||{})[a],m=h?o:o[n]||(o[n]={}),w=m[a]||(m[a]={});for(s in h&&(e=n),e)l=!v&&x&&void 0!==x[s],p=(l?x:e)[s],d=y&&l?c(p,r):g&&"function"==typeof p?c(Function.call,p):p,x&&u(x,s,p,t&f.U),m[s]!=p&&i(m,s,d),g&&w[s]!=p&&(w[s]=p)};r.core=o,f.F=1,f.G=2,f.S=4,f.P=8,f.B=16,f.W=32,f.U=64,f.R=128,t.exports=f},"5d73":function(t,n,e){t.exports=e("469f")},"5f1b":function(t,n,e){"use strict";var r=e("23c6"),o=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"===typeof e){var i=e.call(t,n);if("object"!==typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},"626a":function(t,n,e){var r=e("2d95");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},"62a0":function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},"63b6":function(t,n,e){var r=e("e53d"),o=e("584a"),i=e("d864"),u=e("35e8"),c=e("07e3"),a="prototype",f=function(t,n,e){var s,l,p,d=t&f.F,v=t&f.G,h=t&f.S,b=t&f.P,g=t&f.B,y=t&f.W,x=v?o:o[n]||(o[n]={}),m=x[a],w=v?r:h?r[n]:(r[n]||{})[a];for(s in v&&(e=n),e)l=!d&&w&&void 0!==w[s],l&&c(x,s)||(p=l?w[s]:e[s],x[s]=v&&"function"!=typeof w[s]?e[s]:g&&l?i(p,r):y&&w[s]==p?function(t){var n=function(n,e,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(n);case 2:return new t(n,e)}return new t(n,e,r)}return t.apply(this,arguments)};return n[a]=t[a],n}(p):b&&"function"==typeof p?i(Function.call,p):p,b&&((x.virtual||(x.virtual={}))[s]=p,t&f.R&&m&&!m[s]&&u(m,s,p)))};f.F=1,f.G=2,f.S=4,f.P=8,f.B=16,f.W=32,f.U=64,f.R=128,t.exports=f},6762:function(t,n,e){"use strict";var r=e("5ca1"),o=e("c366")(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e("9c6c")("includes")},6821:function(t,n,e){var r=e("626a"),o=e("be13");t.exports=function(t){return r(o(t))}},"69a8":function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},"6a99":function(t,n,e){var r=e("d3f4");t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},"6b4c":function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},"6c1c":function(t,n,e){e("c367");for(var r=e("e53d"),o=e("35e8"),i=e("481b"),u=e("5168")("toStringTag"),c="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),a=0;a<c.length;a++){var f=c[a],s=r[f],l=s&&s.prototype;l&&!l[u]&&o(l,u,f),i[f]=i.Array}},"71c1":function(t,n,e){var r=e("3a38"),o=e("25eb");t.exports=function(t){return function(n,e){var i,u,c=String(o(n)),a=r(e),f=c.length;return a<0||a>=f?t?"":void 0:(i=c.charCodeAt(a),i<55296||i>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536)}}},7726:function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},"774e":function(t,n,e){t.exports=e("d2d5")},"77f1":function(t,n,e){var r=e("4588"),o=Math.max,i=Math.min;t.exports=function(t,n){return t=r(t),t<0?o(t+n,0):i(t,n)}},"794b":function(t,n,e){t.exports=!e("8e60")&&!e("294c")(function(){return 7!=Object.defineProperty(e("1ec9")("div"),"a",{get:function(){return 7}}).a})},"79aa":function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},"79e5":function(t,n){t.exports=function(t){try{return!!t()}catch(n){return!0}}},"7cd6":function(t,n,e){var r=e("40c3"),o=e("5168")("iterator"),i=e("481b");t.exports=e("584a").getIteratorMethod=function(t){if(void 0!=t)return t[o]||t["@@iterator"]||i[r(t)]}},"7d7b":function(t,n,e){var r=e("e4ae"),o=e("7cd6");t.exports=e("584a").getIterator=function(t){var n=o(t);if("function"!=typeof n)throw TypeError(t+" is not iterable!");return r(n.call(t))}},"7e90":function(t,n,e){var r=e("d9f6"),o=e("e4ae"),i=e("c3a1");t.exports=e("8e60")?Object.defineProperties:function(t,n){o(t);var e,u=i(n),c=u.length,a=0;while(c>a)r.f(t,e=u[a++],n[e]);return t}},8378:function(t,n){var e=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=e)},8436:function(t,n){t.exports=function(){}},"86cc":function(t,n,e){var r=e("cb7c"),o=e("c69a"),i=e("6a99"),u=Object.defineProperty;n.f=e("9e1e")?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return u(t,n,e)}catch(c){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},"8aae":function(t,n,e){e("32a6"),t.exports=e("584a").Object.keys},"8e60":function(t,n,e){t.exports=!e("294c")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},"8f60":function(t,n,e){"use strict";var r=e("a159"),o=e("aebd"),i=e("45f2"),u={};e("35e8")(u,e("5168")("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:o(1,e)}),i(t,n+" Iterator")}},9003:function(t,n,e){var r=e("6b4c");t.exports=Array.isArray||function(t){return"Array"==r(t)}},9138:function(t,n,e){t.exports=e("35e8")},9306:function(t,n,e){"use strict";var r=e("c3a1"),o=e("9aa9"),i=e("355d"),u=e("241e"),c=e("335c"),a=Object.assign;t.exports=!a||e("294c")(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=a({},t)[e]||Object.keys(a({},n)).join("")!=r})?function(t,n){var e=u(t),a=arguments.length,f=1,s=o.f,l=i.f;while(a>f){var p,d=c(arguments[f++]),v=s?r(d).concat(s(d)):r(d),h=v.length,b=0;while(h>b)l.call(d,p=v[b++])&&(e[p]=d[p])}return e}:a},9427:function(t,n,e){var r=e("63b6");r(r.S,"Object",{create:e("a159")})},"95d5":function(t,n,e){var r=e("40c3"),o=e("5168")("iterator"),i=e("481b");t.exports=e("584a").isIterable=function(t){var n=Object(t);return void 0!==n[o]||"@@iterator"in n||i.hasOwnProperty(r(n))}},"9aa9":function(t,n){n.f=Object.getOwnPropertySymbols},"9b43":function(t,n,e){var r=e("d8e8");t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},"9c6c":function(t,n,e){var r=e("2b4c")("unscopables"),o=Array.prototype;void 0==o[r]&&e("32e9")(o,r,{}),t.exports=function(t){o[r][t]=!0}},"9def":function(t,n,e){var r=e("4588"),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},"9e1e":function(t,n,e){t.exports=!e("79e5")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},a159:function(t,n,e){var r=e("e4ae"),o=e("7e90"),i=e("1691"),u=e("5559")("IE_PROTO"),c=function(){},a="prototype",f=function(){var t,n=e("1ec9")("iframe"),r=i.length,o="<",u=">";n.style.display="none",e("32fc").appendChild(n),n.src="javascript:",t=n.contentWindow.document,t.open(),t.write(o+"script"+u+"document.F=Object"+o+"/script"+u),t.close(),f=t.F;while(r--)delete f[a][i[r]];return f()};t.exports=Object.create||function(t,n){var e;return null!==t?(c[a]=r(t),e=new c,c[a]=null,e[u]=t):e=f(),void 0===n?e:o(e,n)}},a352:function(n,e){n.exports=t},a3c3:function(t,n,e){var r=e("63b6");r(r.S+r.F,"Object",{assign:e("9306")})},a481:function(t,n,e){"use strict";var r=e("cb7c"),o=e("4bf8"),i=e("9def"),u=e("4588"),c=e("0390"),a=e("5f1b"),f=Math.max,s=Math.min,l=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,d=/\$([$&`']|\d\d?)/g,v=function(t){return void 0===t?t:String(t)};e("214f")("replace",2,function(t,n,e,h){return[function(r,o){var i=t(this),u=void 0==r?void 0:r[n];return void 0!==u?u.call(r,i,o):e.call(String(i),r,o)},function(t,n){var o=h(e,t,this,n);if(o.done)return o.value;var l=r(t),p=String(this),d="function"===typeof n;d||(n=String(n));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}var x=[];while(1){var m=a(l,p);if(null===m)break;if(x.push(m),!g)break;var w=String(m[0]);""===w&&(l.lastIndex=c(p,i(l.lastIndex),y))}for(var O="",S=0,j=0;j<x.length;j++){m=x[j];for(var _=String(m[0]),M=f(s(u(m.index),p.length),0),T=[],C=1;C<m.length;C++)T.push(v(m[C]));var E=m.groups;if(d){var A=[_].concat(T,M,p);void 0!==E&&A.push(E);var P=String(n.apply(void 0,A))}else P=b(_,p,M,T,E,n);M>=S&&(O+=p.slice(S,M)+P,S=M+_.length)}return O+p.slice(S)}];function b(t,n,r,i,u,c){var a=r+t.length,f=i.length,s=d;return void 0!==u&&(u=o(u),s=p),e.call(c,s,function(e,o){var c;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(a);case"<":c=u[o.slice(1,-1)];break;default:var s=+o;if(0===s)return e;if(s>f){var p=l(s/10);return 0===p?e:p<=f?void 0===i[p-1]?o.charAt(1):i[p-1]+o.charAt(1):e}c=i[s-1]}return void 0===c?"":c})}})},a4bb:function(t,n,e){t.exports=e("8aae")},a745:function(t,n,e){t.exports=e("f410")},aae3:function(t,n,e){var r=e("d3f4"),o=e("2d95"),i=e("2b4c")("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},aebd:function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},b0c5:function(t,n,e){"use strict";var r=e("520a");e("5ca1")({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},b0dc:function(t,n,e){var r=e("e4ae");t.exports=function(t,n,e,o){try{return o?n(r(e)[0],e[1]):n(e)}catch(u){var i=t["return"];throw void 0!==i&&r(i.call(t)),u}}},b447:function(t,n,e){var r=e("3a38"),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},b8e3:function(t,n){t.exports=!0},be13:function(t,n){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},c366:function(t,n,e){var r=e("6821"),o=e("9def"),i=e("77f1");t.exports=function(t){return function(n,e,u){var c,a=r(n),f=o(a.length),s=i(u,f);if(t&&e!=e){while(f>s)if(c=a[s++],c!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===e)return t||s||0;return!t&&-1}}},c367:function(t,n,e){"use strict";var r=e("8436"),o=e("50ed"),i=e("481b"),u=e("36c3");t.exports=e("30f1")(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,o(1)):o(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},c3a1:function(t,n,e){var r=e("e6f3"),o=e("1691");t.exports=Object.keys||function(t){return r(t,o)}},c649:function(t,n,e){"use strict";(function(t){e.d(n,"c",function(){return l}),e.d(n,"a",function(){return f}),e.d(n,"b",function(){return u}),e.d(n,"d",function(){return s});e("a481");var r=e("4aa6"),o=e.n(r);function i(){return"undefined"!==typeof window?window.console:t.console}var u=i();function c(t){var n=o()(null);return function(e){var r=n[e];return r||(n[e]=t(e))}}var a=/-(\w)/g,f=c(function(t){return t.replace(a,function(t,n){return n?n.toUpperCase():""})});function s(t){null!==t.parentElement&&t.parentElement.removeChild(t)}function l(t,n,e){var r=0===e?t.children[0]:t.children[e-1].nextSibling;t.insertBefore(n,r)}}).call(this,e("c8ba"))},c69a:function(t,n,e){t.exports=!e("9e1e")&&!e("79e5")(function(){return 7!=Object.defineProperty(e("230e")("div"),"a",{get:function(){return 7}}).a})},c8ba:function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(r){"object"===typeof window&&(e=window)}t.exports=e},c8bb:function(t,n,e){t.exports=e("54a1")},ca5a:function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},cb7c:function(t,n,e){var r=e("d3f4");t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},ce7e:function(t,n,e){var r=e("63b6"),o=e("584a"),i=e("294c");t.exports=function(t,n){var e=(o.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*i(function(){e(1)}),"Object",u)}},d2c8:function(t,n,e){var r=e("aae3"),o=e("be13");t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(o(t))}},d2d5:function(t,n,e){e("1654"),e("549b"),t.exports=e("584a").Array.from},d3f4:function(t,n){t.exports=function(t){return"object"===typeof t?null!==t:"function"===typeof t}},d864:function(t,n,e){var r=e("79aa");t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},d8e8:function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},d9f6:function(t,n,e){var r=e("e4ae"),o=e("794b"),i=e("1bc3"),u=Object.defineProperty;n.f=e("8e60")?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return u(t,n,e)}catch(c){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},dbdb:function(t,n,e){var r=e("584a"),o=e("e53d"),i="__core-js_shared__",u=o[i]||(o[i]={});(t.exports=function(t,n){return u[t]||(u[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e("b8e3")?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},dc62:function(t,n,e){e("9427");var r=e("584a").Object;t.exports=function(t,n){return r.create(t,n)}},e4ae:function(t,n,e){var r=e("f772");t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},e53d:function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},e6f3:function(t,n,e){var r=e("07e3"),o=e("36c3"),i=e("5b4e")(!1),u=e("5559")("IE_PROTO");t.exports=function(t,n){var e,c=o(t),a=0,f=[];for(e in c)e!=u&&r(c,e)&&f.push(e);while(n.length>a)r(c,e=n[a++])&&(~i(f,e)||f.push(e));return f}},f410:function(t,n,e){e("1af6"),t.exports=e("584a").Array.isArray},f559:function(t,n,e){"use strict";var r=e("5ca1"),o=e("9def"),i=e("d2c8"),u="startsWith",c=""[u];r(r.P+r.F*e("5147")(u),"String",{startsWith:function(t){var n=i(this,t,u),e=o(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return c?c.call(n,r,e):n.slice(e,e+r.length)===r}})},f772:function(t,n){t.exports=function(t){return"object"===typeof t?null!==t:"function"===typeof t}},fa5b:function(t,n,e){t.exports=e("5537")("native-function-to-string",Function.toString)},fb15:function(t,n,e){"use strict";var r;(e.r(n),"undefined"!==typeof window)&&((r=window.document.currentScript)&&(r=r.src.match(/(.+\/)[^\/]+\.js(\?.*)?$/))&&(e.p=r[1]));var o=e("5176"),i=e.n(o),u=(e("f559"),e("a4bb")),c=e.n(u),a=(e("6762"),e("2fdb"),e("a745")),f=e.n(a);function s(t){if(f()(t))return t}var l=e("5d73"),p=e.n(l);function d(t,n){var e=[],r=!0,o=!1,i=void 0;try{for(var u,c=p()(t);!(r=(u=c.next()).done);r=!0)if(e.push(u.value),n&&e.length===n)break}catch(a){o=!0,i=a}finally{try{r||null==c["return"]||c["return"]()}finally{if(o)throw i}}return e}function v(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function h(t,n){return s(t)||d(t,n)||v()}function b(t){if(f()(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}var g=e("774e"),y=e.n(g),x=e("c8bb"),m=e.n(x);function w(t){if(m()(Object(t))||"[object Arguments]"===Object.prototype.toString.call(t))return y()(t)}function O(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function S(t){return b(t)||w(t)||O()}var j=e("a352"),_=e.n(j),M=e("c649");function T(t,n,e){return void 0===e?t:(t=t||{},t[n]=e,t)}function C(t,n){return t.map(function(t){return t.elm}).indexOf(n)}function E(t,n,e,r){if(!t)return[];var o=t.map(function(t){return t.elm}),i=n.length-r,u=S(n).map(function(t,n){return n>=i?o.length:o.indexOf(t)});return e?u.filter(function(t){return-1!==t}):u}function A(t,n){var e=this;this.$nextTick(function(){return e.$emit(t.toLowerCase(),n)})}function P(t){var n=this;return function(e){null!==n.realList&&n["onDrag"+t](e),A.call(n,t,e)}}function I(t){if(!t||1!==t.length)return!1;var n=h(t,1),e=n[0].componentOptions;return!!e&&["transition-group","TransitionGroup"].includes(e.tag)}function L(t,n){var e=n.header,r=n.footer,o=0,i=0;return e&&(o=e.length,t=t?[].concat(S(e),S(t)):S(e)),r&&(i=r.length,t=t?[].concat(S(t),S(r)):S(r)),{children:t,headerOffset:o,footerOffset:i}}function F(t,n){var e=null,r=function(t,n){e=T(e,t,n)},o=c()(t).filter(function(t){return"id"===t||t.startsWith("data-")}).reduce(function(n,e){return n[e]=t[e],n},{});if(r("attrs",o),!n)return e;var u=n.on,a=n.props,f=n.attrs;return r("on",u),r("props",a),i()(e.attrs,f),e}var $=["Start","Add","Remove","Update","End"],k=["Choose","Sort","Filter","Clone"],D=["Move"].concat($,k).map(function(t){return"on"+t}),R=null,V={options:Object,list:{type:Array,required:!1,default:null},value:{type:Array,required:!1,default:null},noTransitionOnDrag:{type:Boolean,default:!1},clone:{type:Function,default:function(t){return t}},element:{type:String,default:"div"},tag:{type:String,default:null},move:{type:Function,default:null},componentData:{type:Object,required:!1,default:null}},N={name:"draggable",inheritAttrs:!1,props:V,data:function(){return{transitionMode:!1,noneFunctionalComponentMode:!1,init:!1}},render:function(t){var n=this.$slots.default;this.transitionMode=I(n);var e=L(n,this.$slots),r=e.children,o=e.headerOffset,i=e.footerOffset;this.headerOffset=o,this.footerOffset=i;var u=F(this.$attrs,this.componentData);return t(this.getTag(),u,r)},created:function(){null!==this.list&&null!==this.value&&M["b"].error("Value and list props are mutually exclusive! Please set one or another."),"div"!==this.element&&M["b"].warn("Element props is deprecated please use tag props instead. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#element-props"),void 0!==this.options&&M["b"].warn("Options props is deprecated, add sortable options directly as vue.draggable item, or use v-bind. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#options-props")},mounted:function(){var t=this;if(this.noneFunctionalComponentMode=this.getTag().toLowerCase()!==this.$el.nodeName.toLowerCase(),this.noneFunctionalComponentMode&&this.transitionMode)throw new Error("Transition-group inside component is not supported. Please alter tag value or remove transition-group. Current tag value: ".concat(this.getTag()));var n={};$.forEach(function(e){n["on"+e]=P.call(t,e)}),k.forEach(function(e){n["on"+e]=A.bind(t,e)});var e=c()(this.$attrs).reduce(function(n,e){return n[Object(M["a"])(e)]=t.$attrs[e],n},{}),r=i()({},this.options,e,n,{onMove:function(n,e){return t.onDragMove(n,e)}});!("draggable"in r)&&(r.draggable=">*"),this._sortable=new _.a(this.rootContainer,r),this.computeIndexes()},beforeDestroy:function(){void 0!==this._sortable&&this._sortable.destroy()},computed:{rootContainer:function(){return this.transitionMode?this.$el.children[0]:this.$el},realList:function(){return this.list?this.list:this.value}},watch:{options:{handler:function(t){this.updateOptions(t)},deep:!0},$attrs:{handler:function(t){this.updateOptions(t)},deep:!0},realList:function(){this.computeIndexes()}},methods:{getTag:function(){return this.tag||this.element},updateOptions:function(t){for(var n in t){var e=Object(M["a"])(n);-1===D.indexOf(e)&&this._sortable.option(e,t[n])}},getChildrenNodes:function(){if(this.init||(this.noneFunctionalComponentMode=this.noneFunctionalComponentMode&&1===this.$children.length,this.init=!0),this.noneFunctionalComponentMode)return this.$children[0].$slots.default;var t=this.$slots.default;return this.transitionMode?t[0].child.$slots.default:t},computeIndexes:function(){var t=this;this.$nextTick(function(){t.visibleIndexes=E(t.getChildrenNodes(),t.rootContainer.children,t.transitionMode,t.footerOffset)})},getUnderlyingVm:function(t){var n=C(this.getChildrenNodes()||[],t);if(-1===n)return null;var e=this.realList[n];return{index:n,element:e}},getUnderlyingPotencialDraggableComponent:function(t){var n=t.__vue__;return n&&n.$options&&"transition-group"===n.$options._componentTag?n.$parent:n},emitChanges:function(t){var n=this;this.$nextTick(function(){n.$emit("change",t)})},alterList:function(t){if(this.list)t(this.list);else{var n=S(this.value);t(n),this.$emit("input",n)}},spliceList:function(){var t=arguments,n=function(n){return n.splice.apply(n,S(t))};this.alterList(n)},updatePosition:function(t,n){var e=function(e){return e.splice(n,0,e.splice(t,1)[0])};this.alterList(e)},getRelatedContextFromMoveEvent:function(t){var n=t.to,e=t.related,r=this.getUnderlyingPotencialDraggableComponent(n);if(!r)return{component:r};var o=r.realList,u={list:o,component:r};if(n!==e&&o&&r.getUnderlyingVm){var c=r.getUnderlyingVm(e);if(c)return i()(c,u)}return u},getVmIndex:function(t){var n=this.visibleIndexes,e=n.length;return t>e-1?e:n[t]},getComponent:function(){return this.$slots.default[0].componentInstance},resetTransitionData:function(t){if(this.noTransitionOnDrag&&this.transitionMode){var n=this.getChildrenNodes();n[t].data=null;var e=this.getComponent();e.children=[],e.kept=void 0}},onDragStart:function(t){this.context=this.getUnderlyingVm(t.item),t.item._underlying_vm_=this.clone(this.context.element),R=t.item},onDragAdd:function(t){var n=t.item._underlying_vm_;if(void 0!==n){Object(M["d"])(t.item);var e=this.getVmIndex(t.newIndex);this.spliceList(e,0,n),this.computeIndexes();var r={element:n,newIndex:e};this.emitChanges({added:r})}},onDragRemove:function(t){if(Object(M["c"])(this.rootContainer,t.item,t.oldIndex),"clone"!==t.pullMode){var n=this.context.index;this.spliceList(n,1);var e={element:this.context.element,oldIndex:n};this.resetTransitionData(n),this.emitChanges({removed:e})}else Object(M["d"])(t.clone)},onDragUpdate:function(t){Object(M["d"])(t.item),Object(M["c"])(t.from,t.item,t.oldIndex);var n=this.context.index,e=this.getVmIndex(t.newIndex);this.updatePosition(n,e);var r={element:this.context.element,oldIndex:n,newIndex:e};this.emitChanges({moved:r})},updateProperty:function(t,n){t.hasOwnProperty(n)&&(t[n]+=this.headerOffset)},computeFutureIndex:function(t,n){if(!t.element)return 0;var e=S(n.to.children).filter(function(t){return"none"!==t.style["display"]}),r=e.indexOf(n.related),o=t.component.getVmIndex(r),i=-1!==e.indexOf(R);return i||!n.willInsertAfter?o:o+1},onDragMove:function(t,n){var e=this.move;if(!e||!this.realList)return!0;var r=this.getRelatedContextFromMoveEvent(t),o=this.context,u=this.computeFutureIndex(r,t);i()(o,{futureIndex:u});var c=i()({},t,{relatedContext:r,draggedContext:o});return e(c,n)},onDragEnd:function(){this.computeIndexes(),R=null}}};"undefined"!==typeof window&&"Vue"in window&&window.Vue.component("draggable",N);var U=N;n["default"]=U}})["default"]});
	//# sourceMappingURL=vuedraggable.umd.min.js.map

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**!
	 * Sortable
	 * @author	RubaXa   <trash@rubaxa.org>
	 * @author	owenm    <owen23355@gmail.com>
	 * @license MIT
	 */

	(function sortableModule(factory) {
		"use strict";

		if (true) {
			!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}
		else if (typeof module != "undefined" && typeof module.exports != "undefined") {
			module.exports = factory();
		}
		else {
			/* jshint sub:true */
			window["Sortable"] = factory();
		}
	})(function sortableFactory() {
		"use strict";

		if (typeof window === "undefined" || !window.document) {
			return function sortableError() {
				throw new Error("Sortable.js requires a window with a document");
			};
		}

		var dragEl,
			parentEl,
			ghostEl,
			cloneEl,
			rootEl,
			nextEl,
			lastDownEl,

			scrollEl,
			scrollParentEl,
			scrollCustomFn,

			oldIndex,
			newIndex,

			activeGroup,
			putSortable,

			autoScrolls = [],
			scrolling = false,

			awaitingDragStarted = false,
			ignoreNextClick = false,
			sortables = [],

			pointerElemChangedInterval,
			lastPointerElemX,
			lastPointerElemY,

			tapEvt,
			touchEvt,

			moved,


			lastTarget,
			lastDirection,
			pastFirstInvertThresh = false,
			isCircumstantialInvert = false,
			lastMode, // 'swap' or 'insert'

			targetMoveDistance,

			// For positioning ghost absolutely
			ghostRelativeParent,
			ghostRelativeParentInitialScroll = [], // (left, top)


			forRepaintDummy,
			realDragElRect, // dragEl rect after current animation

			/** @const */
			R_SPACE = /\s+/g,

			expando = 'Sortable' + (new Date).getTime(),

			win = window,
			document = win.document,
			parseInt = win.parseInt,
			setTimeout = win.setTimeout,

			$ = win.jQuery || win.Zepto,
			Polymer = win.Polymer,

			captureMode = {
				capture: false,
				passive: false
			},

			IE11OrLess = !!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\.|msie|iemobile)/i),
			Edge = !!navigator.userAgent.match(/Edge/i),
			FireFox = !!navigator.userAgent.match(/firefox/i),
			Safari = !!(navigator.userAgent.match(/safari/i) && !navigator.userAgent.match(/chrome/i) && !navigator.userAgent.match(/android/i)),
			IOS = !!(navigator.userAgent.match(/iP(ad|od|hone)/i)),

			PositionGhostAbsolutely = IOS,

			CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',

			// This will not pass for IE9, because IE9 DnD only works on anchors
			supportDraggable = ('draggable' in document.createElement('div')),

			supportCssPointerEvents = (function() {
				// false when <= IE11
				if (IE11OrLess) {
					return false;
				}
				var el = document.createElement('x');
				el.style.cssText = 'pointer-events:auto';
				return el.style.pointerEvents === 'auto';
			})(),

			_silent = false,
			_alignedSilent = false,

			abs = Math.abs,
			min = Math.min,
			max = Math.max,

			savedInputChecked = [],

			_detectDirection = function(el, options) {
				var elCSS = _css(el),
					elWidth = parseInt(elCSS.width)
						- parseInt(elCSS.paddingLeft)
						- parseInt(elCSS.paddingRight)
						- parseInt(elCSS.borderLeftWidth)
						- parseInt(elCSS.borderRightWidth),
					child1 = _getChild(el, 0, options),
					child2 = _getChild(el, 1, options),
					firstChildCSS = child1 && _css(child1),
					secondChildCSS = child2 && _css(child2),
					firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + _getRect(child1).width,
					secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + _getRect(child2).width;

				if (elCSS.display === 'flex') {
					return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse'
					? 'vertical' : 'horizontal';
				}

				if (elCSS.display === 'grid') {
					return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
				}

				if (child1 && firstChildCSS.float !== 'none') {
					var touchingSideChild2 = firstChildCSS.float === 'left' ? 'left' : 'right';

					return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ?
						'vertical' : 'horizontal';
				}

				return (child1 &&
					(
						firstChildCSS.display === 'block' ||
						firstChildCSS.display === 'flex' ||
						firstChildCSS.display === 'table' ||
						firstChildCSS.display === 'grid' ||
						firstChildWidth >= elWidth &&
						elCSS[CSSFloatProperty] === 'none' ||
						child2 &&
						elCSS[CSSFloatProperty] === 'none' &&
						firstChildWidth + secondChildWidth > elWidth
					) ?
					'vertical' : 'horizontal'
				);
			},

			/**
			 * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
			 * @param  {Number} x      X position
			 * @param  {Number} y      Y position
			 * @return {HTMLElement}   Element of the first found nearest Sortable
			 */
			_detectNearestEmptySortable = function(x, y) {
				for (var i = 0; i < sortables.length; i++) {
					if (_lastChild(sortables[i])) continue;

					var rect = _getRect(sortables[i]),
						threshold = sortables[i][expando].options.emptyInsertThreshold,
						insideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),
						insideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);

					if (insideHorizontally && insideVertically) {
						return sortables[i];
					}
				}
			},

			_isClientInRowColumn = function(x, y, el, axis, options) {
				var targetRect = _getRect(el),
					targetS1Opp = axis === 'vertical' ? targetRect.left : targetRect.top,
					targetS2Opp = axis === 'vertical' ? targetRect.right : targetRect.bottom,
					mouseOnOppAxis = axis === 'vertical' ? x : y;

				return targetS1Opp < mouseOnOppAxis && mouseOnOppAxis < targetS2Opp;
			},

			_isElInRowColumn = function(el1, el2, axis) {
				var el1Rect = el1 === dragEl && realDragElRect || _getRect(el1),
					el2Rect = el2 === dragEl && realDragElRect || _getRect(el2),
					el1S1Opp = axis === 'vertical' ? el1Rect.left : el1Rect.top,
					el1S2Opp = axis === 'vertical' ? el1Rect.right : el1Rect.bottom,
					el1OppLength = axis === 'vertical' ? el1Rect.width : el1Rect.height,
					el2S1Opp = axis === 'vertical' ? el2Rect.left : el2Rect.top,
					el2S2Opp = axis === 'vertical' ? el2Rect.right : el2Rect.bottom,
					el2OppLength = axis === 'vertical' ? el2Rect.width : el2Rect.height;

				return (
					el1S1Opp === el2S1Opp ||
					el1S2Opp === el2S2Opp ||
					(el1S1Opp + el1OppLength / 2) === (el2S1Opp + el2OppLength / 2)
				);
			},

			_getParentAutoScrollElement = function(el, includeSelf) {
				// skip to window
				if (!el || !el.getBoundingClientRect) return _getWindowScrollingElement();

				var elem = el;
				var gotSelf = false;
				do {
					// we don't need to get elem css if it isn't even overflowing in the first place (performance)
					if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
						var elemCSS = _css(elem);
						if (
							elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') ||
							elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')
						) {
							if (!elem || !elem.getBoundingClientRect || elem === document.body) return _getWindowScrollingElement();

							if (gotSelf || includeSelf) return elem;
							gotSelf = true;
						}
					}
				/* jshint boss:true */
				} while (elem = elem.parentNode);

				return _getWindowScrollingElement();
			},

			_getWindowScrollingElement = function() {
				if (IE11OrLess) {
					return document.documentElement;
				} else {
					return document.scrollingElement;
				}
			},

			_scrollBy = function(el, x, y) {
				el.scrollLeft += x;
				el.scrollTop += y;
			},

			_autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl, /**Boolean*/isFallback) {
				// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
				if (options.scroll) {
					var _this = rootEl ? rootEl[expando] : window,
						sens = options.scrollSensitivity,
						speed = options.scrollSpeed,

						x = evt.clientX,
						y = evt.clientY,

						winScroller = _getWindowScrollingElement(),

						scrollThisInstance = false;

					// Detect scrollEl
					if (scrollParentEl !== rootEl) {
						_clearAutoScrolls();

						scrollEl = options.scroll;
						scrollCustomFn = options.scrollFn;

						if (scrollEl === true) {
							scrollEl = _getParentAutoScrollElement(rootEl, true);
							scrollParentEl = scrollEl;
						}
					}


					var layersOut = 0;
					var currentParent = scrollEl;
					do {
						var	el = currentParent,
							rect = _getRect(el),

							top = rect.top,
							bottom = rect.bottom,
							left = rect.left,
							right = rect.right,

							width = rect.width,
							height = rect.height,

							scrollWidth,
							scrollHeight,

							css,

							vx,
							vy,

							canScrollX,
							canScrollY,

							scrollPosX,
							scrollPosY;


						scrollWidth = el.scrollWidth;
						scrollHeight = el.scrollHeight;

						css = _css(el);

						scrollPosX = el.scrollLeft;
						scrollPosY = el.scrollTop;

						if (el === winScroller) {
							canScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll' || css.overflowX === 'visible');
							canScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll' || css.overflowY === 'visible');
						} else {
							canScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll');
							canScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll');
						}

						vx = canScrollX && (abs(right - x) <= sens && (scrollPosX + width) < scrollWidth) - (abs(left - x) <= sens && !!scrollPosX);

						vy = canScrollY && (abs(bottom - y) <= sens && (scrollPosY + height) < scrollHeight) - (abs(top - y) <= sens && !!scrollPosY);


						if (!autoScrolls[layersOut]) {
							for (var i = 0; i <= layersOut; i++) {
								if (!autoScrolls[i]) {
									autoScrolls[i] = {};
								}
							}
						}

						if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
							autoScrolls[layersOut].el = el;
							autoScrolls[layersOut].vx = vx;
							autoScrolls[layersOut].vy = vy;

							clearInterval(autoScrolls[layersOut].pid);

							if (el && (vx != 0 || vy != 0)) {
								scrollThisInstance = true;
								/* jshint loopfunc:true */
								autoScrolls[layersOut].pid = setInterval((function () {
									// emulate drag over during autoscroll (fallback), emulating native DnD behaviour
									if (isFallback && this.layer === 0) {
										Sortable.active._emulateDragOver(true);
										Sortable.active._onTouchMove(touchEvt, true);
									}
									var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
									var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

									if ('function' === typeof(scrollCustomFn)) {
										if (scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt, touchEvt, autoScrolls[this.layer].el) !== 'continue') {
											return;
										}
									}

									_scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
								}).bind({layer: layersOut}), 24);
							}
						}
						layersOut++;
					} while (options.bubbleScroll && currentParent !== winScroller && (currentParent = _getParentAutoScrollElement(currentParent, false)));
					scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
				}
			}, 30),

			_clearAutoScrolls = function () {
				autoScrolls.forEach(function(autoScroll) {
					clearInterval(autoScroll.pid);
				});
				autoScrolls = [];
			},

			_prepareGroup = function (options) {
				function toFn(value, pull) {
					return function(to, from, dragEl, evt) {
						var sameGroup = to.options.group.name &&
										from.options.group.name &&
										to.options.group.name === from.options.group.name;

						if (value == null && (pull || sameGroup)) {
							// Default pull value
							// Default pull and put value if same group
							return true;
						} else if (value == null || value === false) {
							return false;
						} else if (pull && value === 'clone') {
							return value;
						} else if (typeof value === 'function') {
							return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
						} else {
							var otherGroup = (pull ? to : from).options.group.name;

							return (value === true ||
							(typeof value === 'string' && value === otherGroup) ||
							(value.join && value.indexOf(otherGroup) > -1));
						}
					};
				}

				var group = {};
				var originalGroup = options.group;

				if (!originalGroup || typeof originalGroup != 'object') {
					originalGroup = {name: originalGroup};
				}

				group.name = originalGroup.name;
				group.checkPull = toFn(originalGroup.pull, true);
				group.checkPut = toFn(originalGroup.put);
				group.revertClone = originalGroup.revertClone;

				options.group = group;
			},

			_checkAlignment = function(evt) {
				if (!dragEl || !dragEl.parentNode) return;
				dragEl.parentNode[expando] && dragEl.parentNode[expando]._computeIsAligned(evt);
			},

			_isTrueParentSortable = function(el, target) {
				var trueParent = target;
				while (!trueParent[expando]) {
					trueParent = trueParent.parentNode;
				}

				return el === trueParent;
			},

			_artificalBubble = function(sortable, originalEvt, method) {
				// Artificial IE bubbling
				var nextParent = sortable.parentNode;
				while (nextParent && !nextParent[expando]) {
					nextParent = nextParent.parentNode;
				}

				if (nextParent) {
					nextParent[expando][method](_extend(originalEvt, {
						artificialBubble: true
					}));
				}
			},

			_hideGhostForTarget = function() {
				if (!supportCssPointerEvents && ghostEl) {
					_css(ghostEl, 'display', 'none');
				}
			},

			_unhideGhostForTarget = function() {
				if (!supportCssPointerEvents && ghostEl) {
					_css(ghostEl, 'display', '');
				}
			};


		// #1184 fix - Prevent click event on fallback if dragged but item not changed position
		document.addEventListener('click', function(evt) {
			if (ignoreNextClick) {
				evt.preventDefault();
				evt.stopPropagation && evt.stopPropagation();
				evt.stopImmediatePropagation && evt.stopImmediatePropagation();
				ignoreNextClick = false;
				return false;
			}
		}, true);

		var nearestEmptyInsertDetectEvent = function(evt) {
			evt = evt.touches ? evt.touches[0] : evt;
			if (dragEl) {
				var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

				if (nearest) {
					nearest[expando]._onDragOver({
						clientX: evt.clientX,
						clientY: evt.clientY,
						target: nearest,
						rootEl: nearest
					});
				}
			}
		};
		// We do not want this to be triggered if completed (bubbling canceled), so only define it here
		_on(document, 'dragover', nearestEmptyInsertDetectEvent);
		_on(document, 'mousemove', nearestEmptyInsertDetectEvent);
		_on(document, 'touchmove', nearestEmptyInsertDetectEvent);

		/**
		 * @class  Sortable
		 * @param  {HTMLElement}  el
		 * @param  {Object}       [options]
		 */
		function Sortable(el, options) {
			if (!(el && el.nodeType && el.nodeType === 1)) {
				throw 'Sortable: `el` must be HTMLElement, not ' + {}.toString.call(el);
			}

			this.el = el; // root element
			this.options = options = _extend({}, options);


			// Export instance
			el[expando] = this;

			// Default options
			var defaults = {
				group: null,
				sort: true,
				disabled: false,
				store: null,
				handle: null,
				scroll: true,
				scrollSensitivity: 30,
				scrollSpeed: 10,
				bubbleScroll: true,
				draggable: /[uo]l/i.test(el.nodeName) ? '>li' : '>*',
				swapThreshold: 1, // percentage; 0 <= x <= 1
				invertSwap: false, // invert always
				invertedSwapThreshold: null, // will be set to same as swapThreshold if default
				removeCloneOnHide: true,
				direction: function() {
					return _detectDirection(el, this.options);
				},
				ghostClass: 'sortable-ghost',
				chosenClass: 'sortable-chosen',
				dragClass: 'sortable-drag',
				ignore: 'a, img',
				filter: null,
				preventOnFilter: true,
				animation: 0,
				easing: null,
				setData: function (dataTransfer, dragEl) {
					dataTransfer.setData('Text', dragEl.textContent);
				},
				dropBubble: false,
				dragoverBubble: false,
				dataIdAttr: 'data-id',
				delay: 0,
				touchStartThreshold: parseInt(window.devicePixelRatio, 10) || 1,
				forceFallback: false,
				fallbackClass: 'sortable-fallback',
				fallbackOnBody: false,
				fallbackTolerance: 0,
				fallbackOffset: {x: 0, y: 0},
				supportPointer: Sortable.supportPointer !== false && (
					('PointerEvent' in window) ||
					window.navigator && ('msPointerEnabled' in window.navigator) // microsoft
				),
				emptyInsertThreshold: 5
			};


			// Set default options
			for (var name in defaults) {
				!(name in options) && (options[name] = defaults[name]);
			}

			_prepareGroup(options);

			// Bind all private methods
			for (var fn in this) {
				if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
					this[fn] = this[fn].bind(this);
				}
			}

			// Setup drag mode
			this.nativeDraggable = options.forceFallback ? false : supportDraggable;

			if (this.nativeDraggable) {
				// Touch start threshold cannot be greater than the native dragstart threshold
				this.options.touchStartThreshold = 1;
			}

			// Bind events
			if (options.supportPointer) {
				_on(el, 'pointerdown', this._onTapStart);
			} else {
				_on(el, 'mousedown', this._onTapStart);
				_on(el, 'touchstart', this._onTapStart);
			}

			if (this.nativeDraggable) {
				_on(el, 'dragover', this);
				_on(el, 'dragenter', this);
			}

			sortables.push(this.el);

			// Restore sorting
			options.store && options.store.get && this.sort(options.store.get(this) || []);
		}

		Sortable.prototype = /** @lends Sortable.prototype */ {
			constructor: Sortable,

			_computeIsAligned: function(evt) {
				var target;

				if (ghostEl && !supportCssPointerEvents) {
					_hideGhostForTarget();
					target = document.elementFromPoint(evt.clientX, evt.clientY);
					_unhideGhostForTarget();
				} else {
					target = evt.target;
				}

				target = _closest(target, this.options.draggable, this.el, false);
				if (_alignedSilent) return;
				if (!dragEl || dragEl.parentNode !== this.el) return;

				var children = this.el.children;
				for (var i = 0; i < children.length; i++) {
					// Don't change for target in case it is changed to aligned before onDragOver is fired
					if (_closest(children[i], this.options.draggable, this.el, false) && children[i] !== target) {
						children[i].sortableMouseAligned = _isClientInRowColumn(evt.clientX, evt.clientY, children[i], this._getDirection(evt, null), this.options);
					}
				}
				// Used for nulling last target when not in element, nothing to do with checking if aligned
				if (!_closest(target, this.options.draggable, this.el, true)) {
					lastTarget = null;
				}

				_alignedSilent = true;
				setTimeout(function() {
					_alignedSilent = false;
				}, 30);

			},

			_getDirection: function(evt, target) {
				return (typeof this.options.direction === 'function') ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
			},

			_onTapStart: function (/** Event|TouchEvent */evt) {
				if (!evt.cancelable) return;
				var _this = this,
					el = this.el,
					options = this.options,
					preventOnFilter = options.preventOnFilter,
					type = evt.type,
					touch = evt.touches && evt.touches[0],
					target = (touch || evt).target,
					originalTarget = evt.target.shadowRoot && ((evt.path && evt.path[0]) || (evt.composedPath && evt.composedPath()[0])) || target,
					filter = options.filter,
					startIndex;

				_saveInputCheckedState(el);


				// IE: Calls events in capture mode if event element is nested. This ensures only correct element's _onTapStart goes through.
				// This process is also done in _onDragOver
				if (IE11OrLess && !evt.artificialBubble && !_isTrueParentSortable(el, target)) {
					return;
				}

				// Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.
				if (dragEl) {
					return;
				}

				if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
					return; // only left button and enabled
				}

				// cancel dnd if original target is content editable
				if (originalTarget.isContentEditable) {
					return;
				}

				target = _closest(target, options.draggable, el, false);

				if (!target) {
					if (IE11OrLess) {
						_artificalBubble(el, evt, '_onTapStart');
					}
					return;
				}

				if (lastDownEl === target) {
					// Ignoring duplicate `down`
					return;
				}

				// Get the index of the dragged element within its parent
				startIndex = _index(target, options.draggable);

				// Check filter
				if (typeof filter === 'function') {
					if (filter.call(this, evt, target, this)) {
						_dispatchEvent(_this, originalTarget, 'filter', target, el, el, startIndex);
						preventOnFilter && evt.cancelable && evt.preventDefault();
						return; // cancel dnd
					}
				}
				else if (filter) {
					filter = filter.split(',').some(function (criteria) {
						criteria = _closest(originalTarget, criteria.trim(), el, false);

						if (criteria) {
							_dispatchEvent(_this, criteria, 'filter', target, el, el, startIndex);
							return true;
						}
					});

					if (filter) {
						preventOnFilter && evt.cancelable && evt.preventDefault();
						return; // cancel dnd
					}
				}

				if (options.handle && !_closest(originalTarget, options.handle, el, false)) {
					return;
				}

				// Prepare `dragstart`
				this._prepareDragStart(evt, touch, target, startIndex);
			},


			_handleAutoScroll: function(evt, fallback) {
				if (!dragEl || !this.options.scroll) return;
				var x = evt.clientX,
					y = evt.clientY,

					elem = document.elementFromPoint(x, y),
					_this = this;

				// IE does not seem to have native autoscroll,
				// Edge's autoscroll seems too conditional,
				// MACOS Safari does not have autoscroll,
				// Firefox and Chrome are good
				if (fallback || Edge || IE11OrLess || Safari) {
					_autoScroll(evt, _this.options, elem, fallback);

					// Listener for pointer element change
					var ogElemScroller = _getParentAutoScrollElement(elem, true);
					if (
						scrolling &&
						(
							!pointerElemChangedInterval ||
							x !== lastPointerElemX ||
							y !== lastPointerElemY
						)
					) {

						pointerElemChangedInterval && clearInterval(pointerElemChangedInterval);
						// Detect for pointer elem change, emulating native DnD behaviour
						pointerElemChangedInterval = setInterval(function() {
							if (!dragEl) return;
							// could also check if scroll direction on newElem changes due to parent autoscrolling
							var newElem = _getParentAutoScrollElement(document.elementFromPoint(x, y), true);
							if (newElem !== ogElemScroller) {
								ogElemScroller = newElem;
								_clearAutoScrolls();
								_autoScroll(evt, _this.options, ogElemScroller, fallback);
							}
						}, 10);
						lastPointerElemX = x;
						lastPointerElemY = y;
					}

				} else {
					// if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
					if (!_this.options.bubbleScroll || _getParentAutoScrollElement(elem, true) === _getWindowScrollingElement()) {
						_clearAutoScrolls();
						return;
					}
					_autoScroll(evt, _this.options, _getParentAutoScrollElement(elem, false), false);
				}
			},

			_prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex) {
				var _this = this,
					el = _this.el,
					options = _this.options,
					ownerDocument = el.ownerDocument,
					dragStartFn;

				if (target && !dragEl && (target.parentNode === el)) {
					rootEl = el;
					dragEl = target;
					parentEl = dragEl.parentNode;
					nextEl = dragEl.nextSibling;
					lastDownEl = target;
					activeGroup = options.group;
					oldIndex = startIndex;

					tapEvt = {
						target: dragEl,
						clientX: (touch || evt).clientX,
						clientY: (touch || evt).clientY
					};

					this._lastX = (touch || evt).clientX;
					this._lastY = (touch || evt).clientY;

					dragEl.style['will-change'] = 'all';
					// undo animation if needed
					dragEl.style.transition = '';
					dragEl.style.transform = '';

					dragStartFn = function () {
						// Delayed drag has been triggered
						// we can re-enable the events: touchmove/mousemove
						_this._disableDelayedDragEvents();

						if (!FireFox && _this.nativeDraggable) {
							dragEl.draggable = true;
						}

						// Bind the events: dragstart/dragend
						_this._triggerDragStart(evt, touch);

						// Drag start event
						_dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex);

						// Chosen item
						_toggleClass(dragEl, options.chosenClass, true);
					};

					// Disable "draggable"
					options.ignore.split(',').forEach(function (criteria) {
						_find(dragEl, criteria.trim(), _disableDraggable);
					});

					if (options.supportPointer) {
						_on(ownerDocument, 'pointerup', _this._onDrop);
					} else {
						_on(ownerDocument, 'mouseup', _this._onDrop);
						_on(ownerDocument, 'touchend', _this._onDrop);
						_on(ownerDocument, 'touchcancel', _this._onDrop);
					}

					// Make dragEl draggable (must be before delay for FireFox)
					if (FireFox && this.nativeDraggable) {
						this.options.touchStartThreshold = 4;
						dragEl.draggable = true;
					}

					// Delay is impossible for native DnD in Edge or IE
					if (options.delay && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
						// If the user moves the pointer or let go the click or touch
						// before the delay has been reached:
						// disable the delayed drag
						_on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
						_on(ownerDocument, 'touchend', _this._disableDelayedDrag);
						_on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
						_on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
						_on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
						options.supportPointer && _on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);

						_this._dragStartTimer = setTimeout(dragStartFn, options.delay);
					} else {
						dragStartFn();
					}
				}
			},

			_delayedDragTouchMoveHandler: function (/** TouchEvent|PointerEvent **/e) {
				var touch = e.touches ? e.touches[0] : e;
				if (max(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY))
						>= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))
				) {
					this._disableDelayedDrag();
				}
			},

			_disableDelayedDrag: function () {
				dragEl && _disableDraggable(dragEl);
				clearTimeout(this._dragStartTimer);

				this._disableDelayedDragEvents();
			},

			_disableDelayedDragEvents: function () {
				var ownerDocument = this.el.ownerDocument;
				_off(ownerDocument, 'mouseup', this._disableDelayedDrag);
				_off(ownerDocument, 'touchend', this._disableDelayedDrag);
				_off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
				_off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
				_off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
				_off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
			},

			_triggerDragStart: function (/** Event */evt, /** Touch */touch) {
				touch = touch || (evt.pointerType == 'touch' ? evt : null);

				if (!this.nativeDraggable || touch) {
					if (this.options.supportPointer) {
						_on(document, 'pointermove', this._onTouchMove);
					} else if (touch) {
						_on(document, 'touchmove', this._onTouchMove);
					} else {
						_on(document, 'mousemove', this._onTouchMove);
					}
				} else {
					_on(dragEl, 'dragend', this);
					_on(rootEl, 'dragstart', this._onDragStart);
				}

				try {
					if (document.selection) {
						// Timeout neccessary for IE9
						_nextTick(function () {
							document.selection.empty();
						});
					} else {
						window.getSelection().removeAllRanges();
					}
				} catch (err) {
				}
			},

			_dragStarted: function (fallback, evt) {
				awaitingDragStarted = false;
				if (rootEl && dragEl) {
					if (this.nativeDraggable) {
						_on(document, 'dragover', this._handleAutoScroll);
						_on(document, 'dragover', _checkAlignment);
					}
					var options = this.options;

					// Apply effect
					!fallback && _toggleClass(dragEl, options.dragClass, false);
					_toggleClass(dragEl, options.ghostClass, true);

					// In case dragging an animated element
					_css(dragEl, 'transform', '');

					Sortable.active = this;

					fallback && this._appendGhost();

					// Drag start event
					_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex, undefined, evt);
				} else {
					this._nulling();
				}
			},

			_emulateDragOver: function (forAutoScroll) {
				if (touchEvt) {
					if (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY && !forAutoScroll) {
						return;
					}
					this._lastX = touchEvt.clientX;
					this._lastY = touchEvt.clientY;

					_hideGhostForTarget();

					var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
					var parent = target;

					while (target && target.shadowRoot) {
						target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
						parent = target;
					}

					if (parent) {
						do {
							if (parent[expando]) {
								var inserted;

								inserted = parent[expando]._onDragOver({
									clientX: touchEvt.clientX,
									clientY: touchEvt.clientY,
									target: target,
									rootEl: parent
								});

								if (inserted && !this.options.dragoverBubble) {
									break;
								}
							}

							target = parent; // store last element
						}
						/* jshint boss:true */
						while (parent = parent.parentNode);
					}
					dragEl.parentNode[expando]._computeIsAligned(touchEvt);

					_unhideGhostForTarget();
				}
			},


			_onTouchMove: function (/**TouchEvent*/evt, forAutoScroll) {
				if (tapEvt) {
					var	options = this.options,
						fallbackTolerance = options.fallbackTolerance,
						fallbackOffset = options.fallbackOffset,
						touch = evt.touches ? evt.touches[0] : evt,
						matrix = ghostEl && _matrix(ghostEl),
						scaleX = ghostEl && matrix && matrix.a,
						scaleY = ghostEl && matrix && matrix.d,
						relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && _getRelativeScrollOffset(ghostRelativeParent),
						dx = ((touch.clientX - tapEvt.clientX)
								+ fallbackOffset.x) / (scaleX || 1)
								+ (relativeScrollOffset ? (relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0]) : 0) / (scaleX || 1),
						dy = ((touch.clientY - tapEvt.clientY)
								+ fallbackOffset.y) / (scaleY || 1)
								+ (relativeScrollOffset ? (relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1]) : 0) / (scaleY || 1),
						translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';

					// only set the status to dragging, when we are actually dragging
					if (!Sortable.active && !awaitingDragStarted) {
						if (fallbackTolerance &&
							min(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance
						) {
							return;
						}
						this._onDragStart(evt, true);
					}

					!forAutoScroll && this._handleAutoScroll(touch, true);

					moved = true;
					touchEvt = touch;

					_css(ghostEl, 'webkitTransform', translate3d);
					_css(ghostEl, 'mozTransform', translate3d);
					_css(ghostEl, 'msTransform', translate3d);
					_css(ghostEl, 'transform', translate3d);

					evt.cancelable && evt.preventDefault();
				}
			},

			_appendGhost: function () {
				// Bug if using scale(): https://stackoverflow.com/questions/2637058
				// Not being adjusted for
				if (!ghostEl) {
					var container = this.options.fallbackOnBody ? document.body : rootEl,
						rect = _getRect(dragEl, true, container, !PositionGhostAbsolutely),
						css = _css(dragEl),
						options = this.options;

					// Position absolutely
					if (PositionGhostAbsolutely) {
						// Get relatively positioned parent
						ghostRelativeParent = container;

						while (
							_css(ghostRelativeParent, 'position') === 'static' &&
							_css(ghostRelativeParent, 'transform') === 'none' &&
							ghostRelativeParent !== document
						) {
							ghostRelativeParent = ghostRelativeParent.parentNode;
						}

						if (ghostRelativeParent !== document) {
							var ghostRelativeParentRect = _getRect(ghostRelativeParent, true);

							rect.top -= ghostRelativeParentRect.top;
							rect.left -= ghostRelativeParentRect.left;
						}

						if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
							if (ghostRelativeParent === document) ghostRelativeParent = _getWindowScrollingElement();

							rect.top += ghostRelativeParent.scrollTop;
							rect.left += ghostRelativeParent.scrollLeft;
						} else {
							ghostRelativeParent = _getWindowScrollingElement();
						}
						ghostRelativeParentInitialScroll = _getRelativeScrollOffset(ghostRelativeParent);
					}


					ghostEl = dragEl.cloneNode(true);

					_toggleClass(ghostEl, options.ghostClass, false);
					_toggleClass(ghostEl, options.fallbackClass, true);
					_toggleClass(ghostEl, options.dragClass, true);

					_css(ghostEl, 'box-sizing', 'border-box');
					_css(ghostEl, 'margin', 0);
					_css(ghostEl, 'top', rect.top);
					_css(ghostEl, 'left', rect.left);
					_css(ghostEl, 'width', rect.width);
					_css(ghostEl, 'height', rect.height);
					_css(ghostEl, 'opacity', '0.8');
					_css(ghostEl, 'position', (PositionGhostAbsolutely ? 'absolute' : 'fixed'));
					_css(ghostEl, 'zIndex', '100000');
					_css(ghostEl, 'pointerEvents', 'none');

					container.appendChild(ghostEl);
				}
			},

			_onDragStart: function (/**Event*/evt, /**boolean*/fallback) {
				var _this = this;
				var dataTransfer = evt.dataTransfer;
				var options = _this.options;

				// Setup clone
				cloneEl = _clone(dragEl);

				cloneEl.draggable = false;
				cloneEl.style['will-change'] = '';

				this._hideClone();

				_toggleClass(cloneEl, _this.options.chosenClass, false);


				// #1143: IFrame support workaround
				_this._cloneId = _nextTick(function () {
					if (!_this.options.removeCloneOnHide) {
						rootEl.insertBefore(cloneEl, dragEl);
					}
					_dispatchEvent(_this, rootEl, 'clone', dragEl);
				});


				!fallback && _toggleClass(dragEl, options.dragClass, true);

				// Set proper drop events
				if (fallback) {
					ignoreNextClick = true;
					_this._loopId = setInterval(_this._emulateDragOver, 50);
				} else {
					// Undo what was set in _prepareDragStart before drag started
					_off(document, 'mouseup', _this._onDrop);
					_off(document, 'touchend', _this._onDrop);
					_off(document, 'touchcancel', _this._onDrop);

					if (dataTransfer) {
						dataTransfer.effectAllowed = 'move';
						options.setData && options.setData.call(_this, dataTransfer, dragEl);
					}

					_on(document, 'drop', _this);

					// #1276 fix:
					_css(dragEl, 'transform', 'translateZ(0)');
				}

				awaitingDragStarted = true;

				_this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
				_on(document, 'selectstart', _this);
				if (Safari) {
					_css(document.body, 'user-select', 'none');
				}
			},


			// Returns true - if no further action is needed (either inserted or another condition)
			_onDragOver: function (/**Event*/evt) {
				var el = this.el,
					target = evt.target,
					dragRect,
					targetRect,
					revert,
					options = this.options,
					group = options.group,
					activeSortable = Sortable.active,
					isOwner = (activeGroup === group),
					canSort = options.sort,
					_this = this;

				if (_silent) return;

				// IE event order fix
				if (IE11OrLess && !evt.rootEl && !evt.artificialBubble && !_isTrueParentSortable(el, target)) {
					return;
				}

				// Return invocation when dragEl is inserted (or completed)
				function completed(insertion) {
					if (insertion) {
						if (isOwner) {
							activeSortable._hideClone();
						} else {
							activeSortable._showClone(_this);
						}

						if (activeSortable) {
							// Set ghost class to new sortable's ghost class
							_toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
							_toggleClass(dragEl, options.ghostClass, true);
						}

						if (putSortable !== _this && _this !== Sortable.active) {
							putSortable = _this;
						} else if (_this === Sortable.active) {
							putSortable = null;
						}

						// Animation
						dragRect && _this._animate(dragRect, dragEl);
						target && targetRect && _this._animate(targetRect, target);
					}


					// Null lastTarget if it is not inside a previously swapped element
					if ((target === dragEl && !dragEl.animated) || (target === el && !target.animated)) {
						lastTarget = null;
					}
					// no bubbling and not fallback
					if (!options.dragoverBubble && !evt.rootEl && target !== document) {
						_this._handleAutoScroll(evt);
						dragEl.parentNode[expando]._computeIsAligned(evt);
					}

					!options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();

					return true;
				}

				// Call when dragEl has been inserted
				function changed() {
					_dispatchEvent(_this, rootEl, 'change', target, el, rootEl, oldIndex, _index(dragEl, options.draggable), evt);
				}


				if (evt.preventDefault !== void 0) {
					evt.cancelable && evt.preventDefault();
				}


				moved = true;

				target = _closest(target, options.draggable, el, true);

				// target is dragEl or target is animated
				if (!!_closest(evt.target, null, dragEl, true) || target.animated) {
					return completed(false);
				}

				if (target !== dragEl) {
					ignoreNextClick = false;
				}

				if (activeSortable && !options.disabled &&
					(isOwner
						? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
						: (
							putSortable === this ||
							(
								(this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&
								group.checkPut(this, activeSortable, dragEl, evt)
							)
						)
					)
				) {
					var axis = this._getDirection(evt, target);

					dragRect = _getRect(dragEl);

					if (revert) {
						this._hideClone();
						parentEl = rootEl; // actualization

						if (nextEl) {
							rootEl.insertBefore(dragEl, nextEl);
						} else {
							rootEl.appendChild(dragEl);
						}

						return completed(true);
					}

					var elLastChild = _lastChild(el);

					if (!elLastChild || _ghostIsLast(evt, axis, el) && !elLastChild.animated) {
						// assign target only if condition is true
						if (elLastChild && el === evt.target) {
							target = elLastChild;
						}

						if (target) {
							targetRect = _getRect(target);
						}

						if (isOwner) {
							activeSortable._hideClone();
						} else {
							activeSortable._showClone(this);
						}

						if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
							el.appendChild(dragEl);
							parentEl = el; // actualization
							realDragElRect = null;

							changed();
							return completed(true);
						}
					}
					else if (target && target !== dragEl && target.parentNode === el) {
						var direction = 0,
							targetBeforeFirstSwap,
							aligned = target.sortableMouseAligned,
							differentLevel = dragEl.parentNode !== el,
							side1 = axis === 'vertical' ? 'top' : 'left',
							scrolledPastTop = _isScrolledPast(target, 'top') || _isScrolledPast(dragEl, 'top'),
							scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;


						if (lastTarget !== target) {
							lastMode = null;
							targetBeforeFirstSwap = _getRect(target)[side1];
							pastFirstInvertThresh = false;
						}

						// Reference: https://www.lucidchart.com/documents/view/10fa0e93-e362-4126-aca2-b709ee56bd8b/0
						if (
							_isElInRowColumn(dragEl, target, axis) && aligned ||
							differentLevel ||
							scrolledPastTop ||
							options.invertSwap ||
							lastMode === 'insert' ||
							// Needed, in the case that we are inside target and inserted because not aligned... aligned will stay false while inside
							// and lastMode will change to 'insert', but we must swap
							lastMode === 'swap'
						) {
							// New target that we will be inside
							if (lastMode !== 'swap') {
								isCircumstantialInvert = options.invertSwap || differentLevel;
							}

							direction = _getSwapDirection(evt, target, axis,
								options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold,
								isCircumstantialInvert,
								lastTarget === target);
							lastMode = 'swap';
						} else {
							// Insert at position
							direction = _getInsertDirection(target);
							lastMode = 'insert';
						}
						if (direction === 0) return completed(false);

						realDragElRect = null;
						lastTarget = target;

						lastDirection = direction;

						targetRect = _getRect(target);

						var nextSibling = target.nextElementSibling,
							after = false;

						after = direction === 1;

						var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

						if (moveVector !== false) {
							if (moveVector === 1 || moveVector === -1) {
								after = (moveVector === 1);
							}

							_silent = true;
							setTimeout(_unsilent, 30);

							if (isOwner) {
								activeSortable._hideClone();
							} else {
								activeSortable._showClone(this);
							}

							if (after && !nextSibling) {
								el.appendChild(dragEl);
							} else {
								target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
							}

							// Undo chrome's scroll adjustment
							if (scrolledPastTop) {
								_scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
							}

							parentEl = dragEl.parentNode; // actualization

							// must be done before animation
							if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
								targetMoveDistance = abs(targetBeforeFirstSwap - _getRect(target)[side1]);
							}
							changed();

							return completed(true);
						}
					}

					if (el.contains(dragEl)) {
						return completed(false);
					}
				}

				if (IE11OrLess && !evt.rootEl) {
					_artificalBubble(el, evt, '_onDragOver');
				}

				return false;
			},

			_animate: function (prevRect, target) {
				var ms = this.options.animation;

				if (ms) {
					var currentRect = _getRect(target);

					if (target === dragEl) {
						realDragElRect = currentRect;
					}

					if (prevRect.nodeType === 1) {
						prevRect = _getRect(prevRect);
					}

					// Check if actually moving position
					if ((prevRect.left + prevRect.width / 2) !== (currentRect.left + currentRect.width / 2)
						|| (prevRect.top + prevRect.height / 2) !== (currentRect.top + currentRect.height / 2)
					) {
						var matrix = _matrix(this.el),
							scaleX = matrix && matrix.a,
							scaleY = matrix && matrix.d;

						_css(target, 'transition', 'none');
						_css(target, 'transform', 'translate3d('
							+ (prevRect.left - currentRect.left) / (scaleX ? scaleX : 1) + 'px,'
							+ (prevRect.top - currentRect.top) / (scaleY ? scaleY : 1) + 'px,0)'
						);

						forRepaintDummy = target.offsetWidth; // repaint
						_css(target, 'transition', 'transform ' + ms + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
						_css(target, 'transform', 'translate3d(0,0,0)');
					}

					(typeof target.animated === 'number') && clearTimeout(target.animated);
					target.animated = setTimeout(function () {
						_css(target, 'transition', '');
						_css(target, 'transform', '');
						target.animated = false;
					}, ms);
				}
			},

			_offUpEvents: function () {
				var ownerDocument = this.el.ownerDocument;

				_off(document, 'touchmove', this._onTouchMove);
				_off(document, 'pointermove', this._onTouchMove);
				_off(ownerDocument, 'mouseup', this._onDrop);
				_off(ownerDocument, 'touchend', this._onDrop);
				_off(ownerDocument, 'pointerup', this._onDrop);
				_off(ownerDocument, 'touchcancel', this._onDrop);
				_off(document, 'selectstart', this);
			},

			_onDrop: function (/**Event*/evt) {
				var el = this.el,
					options = this.options;
				awaitingDragStarted = false;
				scrolling = false;
				isCircumstantialInvert = false;
				pastFirstInvertThresh = false;

				clearInterval(this._loopId);

				clearInterval(pointerElemChangedInterval);
				_clearAutoScrolls();
				_cancelThrottle();

				clearTimeout(this._dragStartTimer);

				_cancelNextTick(this._cloneId);
				_cancelNextTick(this._dragStartId);

				// Unbind events
				_off(document, 'mousemove', this._onTouchMove);


				if (this.nativeDraggable) {
					_off(document, 'drop', this);
					_off(el, 'dragstart', this._onDragStart);
					_off(document, 'dragover', this._handleAutoScroll);
					_off(document, 'dragover', _checkAlignment);
				}

				if (Safari) {
					_css(document.body, 'user-select', '');
				}

				this._offUpEvents();

				if (evt) {
					if (moved) {
						evt.cancelable && evt.preventDefault();
						!options.dropBubble && evt.stopPropagation();
					}

					ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

					if (rootEl === parentEl || (putSortable && putSortable.lastPutMode !== 'clone')) {
						// Remove clone
						cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
					}

					if (dragEl) {
						if (this.nativeDraggable) {
							_off(dragEl, 'dragend', this);
						}

						_disableDraggable(dragEl);
						dragEl.style['will-change'] = '';

						// Remove class's
						_toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
						_toggleClass(dragEl, this.options.chosenClass, false);

						// Drag stop event
						_dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex, null, evt);

						if (rootEl !== parentEl) {
							newIndex = _index(dragEl, options.draggable);

							if (newIndex >= 0) {
								// Add event
								_dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);

								// Remove event
								_dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);

								// drag from one list and drop into another
								_dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);
								_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);
							}

							putSortable && putSortable.save();
						}
						else {
							if (dragEl.nextSibling !== nextEl) {
								// Get the index of the dragged element within its parent
								newIndex = _index(dragEl, options.draggable);

								if (newIndex >= 0) {
									// drag & drop within the same list
									_dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);
									_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);
								}
							}
						}

						if (Sortable.active) {
							/* jshint eqnull:true */
							if (newIndex == null || newIndex === -1) {
								newIndex = oldIndex;
							}
							_dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);

							// Save sorting
							this.save();
						}
					}

				}
				this._nulling();
			},

			_nulling: function() {
				rootEl =
				dragEl =
				parentEl =
				ghostEl =
				nextEl =
				cloneEl =
				lastDownEl =

				scrollEl =
				scrollParentEl =
				autoScrolls.length =

				pointerElemChangedInterval =
				lastPointerElemX =
				lastPointerElemY =

				tapEvt =
				touchEvt =

				moved =
				newIndex =
				oldIndex =

				lastTarget =
				lastDirection =

				forRepaintDummy =
				realDragElRect =

				putSortable =
				activeGroup =
				Sortable.active = null;

				savedInputChecked.forEach(function (el) {
					el.checked = true;
				});

				savedInputChecked.length = 0;
			},

			handleEvent: function (/**Event*/evt) {
				switch (evt.type) {
					case 'drop':
					case 'dragend':
						this._onDrop(evt);
						break;

					case 'dragenter':
					case 'dragover':
						if (dragEl) {
							this._onDragOver(evt);
							_globalDragOver(evt);
						}
						break;

					case 'selectstart':
						evt.preventDefault();
						break;
				}
			},


			/**
			 * Serializes the item into an array of string.
			 * @returns {String[]}
			 */
			toArray: function () {
				var order = [],
					el,
					children = this.el.children,
					i = 0,
					n = children.length,
					options = this.options;

				for (; i < n; i++) {
					el = children[i];
					if (_closest(el, options.draggable, this.el, false)) {
						order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
					}
				}

				return order;
			},


			/**
			 * Sorts the elements according to the array.
			 * @param  {String[]}  order  order of the items
			 */
			sort: function (order) {
				var items = {}, rootEl = this.el;

				this.toArray().forEach(function (id, i) {
					var el = rootEl.children[i];

					if (_closest(el, this.options.draggable, rootEl, false)) {
						items[id] = el;
					}
				}, this);

				order.forEach(function (id) {
					if (items[id]) {
						rootEl.removeChild(items[id]);
						rootEl.appendChild(items[id]);
					}
				});
			},


			/**
			 * Save the current sorting
			 */
			save: function () {
				var store = this.options.store;
				store && store.set && store.set(this);
			},


			/**
			 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
			 * @param   {HTMLElement}  el
			 * @param   {String}       [selector]  default: `options.draggable`
			 * @returns {HTMLElement|null}
			 */
			closest: function (el, selector) {
				return _closest(el, selector || this.options.draggable, this.el, false);
			},


			/**
			 * Set/get option
			 * @param   {string} name
			 * @param   {*}      [value]
			 * @returns {*}
			 */
			option: function (name, value) {
				var options = this.options;

				if (value === void 0) {
					return options[name];
				} else {
					options[name] = value;

					if (name === 'group') {
						_prepareGroup(options);
					}
				}
			},


			/**
			 * Destroy
			 */
			destroy: function () {
				var el = this.el;

				el[expando] = null;

				_off(el, 'mousedown', this._onTapStart);
				_off(el, 'touchstart', this._onTapStart);
				_off(el, 'pointerdown', this._onTapStart);

				if (this.nativeDraggable) {
					_off(el, 'dragover', this);
					_off(el, 'dragenter', this);
				}
				// Remove draggable attributes
				Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
					el.removeAttribute('draggable');
				});

				this._onDrop();

				sortables.splice(sortables.indexOf(this.el), 1);

				this.el = el = null;
			},

			_hideClone: function() {
				if (!cloneEl.cloneHidden) {
					_css(cloneEl, 'display', 'none');
					cloneEl.cloneHidden = true;
					if (cloneEl.parentNode && this.options.removeCloneOnHide) {
						cloneEl.parentNode.removeChild(cloneEl);
					}
				}
			},

			_showClone: function(putSortable) {
				if (putSortable.lastPutMode !== 'clone') {
					this._hideClone();
					return;
				}

				if (cloneEl.cloneHidden) {
					// show clone at dragEl or original position
					if (rootEl.contains(dragEl) && !this.options.group.revertClone) {
						rootEl.insertBefore(cloneEl, dragEl);
					} else if (nextEl) {
						rootEl.insertBefore(cloneEl, nextEl);
					} else {
						rootEl.appendChild(cloneEl);
					}

					if (this.options.group.revertClone) {
						this._animate(dragEl, cloneEl);
					}
					_css(cloneEl, 'display', '');
					cloneEl.cloneHidden = false;
				}
			}
		};

		function _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx, includeCTX) {
			if (el) {
				ctx = ctx || document;

				do {
					if (
						selector != null &&
						(
							selector[0] === '>' && el.parentNode === ctx && _matches(el, selector.substring(1)) ||
							_matches(el, selector)
						) ||
						includeCTX && el === ctx
					) {
						return el;
					}

					if (el === ctx) break;
					/* jshint boss:true */
				} while (el = _getParentOrHost(el));
			}

			return null;
		}


		function _getParentOrHost(el) {
			return (el.host && el !== document && el.host.nodeType)
				? el.host
				: el.parentNode;
		}


		function _globalDragOver(/**Event*/evt) {
			if (evt.dataTransfer) {
				evt.dataTransfer.dropEffect = 'move';
			}
			evt.cancelable && evt.preventDefault();
		}


		function _on(el, event, fn) {
			el.addEventListener(event, fn, captureMode);
		}


		function _off(el, event, fn) {
			el.removeEventListener(event, fn, captureMode);
		}


		function _toggleClass(el, name, state) {
			if (el && name) {
				if (el.classList) {
					el.classList[state ? 'add' : 'remove'](name);
				}
				else {
					var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
					el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
				}
			}
		}


		function _css(el, prop, val) {
			var style = el && el.style;

			if (style) {
				if (val === void 0) {
					if (document.defaultView && document.defaultView.getComputedStyle) {
						val = document.defaultView.getComputedStyle(el, '');
					}
					else if (el.currentStyle) {
						val = el.currentStyle;
					}

					return prop === void 0 ? val : val[prop];
				}
				else {
					if (!(prop in style) && prop.indexOf('webkit') === -1) {
						prop = '-webkit-' + prop;
					}

					style[prop] = val + (typeof val === 'string' ? '' : 'px');
				}
			}
		}

		function _matrix(el) {
			var appliedTransforms = '';
			do {
				var transform = _css(el, 'transform');

				if (transform && transform !== 'none') {
					appliedTransforms = transform + ' ' + appliedTransforms;
				}
				/* jshint boss:true */
			} while (el = el.parentNode);

			if (window.DOMMatrix) {
				return new DOMMatrix(appliedTransforms);
			} else if (window.WebKitCSSMatrix) {
				return new WebKitCSSMatrix(appliedTransforms);
			} else if (window.CSSMatrix) {
				return new CSSMatrix(appliedTransforms);
			}
		}


		function _find(ctx, tagName, iterator) {
			if (ctx) {
				var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;

				if (iterator) {
					for (; i < n; i++) {
						iterator(list[i], i);
					}
				}

				return list;
			}

			return [];
		}



		function _dispatchEvent(sortable, rootEl, name, targetEl, toEl, fromEl, startIndex, newIndex, originalEvt) {
			sortable = (sortable || rootEl[expando]);
			var evt,
				options = sortable.options,
				onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);
			// Support for new CustomEvent feature
			if (window.CustomEvent && !IE11OrLess && !Edge) {
				evt = new CustomEvent(name, {
					bubbles: true,
					cancelable: true
				});
			} else {
				evt = document.createEvent('Event');
				evt.initEvent(name, true, true);
			}

			evt.to = toEl || rootEl;
			evt.from = fromEl || rootEl;
			evt.item = targetEl || rootEl;
			evt.clone = cloneEl;

			evt.oldIndex = startIndex;
			evt.newIndex = newIndex;

			evt.originalEvent = originalEvt;
			evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

			if (rootEl) {
				rootEl.dispatchEvent(evt);
			}

			if (options[onName]) {
				options[onName].call(sortable, evt);
			}
		}


		function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {
			var evt,
				sortable = fromEl[expando],
				onMoveFn = sortable.options.onMove,
				retVal;
			// Support for new CustomEvent feature
			if (window.CustomEvent && !IE11OrLess && !Edge) {
				evt = new CustomEvent('move', {
					bubbles: true,
					cancelable: true
				});
			} else {
				evt = document.createEvent('Event');
				evt.initEvent('move', true, true);
			}

			evt.to = toEl;
			evt.from = fromEl;
			evt.dragged = dragEl;
			evt.draggedRect = dragRect;
			evt.related = targetEl || toEl;
			evt.relatedRect = targetRect || _getRect(toEl);
			evt.willInsertAfter = willInsertAfter;

			evt.originalEvent = originalEvt;

			fromEl.dispatchEvent(evt);

			if (onMoveFn) {
				retVal = onMoveFn.call(sortable, evt, originalEvt);
			}

			return retVal;
		}

		function _disableDraggable(el) {
			el.draggable = false;
		}

		function _unsilent() {
			_silent = false;
		}

		/**
		 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
		 * and non-draggable elements
		 * @param  {HTMLElement} el       The parent element
		 * @param  {Number} childNum      The index of the child
		 * @param  {Object} options       Parent Sortable's options
		 * @return {HTMLElement}          The child at index childNum, or null if not found
		 */
		function _getChild(el, childNum, options) {
			var currentChild = 0,
				i = 0,
				children = el.children;

			while (i < children.length) {
				if (
					children[i].style.display !== 'none' &&
					children[i] !== ghostEl &&
					children[i] !== dragEl &&
					_closest(children[i], options.draggable, el, false)
				) {
					if (currentChild === childNum) {
						return children[i];
					}
					currentChild++;
				}

				i++;
			}
			return null;
		}

		/**
		 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
		 * @param  {HTMLElement} el       Parent element
		 * @return {HTMLElement}          The last child, ignoring ghostEl
		 */
		function _lastChild(el) {
			var last = el.lastElementChild;

			while (last && (last === ghostEl || last.style.display === 'none')) {
				last = last.previousElementSibling;
			}

			return last || null;
		}

		function _ghostIsLast(evt, axis, el) {
			var elRect = _getRect(_lastChild(el)),
				mouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,
				mouseOnOppAxis = axis === 'vertical' ? evt.clientX : evt.clientY,
				targetS2 = axis === 'vertical' ? elRect.bottom : elRect.right,
				targetS1Opp = axis === 'vertical' ? elRect.left : elRect.top,
				targetS2Opp = axis === 'vertical' ? elRect.right : elRect.bottom,
				spacer = 10;

			return (
				axis === 'vertical' ?
					(mouseOnOppAxis > targetS2Opp + spacer || mouseOnOppAxis <= targetS2Opp && mouseOnAxis > targetS2 && mouseOnOppAxis >= targetS1Opp) :
					(mouseOnAxis > targetS2 && mouseOnOppAxis > targetS1Opp || mouseOnAxis <= targetS2 && mouseOnOppAxis > targetS2Opp + spacer)
			);
		}

		function _getSwapDirection(evt, target, axis, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
			var targetRect = _getRect(target),
				mouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,
				targetLength = axis === 'vertical' ? targetRect.height : targetRect.width,
				targetS1 = axis === 'vertical' ? targetRect.top : targetRect.left,
				targetS2 = axis === 'vertical' ? targetRect.bottom : targetRect.right,
				dragRect = _getRect(dragEl),
				invert = false;


			if (!invertSwap) {
				// Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
				if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) { // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
					// check if past first invert threshold on side opposite of lastDirection
					if (!pastFirstInvertThresh &&
						(lastDirection === 1 ?
							(
								mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2
							) :
							(
								mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2
							)
						)
					)
					{
						// past first invert threshold, do not restrict inverted threshold to dragEl shadow
						pastFirstInvertThresh = true;
					}

					if (!pastFirstInvertThresh) {
						var dragS1 = axis === 'vertical' ? dragRect.top : dragRect.left,
							dragS2 = axis === 'vertical' ? dragRect.bottom : dragRect.right;
						// dragEl shadow (target move distance shadow)
						if (
							lastDirection === 1 ?
							(
								mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
							) :
							(
								mouseOnAxis > targetS2 - targetMoveDistance
							)
						)
						{
							return lastDirection * -1;
						}
					} else {
						invert = true;
					}
				} else {
					// Regular
					if (
						mouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold) / 2) &&
						mouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold) / 2)
					) {
						return _getInsertDirection(target);
					}
				}
			}

			invert = invert || invertSwap;

			if (invert) {
				// Invert of regular
				if (
					mouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold / 2) ||
					mouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold / 2)
				)
				{
					return ((mouseOnAxis > targetS1 + targetLength / 2) ? 1 : -1);
				}
			}

			return 0;
		}

		/**
		 * Gets the direction dragEl must be swapped relative to target in order to make it
		 * seem that dragEl has been "inserted" into that element's position
		 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
		 * @return {Number}                   Direction dragEl must be swapped
		 */
		function _getInsertDirection(target) {
			var dragElIndex = _index(dragEl),
				targetIndex = _index(target);

			if (dragElIndex < targetIndex) {
				return 1;
			} else {
				return -1;
			}
		}


		/**
		 * Generate id
		 * @param   {HTMLElement} el
		 * @returns {String}
		 * @private
		 */
		function _generateId(el) {
			var str = el.tagName + el.className + el.src + el.href + el.textContent,
				i = str.length,
				sum = 0;

			while (i--) {
				sum += str.charCodeAt(i);
			}

			return sum.toString(36);
		}

		/**
		 * Returns the index of an element within its parent for a selected set of
		 * elements
		 * @param  {HTMLElement} el
		 * @param  {selector} selector
		 * @return {number}
		 */
		function _index(el, selector) {
			var index = 0;

			if (!el || !el.parentNode) {
				return -1;
			}

			while (el && (el = el.previousElementSibling)) {
				if ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== cloneEl) {
					index++;
				}
			}

			return index;
		}

		function _matches(/**HTMLElement*/el, /**String*/selector) {
			if (el) {
				try {
					if (el.matches) {
						return el.matches(selector);
					} else if (el.msMatchesSelector) {
						return el.msMatchesSelector(selector);
					} else if (el.webkitMatchesSelector) {
						return el.webkitMatchesSelector(selector);
					}
				} catch(_) {
					return false;
				}
			}

			return false;
		}

		var _throttleTimeout;
		function _throttle(callback, ms) {
			return function () {
				if (!_throttleTimeout) {
					var args = arguments,
						_this = this;

					_throttleTimeout = setTimeout(function () {
						if (args.length === 1) {
							callback.call(_this, args[0]);
						} else {
							callback.apply(_this, args);
						}

						_throttleTimeout = void 0;
					}, ms);
				}
			};
		}

		function _cancelThrottle() {
			clearTimeout(_throttleTimeout);
			_throttleTimeout = void 0;
		}

		function _extend(dst, src) {
			if (dst && src) {
				for (var key in src) {
					if (src.hasOwnProperty(key)) {
						dst[key] = src[key];
					}
				}
			}

			return dst;
		}

		function _clone(el) {
			if (Polymer && Polymer.dom) {
				return Polymer.dom(el).cloneNode(true);
			}
			else if ($) {
				return $(el).clone(true)[0];
			}
			else {
				return el.cloneNode(true);
			}
		}

		function _saveInputCheckedState(root) {
			savedInputChecked.length = 0;

			var inputs = root.getElementsByTagName('input');
			var idx = inputs.length;

			while (idx--) {
				var el = inputs[idx];
				el.checked && savedInputChecked.push(el);
			}
		}

		function _nextTick(fn) {
			return setTimeout(fn, 0);
		}

		function _cancelNextTick(id) {
			return clearTimeout(id);
		}


		/**
		 * Returns the "bounding client rect" of given element
		 * @param  {HTMLElement} el                The element whose boundingClientRect is wanted
		 * @param  {[HTMLElement]} container       the parent the element will be placed in
		 * @param  {[Boolean]} adjustForTransform  Whether the rect should compensate for parent's transform
		 * @return {Object}                        The boundingClientRect of el
		 */
		function _getRect(el, adjustForTransform, container, adjustForFixed) {
			if (!el.getBoundingClientRect && el !== win) return;

			var elRect,
				top,
				left,
				bottom,
				right,
				height,
				width;

			if (el !== win && el !== _getWindowScrollingElement()) {
				elRect = el.getBoundingClientRect();
				top = elRect.top;
				left = elRect.left;
				bottom = elRect.bottom;
				right = elRect.right;
				height = elRect.height;
				width = elRect.width;
			} else {
				top = 0;
				left = 0;
				bottom = window.innerHeight;
				right = window.innerWidth;
				height = window.innerHeight;
				width = window.innerWidth;
			}

			if (adjustForFixed && el !== win) {
				// Adjust for translate()
				container = container || el.parentNode;

				// solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
				// Not needed on <= IE11
				if (!IE11OrLess) {
					do {
						if (container && container.getBoundingClientRect && _css(container, 'transform') !== 'none') {
							var containerRect = container.getBoundingClientRect();

							// Set relative to edges of padding box of container
							top -= containerRect.top + parseInt(_css(container, 'border-top-width'));
							left -= containerRect.left + parseInt(_css(container, 'border-left-width'));
							bottom = top + elRect.height;
							right = left + elRect.width;

							break;
						}
						/* jshint boss:true */
					} while (container = container.parentNode);
				}
			}

			if (adjustForTransform && el !== win) {
				// Adjust for scale()
				var matrix = _matrix(container || el),
					scaleX = matrix && matrix.a,
					scaleY = matrix && matrix.d;

				if (matrix) {
					top /= scaleY;
					left /= scaleX;

					width /= scaleX;
					height /= scaleY;

					bottom = top + height;
					right = left + width;
				}
			}

			return {
				top: top,
				left: left,
				bottom: bottom,
				right: right,
				width: width,
				height: height
			};
		}


		/**
		 * Checks if a side of an element is scrolled past a side of it's parents
		 * @param  {HTMLElement}  el       The element who's side being scrolled out of view is in question
		 * @param  {String}       side     Side of the element in question ('top', 'left', 'right', 'bottom')
		 * @return {HTMLElement}           The parent scroll element that the el's side is scrolled past, or null if there is no such element
		 */
		function _isScrolledPast(el, side) {
			var parent = _getParentAutoScrollElement(el, true),
				elSide = _getRect(el)[side];

			/* jshint boss:true */
			while (parent) {
				var parentSide = _getRect(parent)[side],
					visible;

				if (side === 'top' || side === 'left') {
					visible = elSide >= parentSide;
				} else {
					visible = elSide <= parentSide;
				}

				if (!visible) return parent;

				if (parent === _getWindowScrollingElement()) break;

				parent = _getParentAutoScrollElement(parent, false);
			}

			return false;
		}

		/**
		 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
		 * The value is returned in real pixels.
		 * @param  {HTMLElement} el
		 * @return {Array}             Offsets in the format of [left, top]
		 */
		function _getRelativeScrollOffset(el) {
			var offsetLeft = 0,
				offsetTop = 0,
				winScroller = _getWindowScrollingElement();

			if (el) {
				do {
					var matrix = _matrix(el),
						scaleX = matrix.a,
						scaleY = matrix.d;

					offsetLeft += el.scrollLeft * scaleX;
					offsetTop += el.scrollTop * scaleY;
				} while (el !== winScroller && (el = el.parentNode));
			}

			return [offsetLeft, offsetTop];
		}

		// Fixed #973:
		_on(document, 'touchmove', function(evt) {
			if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
				evt.preventDefault();
			}
		});


		// Export utils
		Sortable.utils = {
			on: _on,
			off: _off,
			css: _css,
			find: _find,
			is: function (el, selector) {
				return !!_closest(el, selector, el, false);
			},
			extend: _extend,
			throttle: _throttle,
			closest: _closest,
			toggleClass: _toggleClass,
			clone: _clone,
			index: _index,
			nextTick: _nextTick,
			cancelNextTick: _cancelNextTick,
			detectDirection: _detectDirection,
			getChild: _getChild
		};


		/**
		 * Create sortable instance
		 * @param {HTMLElement}  el
		 * @param {Object}      [options]
		 */
		Sortable.create = function (el, options) {
			return new Sortable(el, options);
		};


		// Export
		Sortable.version = '1.8.4';
		return Sortable;
	});


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	var __vue_exports__, __vue_options__
	var __vue_styles__ = {}

	/* script */
	__vue_exports__ = __webpack_require__(116)

	/* template */
	var __vue_template__ = __webpack_require__(126)
	__vue_options__ = __vue_exports__ = __vue_exports__ || {}
	if (
	  typeof __vue_exports__.default === "object" ||
	  typeof __vue_exports__.default === "function"
	) {
	if (Object.keys(__vue_exports__).some(function (key) { return key !== "default" && key !== "__esModule" })) {console.error("named exports are not supported in *.vue files.")}
	__vue_options__ = __vue_exports__ = __vue_exports__.default
	}
	if (typeof __vue_options__ === "function") {
	  __vue_options__ = __vue_options__.options
	}
	__vue_options__.__file = "/home/dn/www/reform-city.docker/app/modules/commerce/backend/assets/src/components/App.vue"
	__vue_options__.render = __vue_template__.render
	__vue_options__.staticRenderFns = __vue_template__.staticRenderFns

	/* hot reload */
	if (false) {(function () {
	  var hotAPI = require("vue-loader/node_modules/vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  module.hot.accept()
	  if (!module.hot.data) {
	    hotAPI.createRecord("data-v-67a6893a", __vue_options__)
	  } else {
	    hotAPI.reload("data-v-67a6893a", __vue_options__)
	  }
	})()}
	if (__vue_options__.functional) {console.error("[vue-loader] App.vue: functional components are not supported and should be defined in plain js files using render functions.")}

	module.exports = __vue_exports__


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _Sidebar = __webpack_require__(117);

	var _Sidebar2 = _interopRequireDefault(_Sidebar);

	var _Navbar = __webpack_require__(120);

	var _Navbar2 = _interopRequireDefault(_Navbar);

	var _Breadcrumbs = __webpack_require__(123);

	var _Breadcrumbs2 = _interopRequireDefault(_Breadcrumbs);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {

	    components: {
	        Breadcrumbs: _Breadcrumbs2.default,
	        Sidebar: _Sidebar2.default,
	        Navbar: _Navbar2.default
	    },

	    created: function created() {
	        if (this.$auth.check() && _.isEmpty(this.settings)) {
	            this.$store.dispatch('settings');
	        }
	    },

	    computed: {
	        isLoading: function isLoading() {
	            return this.$store.getters['isLoading'];
	        },
	        settings: function settings() {
	            return this.$store.getters['settings'];
	        }
	    }

	}; //
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	var __vue_exports__, __vue_options__
	var __vue_styles__ = {}

	/* script */
	__vue_exports__ = __webpack_require__(118)

	/* template */
	var __vue_template__ = __webpack_require__(119)
	__vue_options__ = __vue_exports__ = __vue_exports__ || {}
	if (
	  typeof __vue_exports__.default === "object" ||
	  typeof __vue_exports__.default === "function"
	) {
	if (Object.keys(__vue_exports__).some(function (key) { return key !== "default" && key !== "__esModule" })) {console.error("named exports are not supported in *.vue files.")}
	__vue_options__ = __vue_exports__ = __vue_exports__.default
	}
	if (typeof __vue_options__ === "function") {
	  __vue_options__ = __vue_options__.options
	}
	__vue_options__.__file = "/home/dn/www/reform-city.docker/app/modules/commerce/backend/assets/src/components/Sidebar.vue"
	__vue_options__.render = __vue_template__.render
	__vue_options__.staticRenderFns = __vue_template__.staticRenderFns

	/* hot reload */
	if (false) {(function () {
	  var hotAPI = require("vue-loader/node_modules/vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  module.hot.accept()
	  if (!module.hot.data) {
	    hotAPI.createRecord("data-v-d14cc716", __vue_options__)
	  } else {
	    hotAPI.reload("data-v-d14cc716", __vue_options__)
	  }
	})()}
	if (__vue_options__.functional) {console.error("[vue-loader] Sidebar.vue: functional components are not supported and should be defined in plain js files using render functions.")}

	module.exports = __vue_exports__


/***/ }),
/* 118 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	exports.default = {

	    methods: {
	        isActive: function isActive(module) {
	            var parts = this.$route.path.split('/');
	            parts = parts.filter(Boolean);

	            return module === parts[0];
	        }
	    }
	};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return _c('b-nav', {
	    staticClass: "sidebar navbar-dark bg-dark"
	  }, [_c('li', {
	    staticClass: "nav-item"
	  }, [_c('router-link', {
	    staticClass: "nav-link",
	    attrs: {
	      "to": {
	        path: '/'
	      },
	      "exact": ""
	    }
	  }, [_c('i', {
	    staticClass: "nav-icon fa fa-chart-bar"
	  }), _vm._v("Главная\n        ")])], 1), _vm._v(" "), _c('li', {
	    staticClass: "nav-item"
	  }, [_c('router-link', {
	    staticClass: "nav-link dropdown-toggle",
	    class: _vm.isActive('pages') ? 'active' : '',
	    attrs: {
	      "to": "/pages/page/index"
	    }
	  }, [_c('i', {
	    staticClass: "nav-icon fa fa-file"
	  }), _vm._v("Страницы\n        ")]), _vm._v(" "), _c('div', {
	    staticClass: "dropdown-menu",
	    class: _vm.isActive('pages') ? 'show' : ''
	  }, [_c('router-link', {
	    staticClass: "dropdown-item",
	    attrs: {
	      "to": "/pages/page/index"
	    }
	  }, [_c('i', {
	    staticClass: "nav-icon fa fa-file"
	  }), _vm._v("Страницы")]), _vm._v(" "), _c('router-link', {
	    staticClass: "dropdown-item",
	    attrs: {
	      "to": "/pages/category/index"
	    }
	  }, [_c('i', {
	    staticClass: "nav-icon fa fa-list"
	  }), _vm._v("Категории")])], 1)], 1), _vm._v(" "), _c('li', {
	    staticClass: "nav-item"
	  }, [_c('router-link', {
	    staticClass: "nav-link dropdown-toggle",
	    class: _vm.isActive('catalog') ? 'active' : '',
	    attrs: {
	      "to": "/catalog/category/index"
	    }
	  }, [_c('i', {
	    staticClass: "nav-icon fa fa-sitemap"
	  }), _vm._v("Каталог\n        ")]), _vm._v(" "), _c('div', {
	    staticClass: "dropdown-menu",
	    class: _vm.isActive('catalog') ? 'show' : ''
	  }, [_c('router-link', {
	    staticClass: "dropdown-item",
	    attrs: {
	      "to": "/catalog/category/index"
	    }
	  }, [_c('i', {
	    staticClass: "nav-icon fa fa-list"
	  }), _vm._v("Категории")])], 1)], 1), _vm._v(" "), _c('li', {
	    staticClass: "nav-item"
	  }, [_c('router-link', {
	    staticClass: "nav-link dropdown-toggle",
	    class: _vm.isActive('files') ? 'active' : '',
	    attrs: {
	      "to": "/files/file/index"
	    }
	  }, [_c('i', {
	    staticClass: "nav-icon fa fa-file"
	  }), _vm._v("Файлы\n        ")]), _vm._v(" "), _c('div', {
	    staticClass: "dropdown-menu",
	    class: _vm.isActive('files') ? 'show' : ''
	  }, [_c('router-link', {
	    staticClass: "dropdown-item",
	    attrs: {
	      "to": "/files/file/index"
	    }
	  }, [_c('i', {
	    staticClass: "nav-icon fa fa-file"
	  }), _vm._v("Файлы")]), _vm._v(" "), _c('router-link', {
	    staticClass: "dropdown-item",
	    attrs: {
	      "to": "/files/preset/index"
	    }
	  }, [_c('i', {
	    staticClass: "nav-icon fa fa-list"
	  }), _vm._v("Пресеты")])], 1)], 1)])
	},staticRenderFns: []}
	if (false) {
	  module.hot.accept()
	  if (module.hot.data) {
	     require("vue-loader/node_modules/vue-hot-reload-api").rerender("data-v-d14cc716", module.exports)
	  }
	}

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	var __vue_exports__, __vue_options__
	var __vue_styles__ = {}

	/* script */
	__vue_exports__ = __webpack_require__(121)

	/* template */
	var __vue_template__ = __webpack_require__(122)
	__vue_options__ = __vue_exports__ = __vue_exports__ || {}
	if (
	  typeof __vue_exports__.default === "object" ||
	  typeof __vue_exports__.default === "function"
	) {
	if (Object.keys(__vue_exports__).some(function (key) { return key !== "default" && key !== "__esModule" })) {console.error("named exports are not supported in *.vue files.")}
	__vue_options__ = __vue_exports__ = __vue_exports__.default
	}
	if (typeof __vue_options__ === "function") {
	  __vue_options__ = __vue_options__.options
	}
	__vue_options__.__file = "/home/dn/www/reform-city.docker/app/modules/commerce/backend/assets/src/components/Navbar.vue"
	__vue_options__.render = __vue_template__.render
	__vue_options__.staticRenderFns = __vue_template__.staticRenderFns

	/* hot reload */
	if (false) {(function () {
	  var hotAPI = require("vue-loader/node_modules/vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  module.hot.accept()
	  if (!module.hot.data) {
	    hotAPI.createRecord("data-v-a2b173f2", __vue_options__)
	  } else {
	    hotAPI.reload("data-v-a2b173f2", __vue_options__)
	  }
	})()}
	if (__vue_options__.functional) {console.error("[vue-loader] Navbar.vue: functional components are not supported and should be defined in plain js files using render functions.")}

	module.exports = __vue_exports__


/***/ }),
/* 121 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	exports.default = {};

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return _c('b-navbar', {
	    staticClass: "topbar",
	    attrs: {
	      "type": "dark",
	      "variant": "dark"
	    }
	  }, [_c('b-navbar-brand', {
	    attrs: {
	      "href": "/",
	      "target": "_blank"
	    }
	  }, [_vm._v("REFORM-CITY.RU")]), _vm._v(" "), _c('b-navbar-nav', {
	    staticClass: "ml-auto"
	  }, [_c('b-nav-item', {
	    attrs: {
	      "href": "/"
	    },
	    on: {
	      "click": function($event) {
	        return _vm.$auth.logout()
	      }
	    }
	  }, [_c('i', {
	    staticClass: "fa fa-sign-out-alt"
	  }), _vm._v(" Выйти")])], 1)], 1)
	},staticRenderFns: []}
	if (false) {
	  module.hot.accept()
	  if (module.hot.data) {
	     require("vue-loader/node_modules/vue-hot-reload-api").rerender("data-v-a2b173f2", module.exports)
	  }
	}

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	var __vue_exports__, __vue_options__
	var __vue_styles__ = {}

	/* script */
	__vue_exports__ = __webpack_require__(124)

	/* template */
	var __vue_template__ = __webpack_require__(125)
	__vue_options__ = __vue_exports__ = __vue_exports__ || {}
	if (
	  typeof __vue_exports__.default === "object" ||
	  typeof __vue_exports__.default === "function"
	) {
	if (Object.keys(__vue_exports__).some(function (key) { return key !== "default" && key !== "__esModule" })) {console.error("named exports are not supported in *.vue files.")}
	__vue_options__ = __vue_exports__ = __vue_exports__.default
	}
	if (typeof __vue_options__ === "function") {
	  __vue_options__ = __vue_options__.options
	}
	__vue_options__.__file = "/home/dn/www/reform-city.docker/app/modules/commerce/backend/assets/src/components/Breadcrumbs.vue"
	__vue_options__.render = __vue_template__.render
	__vue_options__.staticRenderFns = __vue_template__.staticRenderFns

	/* hot reload */
	if (false) {(function () {
	  var hotAPI = require("vue-loader/node_modules/vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  module.hot.accept()
	  if (!module.hot.data) {
	    hotAPI.createRecord("data-v-e28b412e", __vue_options__)
	  } else {
	    hotAPI.reload("data-v-e28b412e", __vue_options__)
	  }
	})()}
	if (__vue_options__.functional) {console.error("[vue-loader] Breadcrumbs.vue: functional components are not supported and should be defined in plain js files using render functions.")}

	module.exports = __vue_exports__


/***/ }),
/* 124 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	//
	//
	//
	//
	//
	//

	exports.default = {

	    props: {
	        home: {
	            type: Object,
	            default: function _default() {
	                return {
	                    text: 'Главная',
	                    href: '/#/'
	                };
	            }
	        }
	    },

	    data: function data() {
	        return {
	            items: []
	        };
	    },


	    watch: {
	        '$route': function $route() {
	            this.items = this.$route.meta.breadcrumbs;

	            if (this.items && this.home && this.home.text !== this.items[0].text) {
	                this.items.splice(0, 0, this.home);
	            }

	            return this.items;
	        }
	    }

	};

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return (_vm.items) ? _c('b-breadcrumb', {
	    attrs: {
	      "items": _vm.items
	    }
	  }) : _vm._e()
	},staticRenderFns: []}
	if (false) {
	  module.hot.accept()
	  if (module.hot.data) {
	     require("vue-loader/node_modules/vue-hot-reload-api").rerender("data-v-e28b412e", module.exports)
	  }
	}

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return _c('div', {
	    staticClass: "h-100"
	  }, [(_vm.$auth.check()) ? _c('header', [_c('navbar')], 1) : _vm._e(), _vm._v(" "), _c('div', {
	    staticClass: "container-fluid h-100"
	  }, [(_vm.$auth.ready()) ? _c('div', {
	    staticClass: "row h-100"
	  }, [_c('notifications'), _vm._v(" "), _c('yc-loader', {
	    attrs: {
	      "value": _vm.isLoading
	    }
	  }), _vm._v(" "), (_vm.$auth.check()) ? _c('div', {
	    staticClass: "col-2"
	  }, [_c('sidebar')], 1) : _vm._e(), _vm._v(" "), _c('div', {
	    class: _vm.$auth.check() ? 'col-10 pl-0' : 'col-12 pl-0'
	  }, [_c('breadcrumbs'), _vm._v(" "), _c('router-view')], 1)], 1) : _vm._e()]), _vm._v(" "), _c('footer', {
	    staticClass: "row"
	  })])
	},staticRenderFns: []}
	if (false) {
	  module.hot.accept()
	  if (module.hot.data) {
	     require("vue-loader/node_modules/vue-hot-reload-api").rerender("data-v-67a6893a", module.exports)
	  }
	}

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	var __vue_exports__, __vue_options__
	var __vue_styles__ = {}

	/* script */
	__vue_exports__ = __webpack_require__(128)

	/* template */
	var __vue_template__ = __webpack_require__(129)
	__vue_options__ = __vue_exports__ = __vue_exports__ || {}
	if (
	  typeof __vue_exports__.default === "object" ||
	  typeof __vue_exports__.default === "function"
	) {
	if (Object.keys(__vue_exports__).some(function (key) { return key !== "default" && key !== "__esModule" })) {console.error("named exports are not supported in *.vue files.")}
	__vue_options__ = __vue_exports__ = __vue_exports__.default
	}
	if (typeof __vue_options__ === "function") {
	  __vue_options__ = __vue_options__.options
	}
	__vue_options__.__file = "/home/dn/www/reform-city.docker/app/modules/commerce/backend/assets/src/components/Loader.vue"
	__vue_options__.render = __vue_template__.render
	__vue_options__.staticRenderFns = __vue_template__.staticRenderFns

	/* hot reload */
	if (false) {(function () {
	  var hotAPI = require("vue-loader/node_modules/vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  module.hot.accept()
	  if (!module.hot.data) {
	    hotAPI.createRecord("data-v-660cbeec", __vue_options__)
	  } else {
	    hotAPI.reload("data-v-660cbeec", __vue_options__)
	  }
	})()}
	if (__vue_options__.functional) {console.error("[vue-loader] Loader.vue: functional components are not supported and should be defined in plain js files using render functions.")}

	module.exports = __vue_exports__


/***/ }),
/* 128 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	exports.default = {

	    props: {
	        value: {
	            type: Boolean
	        }
	    },

	    computed: {
	        isLoading: function isLoading() {
	            var isLoading = this.value;

	            if (typeof isLoading === 'undefined') {
	                isLoading = this.$store.getters['isLoading'];
	            }

	            return isLoading;
	        }
	    }

	};

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return (_vm.isLoading) ? _c('div', {
	    staticClass: "yc-loader"
	  }, [_vm._m(0)]) : _vm._e()
	},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return _c('div', {
	    staticClass: "progress"
	  }, [_c('div', {
	    staticClass: "progress-bar progress-bar-striped bg-info progress-bar-animated",
	    staticStyle: {
	      "width": "100%"
	    },
	    attrs: {
	      "role": "progressbar",
	      "aria-valuenow": "100",
	      "aria-valuemin": "0",
	      "aria-valuemax": "100"
	    }
	  })])
	}]}
	if (false) {
	  module.hot.accept()
	  if (module.hot.data) {
	     require("vue-loader/node_modules/vue-hot-reload-api").rerender("data-v-660cbeec", module.exports)
	  }
	}

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	var __vue_exports__, __vue_options__
	var __vue_styles__ = {}

	/* styles */
	__webpack_require__(131)

	/* script */
	__vue_exports__ = __webpack_require__(135)

	/* template */
	var __vue_template__ = __webpack_require__(136)
	__vue_options__ = __vue_exports__ = __vue_exports__ || {}
	if (
	  typeof __vue_exports__.default === "object" ||
	  typeof __vue_exports__.default === "function"
	) {
	if (Object.keys(__vue_exports__).some(function (key) { return key !== "default" && key !== "__esModule" })) {console.error("named exports are not supported in *.vue files.")}
	__vue_options__ = __vue_exports__ = __vue_exports__.default
	}
	if (typeof __vue_options__ === "function") {
	  __vue_options__ = __vue_options__.options
	}
	__vue_options__.__file = "/home/dn/www/reform-city.docker/app/modules/commerce/backend/assets/src/components/AdminButtons.vue"
	__vue_options__.render = __vue_template__.render
	__vue_options__.staticRenderFns = __vue_template__.staticRenderFns
	__vue_options__._scopeId = "data-v-33df5a2e"

	/* hot reload */
	if (false) {(function () {
	  var hotAPI = require("vue-loader/node_modules/vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  module.hot.accept()
	  if (!module.hot.data) {
	    hotAPI.createRecord("data-v-33df5a2e", __vue_options__)
	  } else {
	    hotAPI.reload("data-v-33df5a2e", __vue_options__)
	  }
	})()}
	if (__vue_options__.functional) {console.error("[vue-loader] AdminButtons.vue: functional components are not supported and should be defined in plain js files using render functions.")}

	module.exports = __vue_exports__


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(132);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(134)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../../node_modules/css-loader/index.js!../../../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-33df5a2e&scoped=true!../../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./AdminButtons.vue", function() {
				var newContent = require("!!../../../../node_modules/css-loader/index.js!../../../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-33df5a2e&scoped=true!../../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./AdminButtons.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(133)();
	// imports


	// module
	exports.push([module.id, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", ""]);

	// exports


/***/ }),
/* 133 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if (media) {
			styleElement.setAttribute("media", media);
		}

		if (sourceMap) {
			// https://developer.chrome.com/devtools/docs/javascript-debugging
			// this makes source maps inside style tags work properly in Chrome
			css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */';
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}


/***/ }),
/* 135 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	exports.default = {

	    props: {
	        model: {
	            type: Object,
	            default: function _default() {
	                return {};
	            }
	        }
	    },

	    data: function data() {
	        return {
	            parts: [],
	            actions: {
	                index: ['create'],
	                create: ['index', 'save'],
	                update: ['index', 'delete', 'create', 'view', 'save']
	            }
	        };
	    },


	    computed: {
	        settings: function settings() {
	            return this.$store.getters['settings'];
	        },
	        module: function module() {
	            return this.parts[0];
	        },
	        controller: function controller() {
	            return this.parts[1];
	        },
	        action: function action() {
	            return this.parts[2];
	        },
	        route: function route() {
	            return '/' + this.module + '/' + this.controller;
	        },
	        alias: function alias() {
	            if (typeof this.model.url === 'undefined') {
	                return false;
	            }

	            if (this.model.url.alias) {
	                return this.settings.frontendWeb + '/' + this.model.url.alias;
	            }

	            return false;
	        }
	    },

	    created: function created() {
	        this.setParts();
	    },

	    watch: {
	        '$route': function $route() {
	            this.setParts();
	        }
	    },

	    methods: {
	        setParts: function setParts() {
	            var parts = this.$route.path.split('/');
	            this.parts = parts.filter(Boolean);
	        },
	        isVisible: function isVisible(button) {
	            var buttons = this.actions[this.action];

	            return buttons && buttons.indexOf(button) !== -1;
	        },
	        save: function save(event) {
	            this.$emit('save', event);
	        },
	        destroy: function destroy(event) {
	            var result = confirm('Вы уверены?');

	            if (result) {
	                this.$emit('destroy', event);
	            }
	        }
	    }

	};

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return _c('div', {
	    staticClass: "yc-admin-btns mb-2"
	  }, [(_vm.isVisible('index')) ? _c('b-button', {
	    attrs: {
	      "variant": "info",
	      "size": "xs",
	      "to": (_vm.route + "/index")
	    }
	  }, [_c('i', {
	    staticClass: "fa fa-list-ul"
	  }), _vm._v(" Список\n    ")]) : _vm._e(), _vm._v(" "), (_vm.isVisible('create')) ? _c('b-button', {
	    attrs: {
	      "variant": "success",
	      "size": "xs",
	      "to": (_vm.route + "/create"),
	      "title": "Добавить"
	    }
	  }, [_c('i', {
	    staticClass: "fa fa-plus-square"
	  }), _vm._v(" Создать\n    ")]) : _vm._e(), _vm._v(" "), (_vm.isVisible('delete')) ? _c('b-button', {
	    attrs: {
	      "variant": "danger",
	      "size": "xs",
	      "title": "Удалить"
	    },
	    on: {
	      "click": _vm.destroy
	    }
	  }, [_c('i', {
	    staticClass: "fa fa-trash"
	  }), _vm._v(" Удалить\n    ")]) : _vm._e(), _vm._v(" "), (_vm.isVisible('view') && _vm.alias) ? _c('b-button', {
	    attrs: {
	      "variant": "info",
	      "size": "xs",
	      "href": _vm.alias,
	      "target": "_blank",
	      "title": "Добавить новую страницу"
	    }
	  }, [_c('i', {
	    staticClass: "fa fa-eye"
	  }), _vm._v(" Просмотр\n    ")]) : _vm._e(), _vm._v(" "), (_vm.isVisible('save')) ? _c('b-button', {
	    attrs: {
	      "variant": "primary",
	      "size": "xs",
	      "title": "Сохранить"
	    },
	    on: {
	      "click": _vm.save
	    }
	  }, [_c('i', {
	    staticClass: "fa fa-save"
	  }), _vm._v(" Сохранить\n    ")]) : _vm._e()], 1)
	},staticRenderFns: []}
	if (false) {
	  module.hot.accept()
	  if (module.hot.data) {
	     require("vue-loader/node_modules/vue-hot-reload-api").rerender("data-v-33df5a2e", module.exports)
	  }
	}

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _defineProperty2 = __webpack_require__(138);

	var _defineProperty3 = _interopRequireDefault(_defineProperty2);

	var _mutations;

	var _vue = __webpack_require__(2);

	var _vue2 = _interopRequireDefault(_vue);

	var _vuex = __webpack_require__(142);

	var _vuex2 = _interopRequireDefault(_vuex);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = new _vuex2.default.Store({
	    namespaced: true,

	    state: {
	        isLoading: false,
	        errors: [],
	        settings: {}
	    },

	    getters: {
	        isDev: function isDev(state) {
	            return true;
	        },
	        isLoading: function isLoading(state) {
	            return state.isLoading;
	        },
	        errors: function errors(state) {
	            return state.errors;
	        },
	        hasError: function hasError(state) {
	            return state.errors.length > 0;
	        },
	        settings: function settings(state) {
	            return state.settings;
	        }
	    },

	    mutations: (_mutations = {}, (0, _defineProperty3.default)(_mutations, 'SET_LOADER', function SET_LOADER(state, value) {
	        state.isLoading = value;
	    }), (0, _defineProperty3.default)(_mutations, 'SET_ERRORS', function SET_ERRORS(state, errors) {
	        state.errors = errors;
	    }), (0, _defineProperty3.default)(_mutations, 'FETCH_SETTINGS_SUCCESS', function FETCH_SETTINGS_SUCCESS(state, data) {
	        state.settings = data;
	    }), _mutations),

	    actions: {
	        loading: function loading(_ref, value) {
	            var state = _ref.state,
	                commit = _ref.commit,
	                rootState = _ref.rootState;

	            commit('SET_LOADER', value);
	        },
	        failing: function failing(_ref2, errors) {
	            var state = _ref2.state,
	                commit = _ref2.commit,
	                rootState = _ref2.rootState;

	            var messages = [];

	            if (typeof errors.message !== 'undefined') {
	                messages.push(errors.message);
	            } else {
	                errors.map(function (value) {
	                    messages.push(value.message);
	                });
	            }

	            commit('SET_ERRORS', messages);

	            messages.map(function (value) {
	                _vue2.default.notify({ type: 'error', text: value });
	            });
	        },
	        settings: function settings(_ref3) {
	            var state = _ref3.state,
	                commit = _ref3.commit,
	                rootState = _ref3.rootState;

	            return _vue2.default.axios.get('/admin/api/v1/settings/index').then(function (response) {
	                return commit('FETCH_SETTINGS_SUCCESS', response.data);
	            }, function (error) {});
	        }
	    }

	});

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _defineProperty = __webpack_require__(139);

	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	};

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(140), __esModule: true };

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(141);
	var $Object = __webpack_require__(17).Object;
	module.exports = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(15);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(25), 'Object', { defineProperty: __webpack_require__(21).f });


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * vuex v3.1.0
	 * (c) 2019 Evan You
	 * @license MIT
	 */
	'use strict';

	function applyMixin (Vue) {
	  var version = Number(Vue.version.split('.')[0]);

	  if (version >= 2) {
	    Vue.mixin({ beforeCreate: vuexInit });
	  } else {
	    // override init and inject vuex init procedure
	    // for 1.x backwards compatibility.
	    var _init = Vue.prototype._init;
	    Vue.prototype._init = function (options) {
	      if ( options === void 0 ) options = {};

	      options.init = options.init
	        ? [vuexInit].concat(options.init)
	        : vuexInit;
	      _init.call(this, options);
	    };
	  }

	  /**
	   * Vuex init hook, injected into each instances init hooks list.
	   */

	  function vuexInit () {
	    var options = this.$options;
	    // store injection
	    if (options.store) {
	      this.$store = typeof options.store === 'function'
	        ? options.store()
	        : options.store;
	    } else if (options.parent && options.parent.$store) {
	      this.$store = options.parent.$store;
	    }
	  }
	}

	var devtoolHook =
	  typeof window !== 'undefined' &&
	  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

	function devtoolPlugin (store) {
	  if (!devtoolHook) { return }

	  store._devtoolHook = devtoolHook;

	  devtoolHook.emit('vuex:init', store);

	  devtoolHook.on('vuex:travel-to-state', function (targetState) {
	    store.replaceState(targetState);
	  });

	  store.subscribe(function (mutation, state) {
	    devtoolHook.emit('vuex:mutation', mutation, state);
	  });
	}

	/**
	 * Get the first item that pass the test
	 * by second argument function
	 *
	 * @param {Array} list
	 * @param {Function} f
	 * @return {*}
	 */

	/**
	 * forEach for object
	 */
	function forEachValue (obj, fn) {
	  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
	}

	function isObject (obj) {
	  return obj !== null && typeof obj === 'object'
	}

	function isPromise (val) {
	  return val && typeof val.then === 'function'
	}

	function assert (condition, msg) {
	  if (!condition) { throw new Error(("[vuex] " + msg)) }
	}

	// Base data struct for store's module, package with some attribute and method
	var Module = function Module (rawModule, runtime) {
	  this.runtime = runtime;
	  // Store some children item
	  this._children = Object.create(null);
	  // Store the origin module object which passed by programmer
	  this._rawModule = rawModule;
	  var rawState = rawModule.state;

	  // Store the origin module's state
	  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
	};

	var prototypeAccessors = { namespaced: { configurable: true } };

	prototypeAccessors.namespaced.get = function () {
	  return !!this._rawModule.namespaced
	};

	Module.prototype.addChild = function addChild (key, module) {
	  this._children[key] = module;
	};

	Module.prototype.removeChild = function removeChild (key) {
	  delete this._children[key];
	};

	Module.prototype.getChild = function getChild (key) {
	  return this._children[key]
	};

	Module.prototype.update = function update (rawModule) {
	  this._rawModule.namespaced = rawModule.namespaced;
	  if (rawModule.actions) {
	    this._rawModule.actions = rawModule.actions;
	  }
	  if (rawModule.mutations) {
	    this._rawModule.mutations = rawModule.mutations;
	  }
	  if (rawModule.getters) {
	    this._rawModule.getters = rawModule.getters;
	  }
	};

	Module.prototype.forEachChild = function forEachChild (fn) {
	  forEachValue(this._children, fn);
	};

	Module.prototype.forEachGetter = function forEachGetter (fn) {
	  if (this._rawModule.getters) {
	    forEachValue(this._rawModule.getters, fn);
	  }
	};

	Module.prototype.forEachAction = function forEachAction (fn) {
	  if (this._rawModule.actions) {
	    forEachValue(this._rawModule.actions, fn);
	  }
	};

	Module.prototype.forEachMutation = function forEachMutation (fn) {
	  if (this._rawModule.mutations) {
	    forEachValue(this._rawModule.mutations, fn);
	  }
	};

	Object.defineProperties( Module.prototype, prototypeAccessors );

	var ModuleCollection = function ModuleCollection (rawRootModule) {
	  // register root module (Vuex.Store options)
	  this.register([], rawRootModule, false);
	};

	ModuleCollection.prototype.get = function get (path) {
	  return path.reduce(function (module, key) {
	    return module.getChild(key)
	  }, this.root)
	};

	ModuleCollection.prototype.getNamespace = function getNamespace (path) {
	  var module = this.root;
	  return path.reduce(function (namespace, key) {
	    module = module.getChild(key);
	    return namespace + (module.namespaced ? key + '/' : '')
	  }, '')
	};

	ModuleCollection.prototype.update = function update$1 (rawRootModule) {
	  update([], this.root, rawRootModule);
	};

	ModuleCollection.prototype.register = function register (path, rawModule, runtime) {
	    var this$1 = this;
	    if ( runtime === void 0 ) runtime = true;

	  if (process.env.NODE_ENV !== 'production') {
	    assertRawModule(path, rawModule);
	  }

	  var newModule = new Module(rawModule, runtime);
	  if (path.length === 0) {
	    this.root = newModule;
	  } else {
	    var parent = this.get(path.slice(0, -1));
	    parent.addChild(path[path.length - 1], newModule);
	  }

	  // register nested modules
	  if (rawModule.modules) {
	    forEachValue(rawModule.modules, function (rawChildModule, key) {
	      this$1.register(path.concat(key), rawChildModule, runtime);
	    });
	  }
	};

	ModuleCollection.prototype.unregister = function unregister (path) {
	  var parent = this.get(path.slice(0, -1));
	  var key = path[path.length - 1];
	  if (!parent.getChild(key).runtime) { return }

	  parent.removeChild(key);
	};

	function update (path, targetModule, newModule) {
	  if (process.env.NODE_ENV !== 'production') {
	    assertRawModule(path, newModule);
	  }

	  // update target module
	  targetModule.update(newModule);

	  // update nested modules
	  if (newModule.modules) {
	    for (var key in newModule.modules) {
	      if (!targetModule.getChild(key)) {
	        if (process.env.NODE_ENV !== 'production') {
	          console.warn(
	            "[vuex] trying to add a new module '" + key + "' on hot reloading, " +
	            'manual reload is needed'
	          );
	        }
	        return
	      }
	      update(
	        path.concat(key),
	        targetModule.getChild(key),
	        newModule.modules[key]
	      );
	    }
	  }
	}

	var functionAssert = {
	  assert: function (value) { return typeof value === 'function'; },
	  expected: 'function'
	};

	var objectAssert = {
	  assert: function (value) { return typeof value === 'function' ||
	    (typeof value === 'object' && typeof value.handler === 'function'); },
	  expected: 'function or object with "handler" function'
	};

	var assertTypes = {
	  getters: functionAssert,
	  mutations: functionAssert,
	  actions: objectAssert
	};

	function assertRawModule (path, rawModule) {
	  Object.keys(assertTypes).forEach(function (key) {
	    if (!rawModule[key]) { return }

	    var assertOptions = assertTypes[key];

	    forEachValue(rawModule[key], function (value, type) {
	      assert(
	        assertOptions.assert(value),
	        makeAssertionMessage(path, key, type, value, assertOptions.expected)
	      );
	    });
	  });
	}

	function makeAssertionMessage (path, key, type, value, expected) {
	  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
	  if (path.length > 0) {
	    buf += " in module \"" + (path.join('.')) + "\"";
	  }
	  buf += " is " + (JSON.stringify(value)) + ".";
	  return buf
	}

	var Vue; // bind on install

	var Store = function Store (options) {
	  var this$1 = this;
	  if ( options === void 0 ) options = {};

	  // Auto install if it is not done yet and `window` has `Vue`.
	  // To allow users to avoid auto-installation in some cases,
	  // this code should be placed here. See #731
	  if (!Vue && typeof window !== 'undefined' && window.Vue) {
	    install(window.Vue);
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
	    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
	    assert(this instanceof Store, "store must be called with the new operator.");
	  }

	  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];
	  var strict = options.strict; if ( strict === void 0 ) strict = false;

	  // store internal state
	  this._committing = false;
	  this._actions = Object.create(null);
	  this._actionSubscribers = [];
	  this._mutations = Object.create(null);
	  this._wrappedGetters = Object.create(null);
	  this._modules = new ModuleCollection(options);
	  this._modulesNamespaceMap = Object.create(null);
	  this._subscribers = [];
	  this._watcherVM = new Vue();

	  // bind commit and dispatch to self
	  var store = this;
	  var ref = this;
	  var dispatch = ref.dispatch;
	  var commit = ref.commit;
	  this.dispatch = function boundDispatch (type, payload) {
	    return dispatch.call(store, type, payload)
	  };
	  this.commit = function boundCommit (type, payload, options) {
	    return commit.call(store, type, payload, options)
	  };

	  // strict mode
	  this.strict = strict;

	  var state = this._modules.root.state;

	  // init root module.
	  // this also recursively registers all sub-modules
	  // and collects all module getters inside this._wrappedGetters
	  installModule(this, state, [], this._modules.root);

	  // initialize the store vm, which is responsible for the reactivity
	  // (also registers _wrappedGetters as computed properties)
	  resetStoreVM(this, state);

	  // apply plugins
	  plugins.forEach(function (plugin) { return plugin(this$1); });

	  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;
	  if (useDevtools) {
	    devtoolPlugin(this);
	  }
	};

	var prototypeAccessors$1 = { state: { configurable: true } };

	prototypeAccessors$1.state.get = function () {
	  return this._vm._data.$$state
	};

	prototypeAccessors$1.state.set = function (v) {
	  if (process.env.NODE_ENV !== 'production') {
	    assert(false, "use store.replaceState() to explicit replace store state.");
	  }
	};

	Store.prototype.commit = function commit (_type, _payload, _options) {
	    var this$1 = this;

	  // check object-style commit
	  var ref = unifyObjectStyle(_type, _payload, _options);
	    var type = ref.type;
	    var payload = ref.payload;
	    var options = ref.options;

	  var mutation = { type: type, payload: payload };
	  var entry = this._mutations[type];
	  if (!entry) {
	    if (process.env.NODE_ENV !== 'production') {
	      console.error(("[vuex] unknown mutation type: " + type));
	    }
	    return
	  }
	  this._withCommit(function () {
	    entry.forEach(function commitIterator (handler) {
	      handler(payload);
	    });
	  });
	  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });

	  if (
	    process.env.NODE_ENV !== 'production' &&
	    options && options.silent
	  ) {
	    console.warn(
	      "[vuex] mutation type: " + type + ". Silent option has been removed. " +
	      'Use the filter functionality in the vue-devtools'
	    );
	  }
	};

	Store.prototype.dispatch = function dispatch (_type, _payload) {
	    var this$1 = this;

	  // check object-style dispatch
	  var ref = unifyObjectStyle(_type, _payload);
	    var type = ref.type;
	    var payload = ref.payload;

	  var action = { type: type, payload: payload };
	  var entry = this._actions[type];
	  if (!entry) {
	    if (process.env.NODE_ENV !== 'production') {
	      console.error(("[vuex] unknown action type: " + type));
	    }
	    return
	  }

	  try {
	    this._actionSubscribers
	      .filter(function (sub) { return sub.before; })
	      .forEach(function (sub) { return sub.before(action, this$1.state); });
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production') {
	      console.warn("[vuex] error in before action subscribers: ");
	      console.error(e);
	    }
	  }

	  var result = entry.length > 1
	    ? Promise.all(entry.map(function (handler) { return handler(payload); }))
	    : entry[0](payload);

	  return result.then(function (res) {
	    try {
	      this$1._actionSubscribers
	        .filter(function (sub) { return sub.after; })
	        .forEach(function (sub) { return sub.after(action, this$1.state); });
	    } catch (e) {
	      if (process.env.NODE_ENV !== 'production') {
	        console.warn("[vuex] error in after action subscribers: ");
	        console.error(e);
	      }
	    }
	    return res
	  })
	};

	Store.prototype.subscribe = function subscribe (fn) {
	  return genericSubscribe(fn, this._subscribers)
	};

	Store.prototype.subscribeAction = function subscribeAction (fn) {
	  var subs = typeof fn === 'function' ? { before: fn } : fn;
	  return genericSubscribe(subs, this._actionSubscribers)
	};

	Store.prototype.watch = function watch (getter, cb, options) {
	    var this$1 = this;

	  if (process.env.NODE_ENV !== 'production') {
	    assert(typeof getter === 'function', "store.watch only accepts a function.");
	  }
	  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)
	};

	Store.prototype.replaceState = function replaceState (state) {
	    var this$1 = this;

	  this._withCommit(function () {
	    this$1._vm._data.$$state = state;
	  });
	};

	Store.prototype.registerModule = function registerModule (path, rawModule, options) {
	    if ( options === void 0 ) options = {};

	  if (typeof path === 'string') { path = [path]; }

	  if (process.env.NODE_ENV !== 'production') {
	    assert(Array.isArray(path), "module path must be a string or an Array.");
	    assert(path.length > 0, 'cannot register the root module by using registerModule.');
	  }

	  this._modules.register(path, rawModule);
	  installModule(this, this.state, path, this._modules.get(path), options.preserveState);
	  // reset store to update getters...
	  resetStoreVM(this, this.state);
	};

	Store.prototype.unregisterModule = function unregisterModule (path) {
	    var this$1 = this;

	  if (typeof path === 'string') { path = [path]; }

	  if (process.env.NODE_ENV !== 'production') {
	    assert(Array.isArray(path), "module path must be a string or an Array.");
	  }

	  this._modules.unregister(path);
	  this._withCommit(function () {
	    var parentState = getNestedState(this$1.state, path.slice(0, -1));
	    Vue.delete(parentState, path[path.length - 1]);
	  });
	  resetStore(this);
	};

	Store.prototype.hotUpdate = function hotUpdate (newOptions) {
	  this._modules.update(newOptions);
	  resetStore(this, true);
	};

	Store.prototype._withCommit = function _withCommit (fn) {
	  var committing = this._committing;
	  this._committing = true;
	  fn();
	  this._committing = committing;
	};

	Object.defineProperties( Store.prototype, prototypeAccessors$1 );

	function genericSubscribe (fn, subs) {
	  if (subs.indexOf(fn) < 0) {
	    subs.push(fn);
	  }
	  return function () {
	    var i = subs.indexOf(fn);
	    if (i > -1) {
	      subs.splice(i, 1);
	    }
	  }
	}

	function resetStore (store, hot) {
	  store._actions = Object.create(null);
	  store._mutations = Object.create(null);
	  store._wrappedGetters = Object.create(null);
	  store._modulesNamespaceMap = Object.create(null);
	  var state = store.state;
	  // init all modules
	  installModule(store, state, [], store._modules.root, true);
	  // reset vm
	  resetStoreVM(store, state, hot);
	}

	function resetStoreVM (store, state, hot) {
	  var oldVm = store._vm;

	  // bind store public getters
	  store.getters = {};
	  var wrappedGetters = store._wrappedGetters;
	  var computed = {};
	  forEachValue(wrappedGetters, function (fn, key) {
	    // use computed to leverage its lazy-caching mechanism
	    computed[key] = function () { return fn(store); };
	    Object.defineProperty(store.getters, key, {
	      get: function () { return store._vm[key]; },
	      enumerable: true // for local getters
	    });
	  });

	  // use a Vue instance to store the state tree
	  // suppress warnings just in case the user has added
	  // some funky global mixins
	  var silent = Vue.config.silent;
	  Vue.config.silent = true;
	  store._vm = new Vue({
	    data: {
	      $$state: state
	    },
	    computed: computed
	  });
	  Vue.config.silent = silent;

	  // enable strict mode for new vm
	  if (store.strict) {
	    enableStrictMode(store);
	  }

	  if (oldVm) {
	    if (hot) {
	      // dispatch changes in all subscribed watchers
	      // to force getter re-evaluation for hot reloading.
	      store._withCommit(function () {
	        oldVm._data.$$state = null;
	      });
	    }
	    Vue.nextTick(function () { return oldVm.$destroy(); });
	  }
	}

	function installModule (store, rootState, path, module, hot) {
	  var isRoot = !path.length;
	  var namespace = store._modules.getNamespace(path);

	  // register in namespace map
	  if (module.namespaced) {
	    store._modulesNamespaceMap[namespace] = module;
	  }

	  // set state
	  if (!isRoot && !hot) {
	    var parentState = getNestedState(rootState, path.slice(0, -1));
	    var moduleName = path[path.length - 1];
	    store._withCommit(function () {
	      Vue.set(parentState, moduleName, module.state);
	    });
	  }

	  var local = module.context = makeLocalContext(store, namespace, path);

	  module.forEachMutation(function (mutation, key) {
	    var namespacedType = namespace + key;
	    registerMutation(store, namespacedType, mutation, local);
	  });

	  module.forEachAction(function (action, key) {
	    var type = action.root ? key : namespace + key;
	    var handler = action.handler || action;
	    registerAction(store, type, handler, local);
	  });

	  module.forEachGetter(function (getter, key) {
	    var namespacedType = namespace + key;
	    registerGetter(store, namespacedType, getter, local);
	  });

	  module.forEachChild(function (child, key) {
	    installModule(store, rootState, path.concat(key), child, hot);
	  });
	}

	/**
	 * make localized dispatch, commit, getters and state
	 * if there is no namespace, just use root ones
	 */
	function makeLocalContext (store, namespace, path) {
	  var noNamespace = namespace === '';

	  var local = {
	    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
	      var args = unifyObjectStyle(_type, _payload, _options);
	      var payload = args.payload;
	      var options = args.options;
	      var type = args.type;

	      if (!options || !options.root) {
	        type = namespace + type;
	        if (process.env.NODE_ENV !== 'production' && !store._actions[type]) {
	          console.error(("[vuex] unknown local action type: " + (args.type) + ", global type: " + type));
	          return
	        }
	      }

	      return store.dispatch(type, payload)
	    },

	    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
	      var args = unifyObjectStyle(_type, _payload, _options);
	      var payload = args.payload;
	      var options = args.options;
	      var type = args.type;

	      if (!options || !options.root) {
	        type = namespace + type;
	        if (process.env.NODE_ENV !== 'production' && !store._mutations[type]) {
	          console.error(("[vuex] unknown local mutation type: " + (args.type) + ", global type: " + type));
	          return
	        }
	      }

	      store.commit(type, payload, options);
	    }
	  };

	  // getters and state object must be gotten lazily
	  // because they will be changed by vm update
	  Object.defineProperties(local, {
	    getters: {
	      get: noNamespace
	        ? function () { return store.getters; }
	        : function () { return makeLocalGetters(store, namespace); }
	    },
	    state: {
	      get: function () { return getNestedState(store.state, path); }
	    }
	  });

	  return local
	}

	function makeLocalGetters (store, namespace) {
	  var gettersProxy = {};

	  var splitPos = namespace.length;
	  Object.keys(store.getters).forEach(function (type) {
	    // skip if the target getter is not match this namespace
	    if (type.slice(0, splitPos) !== namespace) { return }

	    // extract local getter type
	    var localType = type.slice(splitPos);

	    // Add a port to the getters proxy.
	    // Define as getter property because
	    // we do not want to evaluate the getters in this time.
	    Object.defineProperty(gettersProxy, localType, {
	      get: function () { return store.getters[type]; },
	      enumerable: true
	    });
	  });

	  return gettersProxy
	}

	function registerMutation (store, type, handler, local) {
	  var entry = store._mutations[type] || (store._mutations[type] = []);
	  entry.push(function wrappedMutationHandler (payload) {
	    handler.call(store, local.state, payload);
	  });
	}

	function registerAction (store, type, handler, local) {
	  var entry = store._actions[type] || (store._actions[type] = []);
	  entry.push(function wrappedActionHandler (payload, cb) {
	    var res = handler.call(store, {
	      dispatch: local.dispatch,
	      commit: local.commit,
	      getters: local.getters,
	      state: local.state,
	      rootGetters: store.getters,
	      rootState: store.state
	    }, payload, cb);
	    if (!isPromise(res)) {
	      res = Promise.resolve(res);
	    }
	    if (store._devtoolHook) {
	      return res.catch(function (err) {
	        store._devtoolHook.emit('vuex:error', err);
	        throw err
	      })
	    } else {
	      return res
	    }
	  });
	}

	function registerGetter (store, type, rawGetter, local) {
	  if (store._wrappedGetters[type]) {
	    if (process.env.NODE_ENV !== 'production') {
	      console.error(("[vuex] duplicate getter key: " + type));
	    }
	    return
	  }
	  store._wrappedGetters[type] = function wrappedGetter (store) {
	    return rawGetter(
	      local.state, // local state
	      local.getters, // local getters
	      store.state, // root state
	      store.getters // root getters
	    )
	  };
	}

	function enableStrictMode (store) {
	  store._vm.$watch(function () { return this._data.$$state }, function () {
	    if (process.env.NODE_ENV !== 'production') {
	      assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
	    }
	  }, { deep: true, sync: true });
	}

	function getNestedState (state, path) {
	  return path.length
	    ? path.reduce(function (state, key) { return state[key]; }, state)
	    : state
	}

	function unifyObjectStyle (type, payload, options) {
	  if (isObject(type) && type.type) {
	    options = payload;
	    payload = type;
	    type = type.type;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    assert(typeof type === 'string', ("expects string as the type, but found " + (typeof type) + "."));
	  }

	  return { type: type, payload: payload, options: options }
	}

	function install (_Vue) {
	  if (Vue && _Vue === Vue) {
	    if (process.env.NODE_ENV !== 'production') {
	      console.error(
	        '[vuex] already installed. Vue.use(Vuex) should be called only once.'
	      );
	    }
	    return
	  }
	  Vue = _Vue;
	  applyMixin(Vue);
	}

	/**
	 * Reduce the code which written in Vue.js for getting the state.
	 * @param {String} [namespace] - Module's namespace
	 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
	 * @param {Object}
	 */
	var mapState = normalizeNamespace(function (namespace, states) {
	  var res = {};
	  normalizeMap(states).forEach(function (ref) {
	    var key = ref.key;
	    var val = ref.val;

	    res[key] = function mappedState () {
	      var state = this.$store.state;
	      var getters = this.$store.getters;
	      if (namespace) {
	        var module = getModuleByNamespace(this.$store, 'mapState', namespace);
	        if (!module) {
	          return
	        }
	        state = module.context.state;
	        getters = module.context.getters;
	      }
	      return typeof val === 'function'
	        ? val.call(this, state, getters)
	        : state[val]
	    };
	    // mark vuex getter for devtools
	    res[key].vuex = true;
	  });
	  return res
	});

	/**
	 * Reduce the code which written in Vue.js for committing the mutation
	 * @param {String} [namespace] - Module's namespace
	 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept anthor params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
	 * @return {Object}
	 */
	var mapMutations = normalizeNamespace(function (namespace, mutations) {
	  var res = {};
	  normalizeMap(mutations).forEach(function (ref) {
	    var key = ref.key;
	    var val = ref.val;

	    res[key] = function mappedMutation () {
	      var args = [], len = arguments.length;
	      while ( len-- ) args[ len ] = arguments[ len ];

	      // Get the commit method from store
	      var commit = this.$store.commit;
	      if (namespace) {
	        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
	        if (!module) {
	          return
	        }
	        commit = module.context.commit;
	      }
	      return typeof val === 'function'
	        ? val.apply(this, [commit].concat(args))
	        : commit.apply(this.$store, [val].concat(args))
	    };
	  });
	  return res
	});

	/**
	 * Reduce the code which written in Vue.js for getting the getters
	 * @param {String} [namespace] - Module's namespace
	 * @param {Object|Array} getters
	 * @return {Object}
	 */
	var mapGetters = normalizeNamespace(function (namespace, getters) {
	  var res = {};
	  normalizeMap(getters).forEach(function (ref) {
	    var key = ref.key;
	    var val = ref.val;

	    // The namespace has been mutated by normalizeNamespace
	    val = namespace + val;
	    res[key] = function mappedGetter () {
	      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
	        return
	      }
	      if (process.env.NODE_ENV !== 'production' && !(val in this.$store.getters)) {
	        console.error(("[vuex] unknown getter: " + val));
	        return
	      }
	      return this.$store.getters[val]
	    };
	    // mark vuex getter for devtools
	    res[key].vuex = true;
	  });
	  return res
	});

	/**
	 * Reduce the code which written in Vue.js for dispatch the action
	 * @param {String} [namespace] - Module's namespace
	 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
	 * @return {Object}
	 */
	var mapActions = normalizeNamespace(function (namespace, actions) {
	  var res = {};
	  normalizeMap(actions).forEach(function (ref) {
	    var key = ref.key;
	    var val = ref.val;

	    res[key] = function mappedAction () {
	      var args = [], len = arguments.length;
	      while ( len-- ) args[ len ] = arguments[ len ];

	      // get dispatch function from store
	      var dispatch = this.$store.dispatch;
	      if (namespace) {
	        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
	        if (!module) {
	          return
	        }
	        dispatch = module.context.dispatch;
	      }
	      return typeof val === 'function'
	        ? val.apply(this, [dispatch].concat(args))
	        : dispatch.apply(this.$store, [val].concat(args))
	    };
	  });
	  return res
	});

	/**
	 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
	 * @param {String} namespace
	 * @return {Object}
	 */
	var createNamespacedHelpers = function (namespace) { return ({
	  mapState: mapState.bind(null, namespace),
	  mapGetters: mapGetters.bind(null, namespace),
	  mapMutations: mapMutations.bind(null, namespace),
	  mapActions: mapActions.bind(null, namespace)
	}); };

	/**
	 * Normalize the map
	 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
	 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
	 * @param {Array|Object} map
	 * @return {Object}
	 */
	function normalizeMap (map) {
	  return Array.isArray(map)
	    ? map.map(function (key) { return ({ key: key, val: key }); })
	    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })
	}

	/**
	 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
	 * @param {Function} fn
	 * @return {Function}
	 */
	function normalizeNamespace (fn) {
	  return function (namespace, map) {
	    if (typeof namespace !== 'string') {
	      map = namespace;
	      namespace = '';
	    } else if (namespace.charAt(namespace.length - 1) !== '/') {
	      namespace += '/';
	    }
	    return fn(namespace, map)
	  }
	}

	/**
	 * Search a special module from store by namespace. if module not exist, print error message.
	 * @param {Object} store
	 * @param {String} helper
	 * @param {String} namespace
	 * @return {Object}
	 */
	function getModuleByNamespace (store, helper, namespace) {
	  var module = store._modulesNamespaceMap[namespace];
	  if (process.env.NODE_ENV !== 'production' && !module) {
	    console.error(("[vuex] module namespace not found in " + helper + "(): " + namespace));
	  }
	  return module
	}

	var index = {
	  Store: Store,
	  install: install,
	  version: '3.1.0',
	  mapState: mapState,
	  mapMutations: mapMutations,
	  mapGetters: mapGetters,
	  mapActions: mapActions,
	  createNamespacedHelpers: createNamespacedHelpers
	};

	module.exports = index;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {/**
	 * @license
	 * Lodash <https://lodash.com/>
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '4.17.11';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;

	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;

	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;

	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;

	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();

	  /** Detect free variable `exports`. */
	  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;

	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;

	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      // Use `util.types` for Node.js 10+.
	      var types = freeModule && freeModule.require && freeModule.require('util').types;

	      if (types) {
	        return types;
	      }

	      // Legacy `process.binding('util')` for Node.js < 10.
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());

	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');

	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }

	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }

	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined : object[key];
	  }

	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }

	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }

	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }

	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }

	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;

	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
	        symIterator = Symbol ? Symbol.iterator : undefined,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());

	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined;
	        return result;
	      };
	    }());

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	      return this;
	    }

	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }

	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      return index < 0 ? undefined : data[index][1];
	    }

	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }

	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }

	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;

	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }

	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }

	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);

	      this.size = data.size;
	      return result;
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;

	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined;
	    }

	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }

	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }

	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;

	      while (++index < length) {
	        result[index] = skip ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (isSet(value)) {
	        value.forEach(function(subValue) {
	          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	        });

	        return result;
	      }

	      if (isMap(value)) {
	        value.forEach(function(subValue, key) {
	          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	        });

	        return result;
	      }

	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);

	      var props = isArr ? undefined : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }

	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];

	        if ((value === undefined && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);

	        if (current != null && (computed === undefined
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = castPath(path, object);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined ? undefinedTag : nullTag;
	      }
	      return (symToStringTag && symToStringTag in Object(value))
	        ? getRawTag(value)
	        : objectToString(value);
	    }

	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      var func = object == null ? object : object[toKey(last(path))];
	      return func == null ? undefined : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }

	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }

	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = objIsArr ? arrayTag : getTag(object),
	          othTag = othIsArr ? arrayTag : getTag(other);

	      objTag = objTag == argsTag ? objectTag : objTag;
	      othTag = othTag == argsTag ? objectTag : othTag;

	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }

	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }

	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];

	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
	            : undefined;

	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = safeGet(object, key),
	          srcValue = safeGet(source, key),
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;

	      var isCommon = newValue === undefined;

	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || isFunction(objValue)) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};

	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	          baseSet(result, castPath(path, object), value);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          } else {
	            baseUnset(array, index);
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }

	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }

	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;

	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined;
	          if (newValue === undefined) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };

	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array == null ? 0 : array.length,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);

	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }

	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      return object == null || delete object[toKey(last(path))];
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);

	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;

	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value, object) {
	      if (isArray(value)) {
	        return value;
	      }
	      return isKey(value, object) ? [value] : stringToPath(toString(value));
	    }

	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);

	        var othIsDefined = other !== undefined,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);

	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }

	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;

	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined;

	        if (newValue === undefined) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }

	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;

	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value)) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined && other === undefined) {
	          return defaultValue;
	        }
	        if (value !== undefined) {
	          result = value;
	        }
	        if (other !== undefined) {
	          if (result === undefined) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined ? ' ' : baseToString(chars);

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;

	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] === undefined
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */
	    function customOmitClone(value) {
	      return isPlainObject(value) ? undefined : value;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

	      stack.set(array, other);
	      stack.set(other, array);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;

	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = getAllKeys(object),
	          objLength = objProps.length,
	          othProps = getAllKeys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined, flatten), func + '');
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;

	      while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined;
	    }

	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];

	      try {
	        value[symToStringTag] = undefined;
	        var unmasked = true;
	      } catch (e) {}

	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	      if (object == null) {
	        return [];
	      }
	      object = Object(object);
	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
	        return propertyIsEnumerable.call(object, symbol);
	      });
	    };

	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;

	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          result = false;

	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return new Ctor;

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return new Ctor;

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      var type = typeof value;
	      length = length == null ? MAX_SAFE_INTEGER : length;

	      return !!length &&
	        (type == 'number' ||
	          (type != 'symbol' && reIsUint.test(value))) &&
	            (value > -1 && value % 1 == 0 && value < length);
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }

	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined || (key in Object(object)));
	      };
	    }

	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });

	      var cache = result.cache;
	      return result;
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }

	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Gets the value at `key`, unless `key` is "__proto__".
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the property to get.
	     * @returns {*} Returns the property value.
	     */
	    function safeGet(object, key) {
	      if (key == '__proto__') {
	        return;
	      }

	      return object[key];
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);

	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };

	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);

	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }

	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;

	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined, arguments);
	      };
	    }

	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;

	      size = size === undefined ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];

	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      var result = [];
	      if (string.charCodeAt(0) === 46 /* . */) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, subString) {
	        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;

	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }

	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);

	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));

	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            timeWaiting = wait - timeSinceLastCall;

	        return maxing
	          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	          : timeWaiting;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        timerId = undefined;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined;
	      }

	      function flush() {
	        return timerId === undefined ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Expose `MapCache`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? start : toInteger(start);
	      return baseRest(func, start);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;

	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return value
	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
	        : (value === 0 ? value : 0);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(object, sources) {
	      object = Object(object);

	      var index = -1;
	      var length = sources.length;
	      var guard = length > 2 ? sources[2] : undefined;

	      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	        length = 1;
	      }

	      while (++index < length) {
	        var source = sources[index];
	        var props = keysIn(source);
	        var propsIndex = -1;
	        var propsLength = props.length;

	        while (++propsIndex < propsLength) {
	          var key = props[propsIndex];
	          var value = object[key];

	          if (value === undefined ||
	              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	            object[key] = source[key];
	          }
	        }
	      }

	      return object;
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined, customDefaultsMerge);
	      return apply(mergeWith, undefined, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      var isDeep = false;
	      paths = arrayMap(paths, function(path) {
	        path = castPath(path, object);
	        isDeep || (isDeep = path.length > 1);
	        return path;
	      });
	      copyObject(object, getAllKeysIn(object), result);
	      if (isDeep) {
	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	      }
	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, paths);
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      if (object == null) {
	        return {};
	      }
	      var props = arrayMap(getAllKeysIn(object), function(prop) {
	        return [prop];
	      });
	      predicate = getIteratee(predicate);
	      return basePickBy(object, props, function(value, path) {
	        return predicate(value, path[0]);
	      });
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        length = 1;
	        object = undefined;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined : object[toKey(path[index])];
	        if (value === undefined) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined;
	      }
	      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = position == null
	        ? 0
	        : baseClamp(toInteger(position), 0, string.length);

	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrim, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;

	      if (pattern === undefined) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }

	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }

	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }

	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }

	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

	        var result = (this.__filtered__ && !index)
	          ? new LazyWrapper(this)
	          : this.clone();

	        if (result.__filtered__) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;

	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (true) {
	    // Expose Lodash on the global object to prevent errors when Lodash is
	    // loaded by a script tag in the presence of an AMD loader.
	    // See http://requirejs.org/docs/errors.html#mismatch for more details.
	    // Use `_.noConflict` to remove Lodash from the global object.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds it.
	  else if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(144)(module)))

/***/ }),
/* 144 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	var __vue_exports__, __vue_options__
	var __vue_styles__ = {}

	/* script */
	__vue_exports__ = __webpack_require__(146)

	/* template */
	var __vue_template__ = __webpack_require__(147)
	__vue_options__ = __vue_exports__ = __vue_exports__ || {}
	if (
	  typeof __vue_exports__.default === "object" ||
	  typeof __vue_exports__.default === "function"
	) {
	if (Object.keys(__vue_exports__).some(function (key) { return key !== "default" && key !== "__esModule" })) {console.error("named exports are not supported in *.vue files.")}
	__vue_options__ = __vue_exports__ = __vue_exports__.default
	}
	if (typeof __vue_options__ === "function") {
	  __vue_options__ = __vue_options__.options
	}
	__vue_options__.__file = "/home/dn/www/reform-city.docker/app/modules/commerce/backend/assets/src/views/Dashboard.vue"
	__vue_options__.render = __vue_template__.render
	__vue_options__.staticRenderFns = __vue_template__.staticRenderFns

	/* hot reload */
	if (false) {(function () {
	  var hotAPI = require("vue-loader/node_modules/vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  module.hot.accept()
	  if (!module.hot.data) {
	    hotAPI.createRecord("data-v-d25acd5e", __vue_options__)
	  } else {
	    hotAPI.reload("data-v-d25acd5e", __vue_options__)
	  }
	})()}
	if (__vue_options__.functional) {console.error("[vue-loader] Dashboard.vue: functional components are not supported and should be defined in plain js files using render functions.")}

	module.exports = __vue_exports__


/***/ }),
/* 146 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	//
	//
	//
	//
	//
	//


	exports.default = {};

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return _c('p', [_vm._v("Dashboard component")])
	},staticRenderFns: []}
	if (false) {
	  module.hot.accept()
	  if (module.hot.data) {
	     require("vue-loader/node_modules/vue-hot-reload-api").rerender("data-v-d25acd5e", module.exports)
	  }
	}

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	var __vue_exports__, __vue_options__
	var __vue_styles__ = {}

	/* script */
	__vue_exports__ = __webpack_require__(149)

	/* template */
	var __vue_template__ = __webpack_require__(150)
	__vue_options__ = __vue_exports__ = __vue_exports__ || {}
	if (
	  typeof __vue_exports__.default === "object" ||
	  typeof __vue_exports__.default === "function"
	) {
	if (Object.keys(__vue_exports__).some(function (key) { return key !== "default" && key !== "__esModule" })) {console.error("named exports are not supported in *.vue files.")}
	__vue_options__ = __vue_exports__ = __vue_exports__.default
	}
	if (typeof __vue_options__ === "function") {
	  __vue_options__ = __vue_options__.options
	}
	__vue_options__.__file = "/home/dn/www/reform-city.docker/app/modules/commerce/backend/assets/src/views/Login.vue"
	__vue_options__.render = __vue_template__.render
	__vue_options__.staticRenderFns = __vue_template__.staticRenderFns

	/* hot reload */
	if (false) {(function () {
	  var hotAPI = require("vue-loader/node_modules/vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  module.hot.accept()
	  if (!module.hot.data) {
	    hotAPI.createRecord("data-v-5edff3b4", __vue_options__)
	  } else {
	    hotAPI.reload("data-v-5edff3b4", __vue_options__)
	  }
	})()}
	if (__vue_options__.functional) {console.error("[vue-loader] Login.vue: functional components are not supported and should be defined in plain js files using render functions.")}

	module.exports = __vue_exports__


/***/ }),
/* 149 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	exports.default = {
	    data: function data() {
	        return {
	            form: {
	                login: '',
	                password: ''
	            }
	        };
	    },


	    computed: {
	        isLoading: function isLoading() {
	            return this.$store.getters['isLoading'];
	        },
	        hasError: function hasError() {
	            return this.$store.getters['hasError'];
	        }
	    },

	    methods: {
	        submit: function submit() {
	            this.$auth.login({
	                data: this.form,
	                rememberMe: true
	                // fetchUser: false,
	                // redirect: '/',
	            });
	        }
	    }

	};

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
	  return _c('b-form', {
	    staticClass: "login-form",
	    on: {
	      "submit": _vm.submit
	    }
	  }, [_c('b-card', {
	    attrs: {
	      "header": "Вход",
	      "header-class": "text-white bg-secondary",
	      "no-body": ""
	    }
	  }, [_c('b-card-body', [_c('b-form-group', {
	    attrs: {
	      "label": "Логин",
	      "label-for": "login",
	      "label-cols-sm": "3"
	    }
	  }, [_c('b-form-input', {
	    attrs: {
	      "id": "login",
	      "type": "text",
	      "required": "",
	      "trim": ""
	    },
	    model: {
	      value: (_vm.form.login),
	      callback: function($$v) {
	        _vm.$set(_vm.form, "login", $$v)
	      },
	      expression: "form.login"
	    }
	  })], 1), _vm._v(" "), _c('b-form-group', {
	    attrs: {
	      "label": "Пароль",
	      "label-for": "password",
	      "label-cols-sm": "3"
	    }
	  }, [_c('b-form-input', {
	    attrs: {
	      "id": "password",
	      "type": "password",
	      "required": "",
	      "trim": ""
	    },
	    model: {
	      value: (_vm.form.password),
	      callback: function($$v) {
	        _vm.$set(_vm.form, "password", $$v)
	      },
	      expression: "form.password"
	    }
	  })], 1), _vm._v(" "), _c('b-button', {
	    staticClass: "offset-sm-3",
	    attrs: {
	      "type": "submit",
	      "variant": "primary",
	      "disabled": _vm.isLoading
	    }
	  }, [_vm._v("Войти")])], 1)], 1)], 1)
	},staticRenderFns: []}
	if (false) {
	  module.hot.accept()
	  if (module.hot.data) {
	     require("vue-loader/node_modules/vue-hot-reload-api").rerender("data-v-5edff3b4", module.exports)
	  }
	}

/***/ }),
/* 151 */
/***/ (function(module, exports) {

	module.exports = {
	    
	    request: function (req, token) {
	        this.options.http._setHeaders.call(this, req, {Authorization: 'Bearer ' + token});
	    },
	    
	    response: function (res) {
	        var headers = this.options.http._getHeaders.call(this, res),
	            token = headers.Authorization || headers.authorization;

	        if (token) {
	            token = token.split(/Bearer\:?\s?/i);
	            
	            return token[token.length > 1 ? 1 : 0].trim();
	        }
	    }
	};

/***/ }),
/* 152 */
/***/ (function(module, exports) {

	module.exports = {
	  _init: function () {
	      if ( ! this.options.Vue.axios) {
	          return 'axios.js : Vue.axios must be set.'
	      }
	  },

	  _interceptor: function (req, res) {
	    var _this = this;

	    if (req) {
	      this.options.Vue.axios.interceptors.request.use(function (request) {
	        req.call(_this, request);
	        return request;
	      }, function (error) {
	        req.call(_this, error.request);
	        return Promise.reject(error);
	      })
	    }

	    if (res) {
	      this.options.Vue.axios.interceptors.response.use(function (response) {
	        res.call(_this, response);
	        return response;
	      }, function (error) {
	        if (error && error.response) {
	          res.call(_this, error.response);
	        }
	        
	        return Promise.reject(error);
	      })
	    }
	  },

	  _invalidToken: function (res) {
	    if (res.status === 401) {
	      return true;
	    }
	  },

	  _httpData: function (res) {
	    return res.data || {};
	  },

	  _http: function (data) {
	    var http = this.options.Vue.axios(data);

	    http.then(data.success, data.error);

	    return http;
	  },

	  _getHeaders: function (res) {
	    return res.headers;
	  },

	  _setHeaders: function (req, headers) {
	    req.headers.common = Object.assign({}, req.headers.common, headers);
	  }
	}


/***/ }),
/* 153 */
/***/ (function(module, exports) {

	module.exports = {

	    _init: function () {
	        if ( ! this.options.Vue.router) {
	            return 'vue-router.2.x.js : Vue.router must be set.';
	        }
	    },

	    _bindData: function (data, ctx) {
	        var error, success;

	        data = data || {};

	        error = data.error;
	        success = data.success;

	        data.query = ctx.$route.query || {};

	        if (data.success) { data.success = function (res) { success.call(ctx, res); } }
	        if (data.error) { data.error = function (res) { error.call(ctx, res); } }

	        return data;
	    },

	    _beforeEach: function (routerBeforeEach, transitionEach) {
	        var _this = this;

	        this.options.Vue.router.beforeEach(function (transition, location, next) {
	            _this.options.setTransitions.call(this, transition);
	            
	            routerBeforeEach.call(_this, function () {
	                var auth = _this.options.getAuthMeta(transition);

	                transitionEach.call(_this, transition, auth, function (redirect) {
	                    if (!redirect) {
	                        (next || transition.next)();
	                        return;
	                    }

	                    // router v2.x
	                    if (next) {
	                        next(redirect);
	                    } else {
	                        this.options.router._routerReplace.call(this, redirect);
	                    }
	                });
	            });
	        })
	    },

	    _routerReplace: function (data) {
	        var router = this.options.Vue.router;

	        router.replace.call(router, data);
	    },

	    _routerGo: function (data) {
	        var router = this.options.Vue.router;

	        (router.push || router.go).call(router, data);
	    }

	};

/***/ })
/******/ ]);